import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Callable, Set, Union
from enum import Enum
from dataclasses import dataclass, field
from collections import deque, defaultdict
import traceback
from abc import ABC, abstractmethod

from strategies import TradingSignal, SignalType, BaseStrategy
from .data_models import SignalMetrics, SystemConfig, NotificationSettings

logger = logging.getLogger(__name__)


class SignalPriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    LOW = 1
    MEDIUM = 2
    HIGH = 3
    CRITICAL = 4


class SignalStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    PENDING = "pending"
    PROCESSING = "processing"
    APPROVED = "approved"
    REJECTED = "rejected"
    SENT = "sent"
    EXPIRED = "expired"
    ERROR = "error"


@dataclass
class ProcessedSignal:
    """–°–∏–≥–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    original_signal: TradingSignal
    priority: SignalPriority
    status: SignalStatus
    created_at: datetime
    processed_at: Optional[datetime] = None
    sent_at: Optional[datetime] = None
    processing_duration: float = 0.0
    filter_results: Dict[str, bool] = field(default_factory=dict)
    rejection_reasons: List[str] = field(default_factory=list)
    enhancement_applied: List[str] = field(default_factory=list)
    final_message: str = ""
    
    def to_dict(self) -> Dict[str, Any]:
        """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "signal": self.original_signal.to_dict(),
            "priority": self.priority.value,
            "status": self.status.value,
            "created_at": self.created_at.isoformat(),
            "processed_at": self.processed_at.isoformat() if self.processed_at else None,
            "sent_at": self.sent_at.isoformat() if self.sent_at else None,
            "processing_duration": self.processing_duration,
            "filter_results": self.filter_results,
            "rejection_reasons": self.rejection_reasons,
            "enhancement_applied": self.enhancement_applied
        }


class SignalFilter(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, name: str, enabled: bool = True):
        self.name = name
        self.enabled = enabled
        self.stats = {
            "total_processed": 0,
            "approved": 0,
            "rejected": 0,
            "errors": 0
        }
    
    @abstractmethod
    async def apply_filter(self, signal: TradingSignal, context: Dict[str, Any]) -> bool:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –∫ —Å–∏–≥–Ω–∞–ª—É
        
        Returns:
            True –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä, False –µ—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω
        """
        pass
    
    def get_rejection_reason(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        return f"–û—Ç–∫–ª–æ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä–æ–º {self.name}"


class ConflictFilter(SignalFilter):
    """–§–∏–ª—å—Ç—Ä –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, conflict_window_minutes: int = 10):
        super().__init__("ConflictFilter")
        self.conflict_window = timedelta(minutes=conflict_window_minutes)
        self.recent_signals: deque = deque(maxlen=50)
    
    async def apply_filter(self, signal: TradingSignal, context: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏"""
        try:
            current_time = datetime.now()
            
            cutoff_time = current_time - self.conflict_window
            self.recent_signals = deque(
                [s for s in self.recent_signals if s.timestamp > cutoff_time],
                maxlen=50
            )
            
            for recent_signal in self.recent_signals:
                if self._signals_conflict(signal, recent_signal):
                    self.stats["rejected"] += 1
                    return False
            
            self.recent_signals.append(signal)
            self.stats["approved"] += 1
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ ConflictFilter: {e}")
            self.stats["errors"] += 1
            return False
    
    def _signals_conflict(self, signal1: TradingSignal, signal2: TradingSignal) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç –ª–∏ –¥–≤–∞ —Å–∏–≥–Ω–∞–ª–∞"""
        if signal1.strategy_name != signal2.strategy_name:
            if ((signal1.signal_type in [SignalType.BUY, SignalType.STRONG_BUY] and 
                 signal2.signal_type in [SignalType.SELL, SignalType.STRONG_SELL]) or
                (signal1.signal_type in [SignalType.SELL, SignalType.STRONG_SELL] and 
                 signal2.signal_type in [SignalType.BUY, SignalType.STRONG_BUY])):
                return True
        return False
    
    def get_rejection_reason(self) -> str:
        return "–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å –Ω–µ–¥–∞–≤–Ω–∏–º —Å–∏–≥–Ω–∞–ª–æ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"


class DuplicateFilter(SignalFilter):
    """–§–∏–ª—å—Ç—Ä –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, duplicate_window_minutes: int = 15):
        super().__init__("DuplicateFilter")
        self.duplicate_window = timedelta(minutes=duplicate_window_minutes)
        self.recent_signals: deque = deque(maxlen=100)
    
    async def apply_filter(self, signal: TradingSignal, context: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            current_time = datetime.now()
            
            cutoff_time = current_time - self.duplicate_window
            self.recent_signals = deque(
                [s for s in self.recent_signals if s.timestamp > cutoff_time],
                maxlen=100
            )
            
            for recent_signal in self.recent_signals:
                if self._is_duplicate(signal, recent_signal):
                    self.stats["rejected"] += 1
                    return False
            
            self.recent_signals.append(signal)
            self.stats["approved"] += 1
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ DuplicateFilter: {e}")
            self.stats["errors"] += 1
            return False
    
    def _is_duplicate(self, signal1: TradingSignal, signal2: TradingSignal) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ —Å–∏–≥–Ω–∞–ª—ã –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏"""
        return (signal1.signal_type == signal2.signal_type and 
                signal1.strategy_name == signal2.strategy_name and
                abs(signal1.price - signal2.price) / signal1.price < 0.001)
    
    def get_rejection_reason(self) -> str:
        return "–î—É–±–ª–∏—Ä—É–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–π —Å–∏–≥–Ω–∞–ª —Ç–æ–π –∂–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"


class QualityFilter(SignalFilter):
    """–§–∏–ª—å—Ç—Ä –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, min_quality_score: float = 0.6, min_reasons: int = 1):
        super().__init__("QualityFilter")
        self.min_quality_score = min_quality_score
        self.min_reasons = min_reasons
    
    async def apply_filter(self, signal: TradingSignal, context: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            if signal.quality_score < self.min_quality_score:
                self.stats["rejected"] += 1
                return False
            
            if len(signal.reasons) < self.min_reasons:
                self.stats["rejected"] += 1
                return False
            
            if not signal.is_valid or signal.is_expired:
                self.stats["rejected"] += 1
                return False
            
            self.stats["approved"] += 1
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ QualityFilter: {e}")
            self.stats["errors"] += 1
            return False
    
    def get_rejection_reason(self) -> str:
        return f"–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è score ‚â•{self.min_quality_score}, –ø—Ä–∏—á–∏–Ω ‚â•{self.min_reasons})"


class SignalProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —É–ª—É—á—à–µ–Ω–∏–π"""
    
    def __init__(self):
        self.filters: List[SignalFilter] = []
        self.enhancement_plugins: List[Callable] = []
        
        self.add_filter(ConflictFilter())
        self.add_filter(DuplicateFilter())
        self.add_filter(QualityFilter())
        
        self.stats = {
            "total_processed": 0,
            "approved": 0,
            "rejected": 0,
            "errors": 0,
            "processing_time_total": 0.0,
            "last_reset": datetime.now()
        }
    
    def add_filter(self, filter_instance: SignalFilter):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"""
        self.filters.append(filter_instance)
        logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä: {filter_instance.name}")
    
    def remove_filter(self, filter_name: str):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏"""
        self.filters = [f for f in self.filters if f.name != filter_name]
        logger.info(f"‚ûñ –£–¥–∞–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä: {filter_name}")
    
    def enable_filter(self, filter_name: str, enabled: bool = True):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä"""
        for filter_instance in self.filters:
            if filter_instance.name == filter_name:
                filter_instance.enabled = enabled
                status = "–≤–∫–ª—é—á–µ–Ω" if enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
                logger.info(f"üîß –§–∏–ª—å—Ç—Ä {filter_name} {status}")
                return
        logger.warning(f"‚ö†Ô∏è –§–∏–ª—å—Ç—Ä {filter_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    async def process_signal(self, signal: TradingSignal) -> ProcessedSignal:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
        
        Returns:
            ProcessedSignal —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        start_time = datetime.now()
        self.stats["total_processed"] += 1
        
        priority = self._determine_priority(signal)
        
        processed_signal = ProcessedSignal(
            original_signal=signal,
            priority=priority,
            status=SignalStatus.PROCESSING,
            created_at=start_time
        )
        
        try:
            context = {"signal": signal, "timestamp": start_time}
            
            for filter_instance in self.filters:
                if not filter_instance.enabled:
                    continue
                
                filter_instance.stats["total_processed"] += 1
                
                try:
                    passed = await filter_instance.apply_filter(signal, context)
                    processed_signal.filter_results[filter_instance.name] = passed
                    
                    if not passed:
                        processed_signal.status = SignalStatus.REJECTED
                        processed_signal.rejection_reasons.append(filter_instance.get_rejection_reason())
                        self.stats["rejected"] += 1
                        break
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–µ {filter_instance.name}: {e}")
                    filter_instance.stats["errors"] += 1
                    processed_signal.filter_results[filter_instance.name] = False
                    processed_signal.rejection_reasons.append(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ {filter_instance.name}")
            
            if processed_signal.status == SignalStatus.PROCESSING:
                processed_signal.status = SignalStatus.APPROVED
                self.stats["approved"] += 1
                
                await self._apply_enhancements(processed_signal)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            processed_signal.status = SignalStatus.ERROR
            processed_signal.rejection_reasons.append(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            self.stats["errors"] += 1
        
        end_time = datetime.now()
        processed_signal.processed_at = end_time
        processed_signal.processing_duration = (end_time - start_time).total_seconds()
        self.stats["processing_time_total"] += processed_signal.processing_duration
        
        return processed_signal
    
    def _determine_priority(self, signal: TradingSignal) -> SignalPriority:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∏–≥–Ω–∞–ª–∞"""
        if (signal.signal_type in [SignalType.STRONG_BUY, SignalType.STRONG_SELL] and 
            signal.strength >= 0.9 and signal.confidence >= 0.9):
            return SignalPriority.CRITICAL
        
        if signal.strength >= 0.8 and signal.confidence >= 0.8:
            return SignalPriority.HIGH
        
        if signal.strength >= 0.6 or signal.confidence >= 0.7:
            return SignalPriority.MEDIUM
        
        return SignalPriority.LOW
    
    async def _apply_enhancements(self, processed_signal: ProcessedSignal):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –∫ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–º—É —Å–∏–≥–Ω–∞–ª—É"""
        try:
            signal = processed_signal.original_signal
            
            processed_signal.final_message = self._format_signal_message(signal)
            processed_signal.enhancement_applied.append("formatted_message")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π: {e}")
    
    def _format_signal_message(self, signal: TradingSignal) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        try:
            emoji_map = {
                SignalType.STRONG_BUY: "üü¢üî•",
                SignalType.BUY: "üü¢",
                SignalType.STRONG_SELL: "üî¥üî•", 
                SignalType.SELL: "üî¥",
                SignalType.NEUTRAL: "üî∂"
            }
            
            if signal.strength >= 0.9:
                strength_emoji = "üî•üî•üî•"
                strength_text = "–≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û –°–ò–õ–¨–ù–´–ô"
            elif signal.strength >= 0.8:
                strength_emoji = "üî•üî•"
                strength_text = "–û–ß–ï–ù–¨ –°–ò–õ–¨–ù–´–ô"
            elif signal.strength >= 0.7:
                strength_emoji = "üî•"
                strength_text = "–°–ò–õ–¨–ù–´–ô"
            elif signal.strength >= 0.6:
                strength_emoji = "üí™"
                strength_text = "–°–†–ï–î–ù–ò–ô"
            else:
                strength_emoji = "üí°"
                strength_text = "–°–õ–ê–ë–´–ô"
            
            message = f"""
{emoji_map.get(signal.signal_type, "üî∂")} **–¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ**

üéØ **–¢–∏–ø:** {signal.signal_type.value}
{strength_emoji} **–°–∏–ª–∞:** {strength_text} ({signal.strength:.2f})
üé≤ **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {signal.confidence_level.value.upper()} ({signal.confidence:.2f})

üí∞ **–¶–µ–Ω–∞:** ${signal.price:,.2f}
üìä **–ò–∑–º–µ–Ω–µ–Ω–∏—è:**
   ‚Ä¢ 1 –º–∏–Ω: {signal.price_change_1m:+.2f}%
   ‚Ä¢ 5 –º–∏–Ω: {signal.price_change_5m:+.2f}%  
   ‚Ä¢ 24 —á: {signal.price_change_24h:+.2f}%
üì¶ **–û–±—ä–µ–º 24—á:** {signal.volume_24h:,.0f} BTC

üß† **–°—Ç—Ä–∞—Ç–µ–≥–∏—è:** {signal.strategy_name}
üìù **–ê–Ω–∞–ª–∏–∑:**
"""
            
            for reason in signal.reasons[:3]:
                message += f"   ‚Ä¢ {reason}\n"
            
            if signal.stop_loss or signal.take_profit:
                message += f"\nüõ°Ô∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏:**\n"
                if signal.stop_loss:
                    message += f"   ‚Ä¢ Stop Loss: ${signal.stop_loss:,.2f}\n"
                if signal.take_profit:
                    message += f"   ‚Ä¢ Take Profit: ${signal.take_profit:,.2f}\n"
                if signal.position_size_recommendation > 0:
                    message += f"   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: {signal.position_size_recommendation:.1%}\n"
            
            message += f"""
‚è∞ {signal.timestamp.strftime('%H:%M:%S')}
‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {signal.quality_score:.2f}/1.0

_–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ—Å—É—Ç —Ä–∏—Å–∫–∏!_
            """
            
            return message.strip()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return f"üö® –°–ò–ì–ù–ê–õ: {signal.signal_type.value} {signal.symbol} @ ${signal.price:,.2f} ({signal.strategy_name})"
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        avg_processing_time = (
            self.stats["processing_time_total"] / self.stats["total_processed"]
            if self.stats["total_processed"] > 0 else 0
        )
        
        filter_stats = {}
        for filter_instance in self.filters:
            filter_stats[filter_instance.name] = {
                **filter_instance.stats,
                "enabled": filter_instance.enabled
            }
        
        return {
            **self.stats,
            "average_processing_time": round(avg_processing_time, 4),
            "approval_rate": round(
                self.stats["approved"] / self.stats["total_processed"] * 100, 2
            ) if self.stats["total_processed"] > 0 else 0,
            "filter_stats": filter_stats,
            "active_filters": len([f for f in self.filters if f.enabled])
        }


class SignalManager:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    
    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤  
    3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
    4. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    5. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    """
    
    def __init__(self, 
                 max_queue_size: int = 1000, 
                 notification_settings: Optional[NotificationSettings] = None,
                 data_source_adapter = None,
                 openai_analyzer = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SignalManager
        
        Args:
            max_queue_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            notification_settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            data_source_adapter: –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            openai_analyzer: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä OpenAI –¥–ª—è AI –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.processor = SignalProcessor()
        self.notification_settings = notification_settings or NotificationSettings()
        
        self.data_source_adapter = data_source_adapter
        self.openai_analyzer = openai_analyzer
        
        self.ai_analysis_enabled = bool(data_source_adapter and openai_analyzer)
        
        if self.ai_analysis_enabled:
            logger.info("ü§ñ AI –∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–µ–Ω –¥–ª—è –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        else:
            logger.info("‚ö†Ô∏è AI –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç data_source_adapter –∏–ª–∏ openai_analyzer)")
        
        self.signal_queue: asyncio.Queue = asyncio.Queue(maxsize=max_queue_size)
        self.processed_signals: deque = deque(maxlen=1000)
        
        self.subscribers: Set[Callable] = set()
        
        self.is_running = False
        self.processing_task: Optional[asyncio.Task] = None
        
        self.stats = {
            "signals_received": 0,
            "signals_processed": 0,
            "signals_sent": 0,
            "signals_dropped": 0,
            "subscribers_count": 0,
            "notifications_sent": 0,
            "notification_errors": 0,
            "start_time": datetime.now(),
            "last_signal_time": None,
            "processing_errors": 0,
            "ai_analysis_enabled": self.ai_analysis_enabled,
            "ai_analysis_attempts": 0,
            "ai_analysis_success": 0,
            "ai_analysis_errors": 0,
            "ai_analysis_skipped": 0
        }
        
        logger.info("üéõÔ∏è SignalManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {max_queue_size}")
        logger.info(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å {len(self.processor.filters)} —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            if self.is_running:
                logger.warning("‚ö†Ô∏è SignalManager —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ SignalManager...")
            
            self.is_running = True
            self.stats["start_time"] = datetime.now()
            
            self.processing_task = asyncio.create_task(self._signal_processing_loop())
            
            logger.info("‚úÖ SignalManager –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ SignalManager: {e}")
            self.is_running = False
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ SignalManager...")
            
            self.is_running = False
            
            if self.processing_task and not self.processing_task.done():
                self.processing_task.cancel()
                try:
                    await self.processing_task
                except asyncio.CancelledError:
                    pass
            
            remaining_signals = []
            while not self.signal_queue.empty():
                try:
                    signal = self.signal_queue.get_nowait()
                    remaining_signals.append(signal)
                except asyncio.QueueEmpty:
                    break
            
            if remaining_signals:
                logger.info(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(remaining_signals)} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–∏–≥–Ω–∞–ª–æ–≤...")
                for signal in remaining_signals:
                    processed_signal = await self.processor.process_signal(signal)
                    if processed_signal.status == SignalStatus.APPROVED:
                        await self._send_to_subscribers(processed_signal)
            
            logger.info("üõë SignalManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ SignalManager: {e}")
    
    async def submit_signal(self, signal: TradingSignal) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Args:
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å, False –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞
        """
        try:
            if not self.is_running:
                logger.warning("‚ö†Ô∏è SignalManager –Ω–µ –∑–∞–ø—É—â–µ–Ω, —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω")
                return False
            
            self.stats["signals_received"] += 1
            self.stats["last_signal_time"] = datetime.now()
            
            try:
                self.signal_queue.put_nowait(signal)
                logger.debug(f"üì• –°–∏–≥–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å: {signal.strategy_name}")
                return True
            except asyncio.QueueFull:
                self.stats["signals_dropped"] += 1
                logger.warning(f"‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, —Å–∏–≥–Ω–∞–ª –æ—Ç–±—Ä–æ—à–µ–Ω")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False
    
    async def _signal_processing_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        while self.is_running:
            try:
                try:
                    signal = await asyncio.wait_for(self.signal_queue.get(), timeout=1.0)
                except asyncio.TimeoutError:
                    continue
                
                processed_signal = await self.processor.process_signal(signal)
                self.stats["signals_processed"] += 1
                
                self.processed_signals.append(processed_signal)
                
                if processed_signal.status == SignalStatus.APPROVED:
                    await self._send_to_subscribers(processed_signal)
                
                self.signal_queue.task_done()
                
            except asyncio.CancelledError:
                logger.info("üîÑ –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
                logger.error(f"Stack trace: {traceback.format_exc()}")
                self.stats["processing_errors"] += 1
                await asyncio.sleep(1)
        
        logger.info("üõë –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _enhance_with_ai_analysis(self, processed_signal: ProcessedSignal) -> str:
        """
        –û–±–æ–≥–∞—â–∞–µ—Ç —Å–∏–≥–Ω–∞–ª AI –∞–Ω–∞–ª–∏–∑–æ–º –æ—Ç OpenAI
        
        –ë–µ—Ä–µ—Ç —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –î–û–ü–û–õ–ù–Ø–ï–¢ –µ–≥–æ AI –∞–Ω–∞–ª–∏–∑–æ–º:
        1. –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ data_source_adapter
        2. –§–æ—Ä–º–∏—Ä—É–µ—Ç market_data –¥–ª—è OpenAI
        3. –í—ã–∑—ã–≤–∞–µ—Ç OpenAI –∞–Ω–∞–ª–∏–∑
        4. –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + AI –∞–Ω–∞–ª–∏–∑
        
        Args:
            processed_signal: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å final_message
            
        Returns:
            –û–±–æ–≥–∞—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏—Å—Ö–æ–¥–Ω–æ–µ + AI –∞–Ω–∞–ª–∏–∑)
        """
        try:
            self.stats["ai_analysis_attempts"] += 1
            
            if not self.ai_analysis_enabled:
                logger.debug("AI –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞—é –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                self.stats["ai_analysis_skipped"] += 1
                return processed_signal.final_message
            
            original_signal = processed_signal.original_signal
            
            logger.info(f"ü§ñ –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {original_signal.strategy_name} —Å–∏–≥–Ω–∞–ª–∞...")
            
            try:
                market_snapshot = await self.data_source_adapter.get_market_snapshot(
                    symbol=original_signal.symbol
                )
                
                if not market_snapshot:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å market_snapshot, –ø—Ä–æ–ø—É—Å–∫–∞—é AI –∞–Ω–∞–ª–∏–∑")
                    self.stats["ai_analysis_skipped"] += 1
                    return processed_signal.final_message
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è market_snapshot: {e}")
                self.stats["ai_analysis_errors"] += 1
                return processed_signal.final_message
            
            market_data_for_ai = {
                'current_price': market_snapshot.current_price,
                'price_change_24h': market_snapshot.price_change_24h,
                'volume_24h': market_snapshot.volume_24h,
                'high_24h': market_snapshot.high_24h,
                'low_24h': market_snapshot.low_24h,
                'open_interest': market_snapshot.open_interest,
                'price_change_1m': getattr(market_snapshot, 'price_change_1m', 0),
                'price_change_5m': getattr(market_snapshot, 'price_change_5m', 0),
                'signal_type': original_signal.signal_type.value,
                'signal_strength': original_signal.strength,
                'signal_confidence': original_signal.confidence,
                'strategy_name': original_signal.strategy_name,
                'signal_reasons': original_signal.reasons[:3],
                'hourly_data': market_snapshot.hourly_stats if hasattr(market_snapshot, 'hourly_stats') else {}
            }
            
            logger.debug(f"üìä Market data –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: price=${market_data_for_ai['current_price']:.2f}, "
                        f"24h_change={market_data_for_ai['price_change_24h']:+.2f}%")
            
            try:
                ai_analysis = await self.openai_analyzer.analyze_market(market_data_for_ai)
                
                if not ai_analysis or len(ai_analysis.strip()) < 50:
                    logger.warning("‚ö†Ô∏è AI –∞–Ω–∞–ª–∏–∑ –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                    self.stats["ai_analysis_skipped"] += 1
                    return processed_signal.final_message
                
                logger.info(f"‚úÖ AI –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω ({len(ai_analysis)} —Å–∏–º–≤–æ–ª–æ–≤)")
                self.stats["ai_analysis_success"] += 1
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OpenAI: {e}")
                self.stats["ai_analysis_errors"] += 1
                return processed_signal.final_message
            
            enhanced_message = f"""{processed_signal.final_message}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

ü§ñ **AI –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê**

{ai_analysis}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
_–ê–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω OpenAI –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö_
"""
            
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–æ–≥–∞—â–µ–Ω–æ AI –∞–Ω–∞–ª–∏–∑–æ–º")
            return enhanced_message
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _enhance_with_ai_analysis: {e}")
            logger.error(f"Stack trace: {traceback.format_exc()}")
            self.stats["ai_analysis_errors"] += 1
            return processed_signal.final_message
    
    async def _send_to_subscribers(self, processed_signal: ProcessedSignal):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        try:
            if not self.subscribers:
                return
            
            processed_signal.status = SignalStatus.SENT
            processed_signal.sent_at = datetime.now()
            
            final_message_to_send = processed_signal.final_message
            
            if self.ai_analysis_enabled:
                try:
                    logger.info("ü§ñ –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ AI –∞–Ω–∞–ª–∏–∑–æ–º...")
                    enhanced_message = await self._enhance_with_ai_analysis(processed_signal)
                    final_message_to_send = enhanced_message
                    logger.info("‚úÖ –°–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–æ–≥–∞—â–µ–Ω AI")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –æ–±–æ–≥–∞—â–µ–Ω–∏—è: {e}")
                    final_message_to_send = processed_signal.final_message
            else:
                logger.debug("AI –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
            success_count = 0
            error_count = 0
            
            tasks = []
            for subscriber in self.subscribers.copy():
                task = asyncio.create_task(
                    self._notify_subscriber(subscriber, final_message_to_send)
                )
                tasks.append(task)
            
            if tasks:
                results = await asyncio.gather(*tasks, return_exceptions=True)
                
                for result in results:
                    if isinstance(result, Exception):
                        error_count += 1
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {result}")
                    else:
                        success_count += 1
            
            self.stats["signals_sent"] += 1
            self.stats["notifications_sent"] += success_count
            self.stats["notification_errors"] += error_count
            
            logger.info(f"üì§ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ‚úÖ{success_count} —É—Å–ø–µ—à–Ω–æ, ‚ùå{error_count} –æ—à–∏–±–æ–∫")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º: {e}")
    
    async def _notify_subscriber(self, subscriber: Callable, message: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        try:
            if asyncio.iscoroutinefunction(subscriber):
                await subscriber(message)
            else:
                subscriber(message)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {e}")
            raise
    
    def add_subscriber(self, callback: Callable):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–∞—Ö
        
        Args:
            callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å async)
        """
        self.subscribers.add(callback)
        self.stats["subscribers_count"] = len(self.subscribers)
        logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫ ({len(self.subscribers)} –≤—Å–µ–≥–æ)")
    
    def remove_subscriber(self, callback: Callable):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        self.subscribers.discard(callback)
        self.stats["subscribers_count"] = len(self.subscribers)
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫ ({len(self.subscribers)} –æ—Å—Ç–∞–ª–æ—Å—å)")
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        uptime = datetime.now() - self.stats["start_time"]
        
        processor_stats = self.processor.get_stats()
        
        return {
            **self.stats,
            "uptime_seconds": uptime.total_seconds(),
            "uptime_formatted": str(uptime).split('.')[0],
            "is_running": self.is_running,
            "queue_size": self.signal_queue.qsize(),
            "queue_max_size": self.signal_queue.maxsize,
            "processed_signals_history": len(self.processed_signals),
            "processor_stats": processor_stats,
            "success_rate": round(
                (self.stats["signals_sent"] / self.stats["signals_processed"] * 100)
                if self.stats["signals_processed"] > 0 else 0, 2
            ),
            "signals_per_hour": round(
                self.stats["signals_processed"] / (uptime.total_seconds() / 3600)
                if uptime.total_seconds() > 0 else 0, 2
            )
        }
    
    def get_recent_signals(self, hours: int = 1) -> List[ProcessedSignal]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        cutoff_time = datetime.now() - timedelta(hours=hours)
        return [
            signal for signal in self.processed_signals 
            if signal.created_at > cutoff_time
        ]
    
    def get_filter_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        return self.processor.get_stats()["filter_stats"]
    
    def configure_processor(self, **kwargs):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        if "enable_filter" in kwargs:
            filter_name, enabled = kwargs["enable_filter"]
            self.processor.enable_filter(filter_name, enabled)
    
    def __str__(self):
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        stats = self.get_stats()
        return (f"SignalManager(running={self.is_running}, "
                f"processed={stats['signals_processed']}, "
                f"sent={stats['signals_sent']}, "
                f"subscribers={len(self.subscribers)}, "
                f"queue={stats['queue_size']}/{stats['queue_max_size']})")
