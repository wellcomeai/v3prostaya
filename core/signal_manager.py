"""
Signal Manager v3.0 - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è

–£–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏:
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞–º–∏
- –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ AI –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI

Author: Trading Bot Team
Version: 3.0.0 - Simplified Edition
"""

import asyncio
import logging
from datetime import datetime, timedelta, timezone
from typing import List, Callable, Dict, Any, Optional, Set
from collections import defaultdict

logger = logging.getLogger(__name__)


class SignalManager:
    """
    üéõÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ v3.0
    
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
    –§–æ–∫—É—Å –Ω–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ—Å—Ç–æ—Ç–µ.
    
    Features:
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ symbol + type
    - Cooldown –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
    - –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ —á–µ—Ä–µ–∑ callback —Ñ—É–Ω–∫—Ü–∏–∏
    - –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ AI –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    
    Usage:
        signal_manager = SignalManager(
            openai_analyzer=openai_analyzer
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä TelegramBot)
        signal_manager.add_subscriber(bot.broadcast_signal)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º
        await signal_manager.start()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª
        await signal_manager.process_signal(trading_signal)
    """
    
    def __init__(
        self,
        openai_analyzer=None,  # OpenAIAnalyzer (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        cooldown_minutes: int = 5,
        max_signals_per_hour: int = 12,
        enable_ai_enrichment: bool = True,
        min_signal_strength: float = 0.5
    ):
        """
        Args:
            openai_analyzer: OpenAIAnalyzer –¥–ª—è AI –æ–±–æ–≥–∞—â–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            cooldown_minutes: –ú–∏–Ω—É—Ç—ã –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞/—Å–∏–º–≤–æ–ª–∞
            max_signals_per_hour: –ú–∞–∫—Å–∏–º—É–º —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —á–∞—Å
            enable_ai_enrichment: –í–∫–ª—é—á–∏—Ç—å AI –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
            min_signal_strength: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        self.openai_analyzer = openai_analyzer
        self.cooldown_minutes = cooldown_minutes
        self.max_signals_per_hour = max_signals_per_hour
        self.enable_ai_enrichment = enable_ai_enrichment and openai_analyzer is not None
        self.min_signal_strength = min_signal_strength
        
        # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ (callback —Ñ—É–Ω–∫—Ü–∏–∏)
        self.subscribers: List[Callable] = []
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.last_signals: Dict[str, datetime] = {}  # key = f"{symbol}_{signal_type}"
        self.signals_history: List[Dict] = []  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        
        # –°—Ç–∞—Ç—É—Å
        self.is_running = False
        self.start_time: Optional[datetime] = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "signals_received": 0,
            "signals_sent": 0,
            "signals_filtered_strength": 0,
            "signals_filtered_cooldown": 0,
            "signals_filtered_rate_limit": 0,
            "ai_enrichments": 0,
            "ai_enrichment_errors": 0,
            "broadcast_errors": 0,
            "start_time": None
        }
        
        logger.info("=" * 70)
        logger.info("üéõÔ∏è SignalManager v3.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info("=" * 70)
        logger.info(f"   ‚Ä¢ Cooldown: {cooldown_minutes} –º–∏–Ω—É—Ç")
        logger.info(f"   ‚Ä¢ Max signals/hour: {max_signals_per_hour}")
        logger.info(f"   ‚Ä¢ Min strength: {min_signal_strength}")
        logger.info(f"   ‚Ä¢ AI enrichment: {'‚úÖ' if self.enable_ai_enrichment else '‚ùå'}")
        logger.info("=" * 70)
    
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å SignalManager"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è SignalManager —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.is_running = True
        self.start_time = datetime.now(timezone.utc)
        self.stats["start_time"] = self.start_time
        
        logger.info("‚úÖ SignalManager –∑–∞–ø—É—â–µ–Ω")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SignalManager"""
        if not self.is_running:
            logger.warning("‚ö†Ô∏è SignalManager —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        self.is_running = False
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        uptime = (datetime.now(timezone.utc) - self.start_time).total_seconds()
        
        logger.info("=" * 70)
        logger.info("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê SIGNAL MANAGER")
        logger.info("=" * 70)
        logger.info(f"   ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime:.0f}s ({uptime/3600:.1f}h)")
        logger.info(f"   ‚Ä¢ –°–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {self.stats['signals_received']}")
        logger.info(f"   ‚Ä¢ –°–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats['signals_sent']}")
        logger.info(f"   ‚Ä¢ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ —Å–∏–ª–µ: {self.stats['signals_filtered_strength']}")
        logger.info(f"   ‚Ä¢ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ cooldown: {self.stats['signals_filtered_cooldown']}")
        logger.info(f"   ‚Ä¢ AI –æ–±–æ–≥–∞—â–µ–Ω–∏–π: {self.stats['ai_enrichments']}")
        logger.info("=" * 70)
        
        logger.info("‚úÖ SignalManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def add_subscriber(self, callback: Callable):
        """
        –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
        
        Args:
            callback: Async —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
                     –°–∏–≥–Ω–∞—Ç—É—Ä–∞: async def callback(message: str)
        """
        if callback not in self.subscribers:
            self.subscribers.append(callback)
            logger.info(f"üì° –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫ (–≤—Å–µ–≥–æ: {len(self.subscribers)})")
    
    def remove_subscriber(self, callback: Callable):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        if callback in self.subscribers:
            self.subscribers.remove(callback)
            logger.info(f"üì° –£–¥–∞–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫ (–æ—Å—Ç–∞–ª–æ—Å—å: {len(self.subscribers)})")
    
    async def process_signal(self, signal) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        
        Args:
            signal: TradingSignal –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        """
        try:
            self.stats["signals_received"] += 1
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø—É—â–µ–Ω
            if not self.is_running:
                logger.warning("‚ö†Ô∏è SignalManager –Ω–µ –∑–∞–ø—É—â–µ–Ω, —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω")
                return False
            
            # –§–∏–ª—å—Ç—Ä 1: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞
            if signal.strength < self.min_signal_strength:
                self.stats["signals_filtered_strength"] += 1
                logger.debug(
                    f"üîá –°–∏–≥–Ω–∞–ª –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –ø–æ —Å–∏–ª–µ: {signal.symbol} "
                    f"{signal.signal_type.value} (strength={signal.strength:.2f})"
                )
                return False
            
            # –§–∏–ª—å—Ç—Ä 2: Cooldown
            signal_key = f"{signal.symbol}_{signal.signal_type.value}"
            
            if signal_key in self.last_signals:
                time_since_last = datetime.now(timezone.utc) - self.last_signals[signal_key]
                cooldown_delta = timedelta(minutes=self.cooldown_minutes)
                
                if time_since_last < cooldown_delta:
                    self.stats["signals_filtered_cooldown"] += 1
                    logger.debug(
                        f"‚è∞ –°–∏–≥–Ω–∞–ª –≤ cooldown: {signal.symbol} {signal.signal_type.value} "
                        f"(–ø—Ä–æ—à–ª–æ {time_since_last.total_seconds():.0f}s)"
                    )
                    return False
            
            # –§–∏–ª—å—Ç—Ä 3: Rate limit (–º–∞–∫—Å–∏–º—É–º —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —á–∞—Å)
            one_hour_ago = datetime.now(timezone.utc) - timedelta(hours=1)
            recent_signals = [
                s for s in self.signals_history 
                if s['timestamp'] > one_hour_ago
            ]
            
            if len(recent_signals) >= self.max_signals_per_hour:
                self.stats["signals_filtered_rate_limit"] += 1
                logger.warning(
                    f"üö¶ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤: {len(recent_signals)}/{self.max_signals_per_hour}"
                )
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_signal_message(signal)
            
            # AI –æ–±–æ–≥–∞—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if self.enable_ai_enrichment:
                try:
                    ai_analysis = await self._enrich_with_ai(signal)
                    if ai_analysis:
                        message += f"\n\n{ai_analysis}"
                        self.stats["ai_enrichments"] += 1
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –æ–±–æ–≥–∞—â–µ–Ω–∏—è: {e}")
                    self.stats["ai_enrichment_errors"] += 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            await self._broadcast_to_subscribers(message)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self.last_signals[signal_key] = datetime.now(timezone.utc)
            self.signals_history.append({
                'symbol': signal.symbol,
                'type': signal.signal_type.value,
                'timestamp': datetime.now(timezone.utc),
                'strength': signal.strength
            })
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if len(self.signals_history) > 100:
                self.signals_history = self.signals_history[-100:]
            
            self.stats["signals_sent"] += 1
            
            logger.info(
                f"‚úÖ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {signal.symbol} {signal.signal_type.value} "
                f"(—Å–∏–ª–∞: {signal.strength:.2f}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f})"
            )
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return False
    
    def _format_signal_message(self, signal) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ
        
        Args:
            signal: TradingSignal
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        """
        try:
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
            emoji_map = {
                "BUY": "üü¢",
                "STRONG_BUY": "üü¢üü¢",
                "SELL": "üî¥",
                "STRONG_SELL": "üî¥üî¥",
                "NEUTRAL": "üîµ"
            }
            
            signal_emoji = emoji_map.get(signal.signal_type.value, "‚ö™")
            
            # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"""üö® *–¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ v3.0*

{signal_emoji} *{signal.signal_type.value}* {signal.symbol}

üí∞ *–¶–µ–Ω–∞:* ${signal.price:,.2f}

üìä *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–≥–Ω–∞–ª–∞:*
- –°–∏–ª–∞: {signal.strength:.2f} ({signal.strength_level.value})
- –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f} ({signal.confidence_level.value})
- –ö–∞—á–µ—Å—Ç–≤–æ: {signal.quality_score:.2f}
- –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal.strategy_name}

üìà *–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:*
- 1 –º–∏–Ω—É—Ç–∞: {signal.price_change_1m:+.2f}%
- 5 –º–∏–Ω—É—Ç: {signal.price_change_5m:+.2f}%
- 24 —á–∞—Å–∞: {signal.price_change_24h:+.2f}%"""

            # –ü—Ä–∏—á–∏–Ω—ã —Å–∏–≥–Ω–∞–ª–∞
            if signal.reasons:
                message += "\n\nüîç *–ü—Ä–∏—á–∏–Ω—ã —Å–∏–≥–Ω–∞–ª–∞:*"
                for i, reason in enumerate(signal.reasons[:5], 1):
                    message += f"\n{i}. {reason}"
            
            # Risk Management (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if signal.stop_loss or signal.take_profit:
                message += "\n\nüéØ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏:*"
                if signal.stop_loss:
                    message += f"\n‚Ä¢ Stop Loss: ${signal.stop_loss:,.2f}"
                if signal.take_profit:
                    message += f"\n‚Ä¢ Take Profit: ${signal.take_profit:,.2f}"
                if signal.position_size_recommendation > 0:
                    message += f"\n‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {signal.position_size_recommendation*100:.1f}%"
            
            # –í—Ä–µ–º—è –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            message += f"\n\n‚è∞ *–í—Ä–µ–º—è:* {signal.timestamp.strftime('%H:%M:%S UTC')}"
            if signal.expires_at:
                expires_in = (signal.expires_at - datetime.now()).total_seconds() / 60
                message += f"\n‚è≥ *–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:* {expires_in:.0f} –º–∏–Ω—É—Ç"
            
            # –î–∏—Å–∫–ª–µ–π–º–µ—Ä
            message += "\n\n‚ö†Ô∏è _–≠—Ç–æ –Ω–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç! –¢–æ—Ä–≥–æ–≤–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ —Å–≤—è–∑–∞–Ω–∞ —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ä–∏—Å–∫–∞–º–∏._"
            
            return message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π fallback
            return f"üö® *–°–ò–ì–ù–ê–õ:* {signal.signal_type.value} {signal.symbol} @ ${signal.price:,.2f}"
    
    async def _enrich_with_ai(self, signal) -> Optional[str]:
        """
        –û–±–æ–≥–∞—Ç–∏—Ç—å —Å–∏–≥–Ω–∞–ª AI –∞–Ω–∞–ª–∏–∑–æ–º —á–µ—Ä–µ–∑ OpenAI
        
        Args:
            signal: TradingSignal
            
        Returns:
            Optional[str]: AI –∞–Ω–∞–ª–∏–∑ –∏–ª–∏ None
        """
        try:
            if not self.openai_analyzer:
                return None
            
            logger.debug(f"ü§ñ –ó–∞–ø—Ä–æ—Å AI –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {signal.symbol}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI
            market_data = {
                'current_price': signal.price,
                'price_change_1m': signal.price_change_1m,
                'price_change_5m': signal.price_change_5m,
                'price_change_24h': signal.price_change_24h,
                'volume_24h': signal.volume_24h,
                'signal_type': signal.signal_type.value,
                'signal_strength': signal.strength,
                'signal_confidence': signal.confidence,
                'strategy_name': signal.strategy_name,
                'signal_reasons': signal.reasons
            }
            
            # –ü–æ–ª—É—á–∞–µ–º AI –∞–Ω–∞–ª–∏–∑
            ai_analysis = await self.openai_analyzer.analyze_market(market_data)
            
            if ai_analysis and len(ai_analysis) > 50:
                logger.debug(f"‚úÖ AI –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω ({len(ai_analysis)} —Å–∏–º–≤–æ–ª–æ–≤)")
                return f"ü§ñ *AI –ê–ù–ê–õ–ò–ó:*\n\n{ai_analysis}"
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –æ–±–æ–≥–∞—â–µ–Ω–∏—è: {e}")
            return None
    
    async def _broadcast_to_subscribers(self, message: str):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        """
        if not self.subscribers:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–∏–≥–Ω–∞–ª–∞")
            return
        
        logger.debug(f"üì° –†–∞—Å—Å—ã–ª–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ {len(self.subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        tasks = []
        for callback in self.subscribers:
            tasks.append(self._safe_call_subscriber(callback, message))
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ/–Ω–µ—É–¥–∞—á–Ω—ã–µ
        success_count = sum(1 for r in results if r is True)
        error_count = sum(1 for r in results if isinstance(r, Exception))
        
        logger.info(f"üì® –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ‚úÖ{success_count} —É—Å–ø–µ—à–Ω–æ, ‚ùå{error_count} –æ—à–∏–±–æ–∫")
        
        if error_count > 0:
            self.stats["broadcast_errors"] += error_count
    
    async def _safe_call_subscriber(self, callback: Callable, message: str) -> bool:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        
        Args:
            callback: Async —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
            message: –°–æ–æ–±—â–µ–Ω–∏–µ
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await callback(message)
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {e}")
            return False
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        uptime = 0
        if self.start_time:
            uptime = (datetime.now(timezone.utc) - self.start_time).total_seconds()
        
        filter_rate = 0
        if self.stats["signals_received"] > 0:
            filtered_total = (
                self.stats["signals_filtered_strength"] +
                self.stats["signals_filtered_cooldown"] +
                self.stats["signals_filtered_rate_limit"]
            )
            filter_rate = (filtered_total / self.stats["signals_received"]) * 100
        
        return {
            **self.stats,
            "is_running": self.is_running,
            "uptime_seconds": uptime,
            "subscribers_count": len(self.subscribers),
            "recent_signals_count": len(self.signals_history),
            "filter_rate_percent": filter_rate,
            "signals_per_hour": (self.stats["signals_sent"] / (uptime / 3600)) if uptime > 0 else 0
        }
    
    def get_health_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        stats = self.get_stats()
        
        is_healthy = (
            self.is_running and
            len(self.subscribers) > 0 and
            stats["signals_received"] >= 0
        )
        
        return {
            "healthy": is_healthy,
            "is_running": self.is_running,
            "subscribers_count": len(self.subscribers),
            "signals_sent": self.stats["signals_sent"],
            "signals_filtered": (
                self.stats["signals_filtered_strength"] +
                self.stats["signals_filtered_cooldown"] +
                self.stats["signals_filtered_rate_limit"]
            ),
            "uptime_seconds": stats["uptime_seconds"]
        }
    
    def __repr__(self) -> str:
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return (f"SignalManager(running={self.is_running}, "
                f"subscribers={len(self.subscribers)}, "
                f"signals_sent={self.stats['signals_sent']})")


# Export
__all__ = ["SignalManager"]

logger.info("‚úÖ SignalManager v3.0 loaded - Simplified Edition")
