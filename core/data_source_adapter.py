"""
Data Source Adapter

–ê–¥–∞–ø—Ç–µ—Ä –º–µ–∂–¥—É SimpleCandleSync/SimpleFuturesSync –∏ StrategyOrchestrator.
–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç MarketDataSnapshot –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.

Author: Trading Bot Team  
Version: 1.0.3 - Fixed: Priority to fresh M1 candles
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Set, Callable
from decimal import Decimal

from market_data import MarketDataSnapshot, DataQuality
from market_data.market_data_manager import DataSourceType

logger = logging.getLogger(__name__)


class DataSourceAdapter:
    """
    üîå –ê–¥–∞–ø—Ç–µ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è StrategyOrchestrator
    
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑:
    - SimpleCandleSync (–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã Bybit)
    - SimpleFuturesSync (—Ñ—å—é—á–µ—Ä—Å—ã YFinance)  
    - TechnicalAnalysisContextManager (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑)
    
    –í —Ñ–æ—Ä–º–∞—Ç MarketDataSnapshot –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.
    
    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    2. –°–æ–∑–¥–∞–Ω–∏–µ MarketDataSnapshot –∏–∑ —Å–≤–µ—á–µ–π
    3. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
    
    Usage:
        adapter = DataSourceAdapter(
            ta_context_manager=ta_context,
            simple_candle_sync=candle_sync,
            simple_futures_sync=futures_sync
        )
        
        snapshot = await adapter.get_market_snapshot("BTCUSDT")
    """
    
    def __init__(
        self,
        ta_context_manager,  # TechnicalAnalysisContextManager
        simple_candle_sync=None,  # SimpleCandleSync (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        simple_futures_sync=None,  # SimpleFuturesSync (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        default_symbols: Optional[List[str]] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞
        
        Args:
            ta_context_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            simple_candle_sync: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (Bybit)
            simple_futures_sync: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä —Ñ—å—é—á–µ—Ä—Å–æ–≤ (YFinance)
            default_symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        self.ta_context_manager = ta_context_manager
        self.simple_candle_sync = simple_candle_sync
        self.simple_futures_sync = simple_futures_sync
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        self.crypto_symbols = []
        self.futures_symbols = []
        
        if simple_candle_sync:
            self.crypto_symbols = simple_candle_sync.symbols
        
        if simple_futures_sync:
            self.futures_symbols = simple_futures_sync.symbols
        
        self.all_symbols = self.crypto_symbols + self.futures_symbols
        
        if not self.all_symbols and default_symbols:
            self.all_symbols = default_symbols
        
        # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.data_subscribers: Set[Callable] = set()
        
        # –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–Ω–∏–º–∫–æ–≤
        self.last_snapshots: Dict[str, MarketDataSnapshot] = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "snapshots_created": 0,
            "snapshots_cached": 0,
            "updates_sent": 0,
            "errors": 0,
            "start_time": datetime.now(),
            "last_update_time": None
        }
        
        # –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã
        self.is_running = False
        self._update_task: Optional[asyncio.Task] = None
        
        logger.info("üîå DataSourceAdapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   ‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {len(self.crypto_symbols)}")
        logger.info(f"   ‚Ä¢ –§—å—é—á–µ—Ä—Å—ã: {len(self.futures_symbols)}")
        logger.info(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(self.all_symbols)}")
    
    # ==================== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ ====================
    
    async def get_market_snapshot(self, symbol: str = None) -> Optional[MarketDataSnapshot]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–Ω–∏–º–æ–∫ —Ä—ã–Ω–∫–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–µ—Å–ª–∏ None - –±–µ—Ä–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π)
            
        Returns:
            MarketDataSnapshot –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
            if not symbol:
                if not self.all_symbols:
                    logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
                    return None
                symbol = self.all_symbols[0]
            
            symbol = symbol.upper()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à)
            if symbol in self.last_snapshots:
                cached_snapshot = self.last_snapshots[symbol]
                age = (datetime.now() - cached_snapshot.timestamp).total_seconds()
                
                if age < 60:  # –ö—ç—à –≤–∞–ª–∏–¥–µ–Ω 60 —Å–µ–∫—É–Ω–¥
                    self.stats["snapshots_cached"] += 1
                    return cached_snapshot
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–Ω–∏–º–æ–∫
            snapshot = await self._create_snapshot(symbol)
            
            if snapshot:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self.last_snapshots[symbol] = snapshot
                self.stats["snapshots_created"] += 1
                
                logger.debug(f"üì∏ Snapshot —Å–æ–∑–¥–∞–Ω –¥–ª—è {symbol}: ${snapshot.current_price:.2f}")
            
            return snapshot
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è snapshot –¥–ª—è {symbol}: {e}")
            self.stats["errors"] += 1
            return None
    
    async def _create_snapshot(self, symbol: str) -> Optional[MarketDataSnapshot]:
        """
        –°–æ–∑–¥–∞—Ç—å MarketDataSnapshot –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        
        ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û v1.0.3: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∞–º—ã–º —Å–≤–µ–∂–∏–º –¥–∞–Ω–Ω—ã–º (M1 ‚Üí M5 ‚Üí H1 ‚Üí D1)
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            
        Returns:
            MarketDataSnapshot —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            context = await self.ta_context_manager.get_context(symbol)
            
            # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ë–µ—Ä–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é —Å–≤–µ—á—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É)
            latest_candle = None
            candle_interval = None
            
            # 1Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º M1 (–°–ê–ú–´–ï –°–í–ï–ñ–ò–ï - –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É!)
            if context.recent_candles_m1 and len(context.recent_candles_m1) > 0:
                latest_candle = context.recent_candles_m1[-1]
                candle_interval = "1m"
                logger.debug(f"‚úÖ {symbol}: –ò—Å–ø–æ–ª—å–∑—É–µ–º M1 —Å–≤–µ—á—É (—Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ)")
            
            # 2Ô∏è‚É£ –ï—Å–ª–∏ –Ω–µ—Ç M1 - –ø—Ä–æ–±—É–µ–º M5
            elif context.recent_candles_m5 and len(context.recent_candles_m5) > 0:
                latest_candle = context.recent_candles_m5[-1]
                candle_interval = "5m"
                logger.debug(f"‚ö†Ô∏è {symbol}: M1 –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º M5 —Å–≤–µ—á—É")
            
            # 3Ô∏è‚É£ –ï—Å–ª–∏ –Ω–µ—Ç M5 - –ø—Ä–æ–±—É–µ–º H1
            elif context.recent_candles_h1 and len(context.recent_candles_h1) > 0:
                latest_candle = context.recent_candles_h1[-1]
                candle_interval = "1h"
                logger.warning(f"‚ö†Ô∏è {symbol}: M1 –∏ M5 –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º H1 —Å–≤–µ—á—É (–°–¢–ê–†–´–ï –î–ê–ù–ù–´–ï!)")
            
            # 4Ô∏è‚É£ –ï—Å–ª–∏ –Ω–µ—Ç H1 - –ø—Ä–æ–±—É–µ–º D1
            elif context.recent_candles_d1 and len(context.recent_candles_d1) > 0:
                latest_candle = context.recent_candles_d1[-1]
                candle_interval = "1d"
                logger.error(f"‚ùå {symbol}: –¢–æ–ª—å–∫–æ D1 —Å–≤–µ—á–∏ - –û–ß–ï–ù–¨ –°–¢–ê–†–´–ï –î–ê–ù–ù–´–ï!")
            
            # –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –æ—à–∏–±–∫–∞
            if not latest_candle:
                logger.error(f"‚ùå {symbol}: –ù–µ—Ç —Å–≤–µ—á–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è snapshot")
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = float(latest_candle['close_price'])
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            candle_time = latest_candle.get('open_time', 'unknown')
            logger.info(f"üìä {symbol}: ${current_price:,.2f} (–∏–∑ {candle_interval} —Å–≤–µ—á–∏, –≤—Ä–µ–º—è: {candle_time})")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            price_changes = self._calculate_price_changes(context, current_price)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º 24—á –∏–∑ D1 —Å–≤–µ—á–µ–π
            volume_24h = self._calculate_volume_24h(context)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º high/low 24h –∏–∑ D1 —Å–≤–µ—á–µ–π
            high_24h, low_24h = self._calculate_high_low_24h(context, current_price)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            data_quality_obj = self._assess_data_quality(context)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DataQuality –≤ —Å–ª–æ–≤–∞—Ä—å
            data_quality_dict = self._data_quality_to_dict(data_quality_obj)
            
            # –°–æ–∑–¥–∞–µ–º snapshot —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            snapshot = MarketDataSnapshot(
                symbol=symbol,
                timestamp=datetime.now(),
                
                # –¶–µ–Ω–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                current_price=current_price,
                price_change_1m=price_changes.get("1m", 0.0),
                price_change_5m=price_changes.get("5m", 0.0),
                price_change_24h=price_changes.get("24h", 0.0),
                
                # –û–±—ä–µ–º –∏ –¥–∏–∞–ø–∞–∑–æ–Ω
                volume_24h=volume_24h,
                high_24h=high_24h,
                low_24h=low_24h,
                
                # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö - —Å—Ç–∞–≤–∏–º 0)
                bid_price=0.0,
                ask_price=0.0,
                spread=0.0,
                open_interest=0.0,
                
                # –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
                data_quality=data_quality_dict,
                
                # –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
                data_source=DataSourceType.REST_API,
                
                # –§–ª–∞–≥–∏ –¥–∞–Ω–Ω—ã—Ö
                has_realtime_data=False,
                has_historical_data=True
            )
            
            return snapshot
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è snapshot: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return None
    
    def _calculate_price_changes(self, context, current_price: float) -> Dict[str, float]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        
        Args:
            context: TechnicalAnalysisContext
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ {–ø–µ—Ä–∏–æ–¥: –∏–∑–º–µ–Ω–µ–Ω–∏–µ_%}
        """
        changes = {}
        
        try:
            # 1 –º–∏–Ω—É—Ç–∞ (–∏–∑ M1 —Å–≤–µ—á–µ–π - –µ—Å–ª–∏ –µ—Å—Ç—å)
            if hasattr(context, 'recent_candles_m1') and len(context.recent_candles_m1) >= 2:
                price_1m_ago = float(context.recent_candles_m1[-2]['close_price'])
                changes["1m"] = ((current_price - price_1m_ago) / price_1m_ago * 100)
            # Fallback –Ω–∞ M5
            elif len(context.recent_candles_m5) >= 1:
                price_1m_ago = float(context.recent_candles_m5[-1]['open_price'])
                changes["1m"] = ((current_price - price_1m_ago) / price_1m_ago * 100)
            
            # 5 –º–∏–Ω—É—Ç (–∏–∑ M5 —Å–≤–µ—á–µ–π)
            if len(context.recent_candles_m5) >= 2:
                price_5m_ago = float(context.recent_candles_m5[-2]['open_price'])
                changes["5m"] = ((current_price - price_5m_ago) / price_5m_ago * 100)
            
            # 24 —á–∞—Å–∞ (–∏–∑ D1 —Å–≤–µ—á–µ–π)
            if len(context.recent_candles_d1) >= 2:
                price_24h_ago = float(context.recent_candles_d1[-2]['close_price'])
                changes["24h"] = ((current_price - price_24h_ago) / price_24h_ago * 100)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã: {e}")
        
        return changes
    
    def _calculate_volume_24h(self, context) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—ä–µ–º –∑–∞ 24 —á–∞—Å–∞
        
        Args:
            context: TechnicalAnalysisContext
            
        Returns:
            –û–±—ä–µ–º –∑–∞ 24—á
        """
        try:
            # –°—É–º–º–∏—Ä—É–µ–º –æ–±—ä–µ–º –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 H1 —Å–≤–µ—á–µ–π
            if len(context.recent_candles_h1) >= 24:
                volume_24h = sum(
                    float(candle['volume']) 
                    for candle in context.recent_candles_h1[-24:]
                )
                return volume_24h
            
            # –ï—Å–ª–∏ –Ω–µ—Ç 24 H1 —Å–≤–µ—á–µ–π - –±–µ—Ä–µ–º –∏–∑ D1
            if context.recent_candles_d1:
                return float(context.recent_candles_d1[-1]['volume'])
            
            return 0.0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–∞: {e}")
            return 0.0
    
    def _calculate_high_low_24h(self, context, current_price: float) -> tuple[float, float]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞–∫—Å–∏–º—É–º –∏ –º–∏–Ω–∏–º—É–º –∑–∞ 24 —á–∞—Å–∞
        
        Args:
            context: TechnicalAnalysisContext
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            Tuple[high_24h, low_24h]
        """
        try:
            # –ü—Ä–æ–±—É–µ–º –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 H1 —Å–≤–µ—á–µ–π
            if len(context.recent_candles_h1) >= 24:
                recent_24h = context.recent_candles_h1[-24:]
                high_24h = max(float(candle['high_price']) for candle in recent_24h)
                low_24h = min(float(candle['low_price']) for candle in recent_24h)
                return high_24h, low_24h
            
            # –ï—Å–ª–∏ –Ω–µ—Ç 24 H1 —Å–≤–µ—á–µ–π - –±–µ—Ä–µ–º –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π D1 —Å–≤–µ—á–∏
            if context.recent_candles_d1:
                last_d1 = context.recent_candles_d1[-1]
                high_24h = float(last_d1['high_price'])
                low_24h = float(last_d1['low_price'])
                return high_24h, low_24h
            
            # –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            return current_price, current_price
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ high/low: {e}")
            return current_price, current_price
    
    def _assess_data_quality(self, context) -> DataQuality:
        """
        –û—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            context: TechnicalAnalysisContext
            
        Returns:
            DataQuality –æ–±—ä–µ–∫—Ç
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            has_m1 = hasattr(context, 'recent_candles_m1') and len(context.recent_candles_m1) >= 10
            has_m5 = len(context.recent_candles_m5) >= 10
            has_h1 = len(context.recent_candles_h1) >= 10
            has_d1 = len(context.recent_candles_d1) >= 5
            
            has_levels = len(context.levels_d1) > 0
            has_atr = context.atr_data is not None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            data_fresh = True
            if context.candles_updated_at:
                age = (datetime.now() - context.candles_updated_at.replace(tzinfo=None)).total_seconds()
                data_fresh = age < 120  # –î–∞–Ω–Ω—ã–µ –Ω–µ —Å—Ç–∞—Ä—à–µ 2 –º–∏–Ω—É—Ç
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º overall –∫–∞—á–µ—Å—Ç–≤–æ
            quality_score = 0
            if has_m1: quality_score += 25  # M1 —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ!
            if has_m5: quality_score += 20
            if has_h1: quality_score += 15
            if has_d1: quality_score += 10
            if has_levels: quality_score += 15
            if has_atr: quality_score += 10
            if data_fresh: quality_score += 5
            
            if quality_score >= 90:
                overall = "excellent"
            elif quality_score >= 70:
                overall = "good"
            elif quality_score >= 50:
                overall = "fair"
            else:
                overall = "poor"
            
            return DataQuality(
                bybit_rest_api=data_fresh,
                bybit_websocket=False,  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º WebSocket
                yfinance_websocket=False,
                overall_quality=overall,
                data_completeness=quality_score / 100.0,
                last_update=datetime.now()
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return DataQuality(
                bybit_rest_api=False,
                bybit_websocket=False,
                yfinance_websocket=False,
                overall_quality="poor",
                data_completeness=0.0,
                last_update=datetime.now()
            )
    
    def _data_quality_to_dict(self, data_quality: DataQuality) -> Dict[str, Any]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å DataQuality –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
        
        Args:
            data_quality: DataQuality –æ–±—ä–µ–∫—Ç
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞—á–µ—Å—Ç–≤–µ
        """
        return {
            "bybit_rest_api": data_quality.bybit_rest_api,
            "bybit_websocket": data_quality.bybit_websocket,
            "yfinance_websocket": data_quality.yfinance_websocket,
            "overall_quality": data_quality.overall_quality,
            "data_completeness": data_quality.data_completeness,
            "last_update": data_quality.last_update.isoformat() if data_quality.last_update else None
        }
    
    # ==================== –ü–û–î–ü–ò–°–ö–ò –ù–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø ====================
    
    def add_data_subscriber(self, callback: Callable):
        """
        –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç MarketDataSnapshot)
        """
        self.data_subscribers.add(callback)
        logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ({len(self.data_subscribers)} –≤—Å–µ–≥–æ)")
    
    def remove_data_subscriber(self, callback: Callable):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        self.data_subscribers.discard(callback)
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫ ({len(self.data_subscribers)} –æ—Å—Ç–∞–ª–æ—Å—å)")
    
    async def _notify_subscribers(self, snapshot: MarketDataSnapshot):
        """
        –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            snapshot: MarketDataSnapshot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            if not self.data_subscribers:
                return
            
            for subscriber in self.data_subscribers.copy():
                try:
                    if asyncio.iscoroutinefunction(subscriber):
                        await subscriber(snapshot)
                    else:
                        subscriber(snapshot)
                    
                    self.stats["updates_sent"] += 1
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ _notify_subscribers: {e}")
    
    # ==================== –§–û–ù–û–í–´–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø ====================
    
    async def start_updates(self, update_interval: float = 60.0):
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            update_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60—Å)
        """
        if self.is_running:
            logger.warning("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã")
            return
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {update_interval}—Å)")
        
        self.is_running = True
        self._update_task = asyncio.create_task(
            self._update_loop(update_interval)
        )
        
        logger.info("‚úÖ –§–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã")
    
    async def stop_updates(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if not self.is_running:
            logger.warning("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return
        
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        self.is_running = False
        
        if self._update_task and not self._update_task.done():
            self._update_task.cancel()
            try:
                await self._update_task
            except asyncio.CancelledError:
                pass
        
        logger.info("‚úÖ –§–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    async def _update_loop(self, interval: float):
        """
        –¶–∏–∫–ª —Ñ–æ–Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        
        Args:
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö")
        
        while self.is_running:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
                for symbol in self.all_symbols:
                    try:
                        # –°–æ–∑–¥–∞–µ–º snapshot
                        snapshot = await self.get_market_snapshot(symbol)
                        
                        if snapshot:
                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                            await self._notify_subscribers(snapshot)
                            
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {symbol}: {e}")
                
                self.stats["last_update_time"] = datetime.now()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                await asyncio.sleep(interval)
                
            except asyncio.CancelledError:
                logger.info("üõë –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
                import traceback
                logger.error(traceback.format_exc())
                await asyncio.sleep(interval)
        
        logger.info("üõë –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–∞–ø—Ç–µ—Ä–∞"""
        uptime = (datetime.now() - self.stats["start_time"]).total_seconds()
        
        return {
            **self.stats,
            "uptime_seconds": uptime,
            "uptime_formatted": str(timedelta(seconds=int(uptime))),
            "is_running": self.is_running,
            "subscribers_count": len(self.data_subscribers),
            "crypto_symbols": len(self.crypto_symbols),
            "futures_symbols": len(self.futures_symbols),
            "total_symbols": len(self.all_symbols),
            "cached_snapshots": len(self.last_snapshots),
            "snapshots_per_minute": round(
                self.stats["snapshots_created"] / (uptime / 60), 2
            ) if uptime > 0 else 0
        }
    
    def get_health_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∞–¥–∞–ø—Ç–µ—Ä–∞"""
        stats = self.get_stats()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        has_data = len(self.last_snapshots) > 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        last_update_recent = False
        if self.stats["last_update_time"]:
            age = (datetime.now() - self.stats["last_update_time"]).total_seconds()
            last_update_recent = age < 120  # < 2 –º–∏–Ω—É—Ç
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫
        error_rate = (self.stats["errors"] / max(self.stats["snapshots_created"], 1)) * 100
        low_error_rate = error_rate < 10  # –ú–µ–Ω–µ–µ 10% –æ—à–∏–±–æ–∫
        
        is_healthy = (
            has_data and
            (last_update_recent or stats["snapshots_created"] == 0) and
            low_error_rate and
            len(self.all_symbols) > 0
        )
        
        return {
            "healthy": is_healthy,
            "is_running": self.is_running,
            "has_data": has_data,
            "last_update_recent": last_update_recent,
            "error_rate": round(error_rate, 2),
            "symbols_available": len(self.all_symbols),
            "subscribers": len(self.data_subscribers),
            "uptime_seconds": stats["uptime_seconds"]
        }
    
    def __str__(self):
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
        return (f"DataSourceAdapter(symbols={len(self.all_symbols)}, "
                f"crypto={len(self.crypto_symbols)}, "
                f"futures={len(self.futures_symbols)}, "
                f"running={self.is_running}, "
                f"subscribers={len(self.data_subscribers)})")
    
    def __repr__(self):
        """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
        return (f"DataSourceAdapter(crypto_symbols={len(self.crypto_symbols)}, "
                f"futures_symbols={len(self.futures_symbols)}, "
                f"snapshots_created={self.stats['snapshots_created']}, "
                f"is_running={self.is_running})")


# Export
__all__ = ["DataSourceAdapter"]

logger.info("‚úÖ Data Source Adapter module loaded (v1.0.3 - Fresh data priority)")
