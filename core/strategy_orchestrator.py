"""
Simplified Strategy Orchestrator v2.0

–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –±–µ–∑ MarketDataSnapshot –∏ DataSourceAdapter.
–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–ø—Ä—è–º—É—é —Å Repository –∏ —Å–∞–º–∏ –ø–æ–ª—É—á–∞—é—Ç –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

–ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
- ‚ùå –£–±—Ä–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç MarketDataSnapshot
- ‚ùå –£–±—Ä–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç DataSourceAdapter
- ‚ùå –£–±—Ä–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç MarketDataManager
- ‚úÖ –ü—Ä—è–º–∞—è —Ä–∞–±–æ—Ç–∞ —Å Repository
- ‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ (–∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥)
- ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∞–º–∏ –ø–æ–ª—É—á–∞—é—Ç –¥–∞–Ω–Ω—ã–µ
- ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

Author: Trading Bot Team
Version: 2.0.0 - Simplified Architecture
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Set, Callable
from enum import Enum
from dataclasses import dataclass, field
from collections import defaultdict, deque
import traceback

from strategies import BaseStrategy, TradingSignal, MomentumStrategy, get_available_strategies, create_strategy
from .signal_manager import SignalManager
from .data_models import SystemConfig, StrategyConfig

logger = logging.getLogger(__name__)


# ==================== ENUMS ====================

class OrchestratorStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    STOPPED = "stopped"
    STARTING = "starting"
    RUNNING = "running"
    STOPPING = "stopping"
    ERROR = "error"
    DEGRADED = "degraded"  # –†–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã


class StrategyStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    INACTIVE = "inactive"
    INITIALIZING = "initializing"
    ACTIVE = "active"
    PAUSED = "paused"
    ERROR = "error"
    STOPPED = "stopped"


# ==================== STRATEGY INSTANCE ====================

@dataclass
class StrategyInstance:
    """
    –≠–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    
    –°–æ–¥–µ—Ä–∂–∏—Ç —Å–∞–º—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—ë —Ä–∞–±–æ—Ç—ã
    """
    strategy: BaseStrategy
    config: StrategyConfig
    status: StrategyStatus = StrategyStatus.INACTIVE
    created_at: datetime = field(default_factory=datetime.now)
    last_analysis_at: Optional[datetime] = None
    last_signal_at: Optional[datetime] = None
    error_count: int = 0
    total_analyses: int = 0
    successful_analyses: int = 0
    signals_generated: int = 0
    average_analysis_time: float = 0.0
    last_error: Optional[str] = None
    
    def __post_init__(self):
        """–ü–æ—Å—Ç-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        self.strategy_name = self.strategy.name
    
    @property
    def success_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤"""
        if self.total_analyses == 0:
            return 100.0
        return (self.successful_analyses / self.total_analyses) * 100
    
    @property
    def uptime(self) -> timedelta:
        """–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return datetime.now() - self.created_at
    
    def update_analysis_stats(self, success: bool, analysis_time: float):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω–∞–ª–∏–∑–æ–≤"""
        self.total_analyses += 1
        self.last_analysis_at = datetime.now()
        
        if success:
            self.successful_analyses += 1
        else:
            self.error_count += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–Ω–∞–ª–∏–∑–∞
        if self.total_analyses == 1:
            self.average_analysis_time = analysis_time
        else:
            self.average_analysis_time = (
                (self.average_analysis_time * (self.total_analyses - 1) + analysis_time) 
                / self.total_analyses
            )
    
    def record_signal(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–∞"""
        self.signals_generated += 1
        self.last_signal_at = datetime.now()
    
    def record_error(self, error_message: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É"""
        self.error_count += 1
        self.last_error = error_message
        self.status = StrategyStatus.ERROR
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {self.strategy_name}: {error_message}")
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "strategy_name": self.strategy_name,
            "status": self.status.value,
            "created_at": self.created_at.isoformat(),
            "last_analysis_at": self.last_analysis_at.isoformat() if self.last_analysis_at else None,
            "last_signal_at": self.last_signal_at.isoformat() if self.last_signal_at else None,
            "uptime_seconds": self.uptime.total_seconds(),
            "error_count": self.error_count,
            "total_analyses": self.total_analyses,
            "successful_analyses": self.successful_analyses,
            "signals_generated": self.signals_generated,
            "success_rate": self.success_rate,
            "average_analysis_time": self.average_analysis_time,
            "last_error": self.last_error
        }


# ==================== STRATEGY ORCHESTRATOR ====================

class StrategyOrchestrator:
    """
    üöÄ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π v2.0
    
    –ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
    - ‚ùå –ù–µ—Ç MarketDataSnapshot
    - ‚ùå –ù–µ—Ç DataSourceAdapter
    - ‚ùå –ù–µ—Ç MarketDataManager
    - ‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª: –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –≤—ã–∑—ã–≤–∞–µ–º analyze() —É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    - ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∞–º–∏ –ø–æ–ª—É—á–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î —á–µ—Ä–µ–∑ repository
    
    –ß—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å:
    - ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    - ‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ SignalManager
    - ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - ‚úÖ Error recovery
    - ‚úÖ Health monitoring
    
    Usage:
        ```python
        orchestrator = StrategyOrchestrator(
            signal_manager=signal_manager,
            repository=repository,
            ta_context_manager=ta_context_manager,  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            system_config=system_config,
            analysis_interval=60.0  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        )
        
        await orchestrator.start()
        ```
    """
    
    def __init__(
        self,
        signal_manager: SignalManager,
        repository,  # MarketDataRepository
        ta_context_manager=None,  # TechnicalAnalysisContextManager (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        system_config: Optional[SystemConfig] = None,
        analysis_interval: float = 60.0,  # –°–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏
        max_concurrent_analyses: int = 5,
        enable_performance_monitoring: bool = True
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            signal_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
            repository: MarketDataRepository –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
            ta_context_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            system_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
            analysis_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60—Å)
            max_concurrent_analyses: –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
            enable_performance_monitoring: –í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        self.signal_manager = signal_manager
        self.repository = repository
        self.ta_context_manager = ta_context_manager
        self.system_config = system_config
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç—ã
        self.analysis_interval = analysis_interval
        self.max_concurrent_analyses = max_concurrent_analyses
        self.enable_performance_monitoring = enable_performance_monitoring
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.status = OrchestratorStatus.STOPPED
        self.strategy_instances: Dict[str, StrategyInstance] = {}
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
        self.is_running = False
        self.shutdown_event = asyncio.Event()
        
        # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        self.background_tasks: List[asyncio.Task] = []
        self.analysis_task: Optional[asyncio.Task] = None
        
        # –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
        self.analysis_semaphore = asyncio.Semaphore(max_concurrent_analyses)
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_analyses": 0,
            "successful_analyses": 0,
            "failed_analyses": 0,
            "signals_generated": 0,
            "signals_sent": 0,
            "start_time": None,
            "last_analysis_time": None,
            "strategies_loaded": 0,
            "strategies_active": 0,
            "strategies_failed": 0,
            "analysis_cycles": 0,
            "average_cycle_time": 0.0
        }
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ü–∏–∫–ª–æ–≤)
        self.performance_history: deque = deque(maxlen=100)
        
        # Callback'–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π
        self.event_callbacks: Dict[str, List[Callable]] = defaultdict(list)
        
        logger.info(f"üé≠ StrategyOrchestrator v2.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞: {analysis_interval}—Å")
        logger.info(f"   ‚Ä¢ –ú–∞–∫—Å. –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {max_concurrent_analyses}")
        logger.info(f"   ‚Ä¢ Repository: {'‚úì' if repository else '‚úó'}")
        logger.info(f"   ‚Ä¢ TechnicalAnalysis: {'‚úì' if ta_context_manager else '‚úó'}")
    
    # ==================== LIFECYCLE MANAGEMENT ====================
    
    async def start(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        Returns:
            True –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω
        """
        try:
            if self.status != OrchestratorStatus.STOPPED:
                logger.warning(f"‚ö†Ô∏è –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω (—Å—Ç–∞—Ç—É—Å: {self.status.value})")
                return False
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ StrategyOrchestrator v2.0...")
            self.status = OrchestratorStatus.STARTING
            self.is_running = True
            self.stats["start_time"] = datetime.now()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await self._load_strategies()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            await self._start_background_tasks()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞
            self.analysis_task = asyncio.create_task(self._analysis_loop())
            
            self.status = OrchestratorStatus.RUNNING
            logger.info("‚úÖ StrategyOrchestrator –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(self.strategy_instances)}")
            logger.info(f"‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {self._count_active_strategies()}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–ø—É—Å–∫–µ
            await self._emit_event("orchestrator_started", {"strategies_count": len(self.strategy_instances)})
            
            return True
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ StrategyOrchestrator: {e}")
            logger.error(f"Stack trace: {traceback.format_exc()}")
            self.status = OrchestratorStatus.ERROR
            await self.stop()
            return False
    
    async def stop(self):
        """Graceful shutdown –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ StrategyOrchestrator...")
            self.status = OrchestratorStatus.STOPPING
            self.is_running = False
            self.shutdown_event.set()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞
            if self.analysis_task and not self.analysis_task.done():
                self.analysis_task.cancel()
                try:
                    await self.analysis_task
                except asyncio.CancelledError:
                    pass
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            if self.background_tasks:
                logger.info(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {len(self.background_tasks)} —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
                for task in self.background_tasks:
                    if not task.done():
                        task.cancel()
                
                await asyncio.gather(*self.background_tasks, return_exceptions=True)
                logger.info("‚úÖ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            for strategy_instance in self.strategy_instances.values():
                strategy_instance.status = StrategyStatus.STOPPED
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            await self._log_final_statistics()
            
            self.status = OrchestratorStatus.STOPPED
            logger.info("üõë StrategyOrchestrator –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            await self._emit_event("orchestrator_stopped", self.get_stats())
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ StrategyOrchestrator: {e}")
            self.status = OrchestratorStatus.ERROR
    
    # ==================== STRATEGY MANAGEMENT ====================
    
    async def _load_strategies(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            strategies_loaded = 0
            strategies_failed = 0
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é MomentumStrategy
            if not self.system_config or not self.system_config.strategy_configs:
                logger.info("üìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—é –±–∞–∑–æ–≤—É—é MomentumStrategy")
                await self._create_default_strategies()
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            for name, config in self.system_config.strategy_configs.items():
                try:
                    if not config.enabled:
                        logger.info(f"‚è∏Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {name} –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                        continue
                    
                    logger.info(f"üì• –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: {name}")
                    strategy_instance = await self._create_strategy_instance(config)
                    
                    if strategy_instance:
                        self.strategy_instances[name] = strategy_instance
                        strategies_loaded += 1
                        logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                    else:
                        strategies_failed += 1
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é {name}")
                        
                except Exception as e:
                    strategies_failed += 1
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {name}: {e}")
            
            self.stats["strategies_loaded"] = strategies_loaded
            self.stats["strategies_failed"] = strategies_failed
            
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏: ‚úÖ{strategies_loaded} —É—Å–ø–µ—à–Ω–æ, ‚ùå{strategies_failed} –æ—à–∏–±–æ–∫")
            
            if strategies_loaded == 0:
                logger.warning("‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Å–æ–∑–¥–∞—é –±–∞–∑–æ–≤—É—é")
                await self._create_default_strategies()
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            raise
    
    async def _create_default_strategies(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é MomentumStrategy
            momentum_config = StrategyConfig(
                name="MomentumStrategy",
                description="–ë–∞–∑–æ–≤–∞—è –∏–º–ø—É–ª—å—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
                strategy_params={
                    "extreme_movement_threshold": 2.0,
                    "impulse_1m_threshold": 1.5,
                    "impulse_5m_threshold": 2.0,
                    "high_volume_threshold": 20000,
                    "enable_volume_analysis": True
                }
            )
            
            strategy_instance = await self._create_strategy_instance(momentum_config)
            if strategy_instance:
                self.strategy_instances["MomentumStrategy"] = strategy_instance
                self.stats["strategies_loaded"] = 1
                logger.info("‚úÖ –ë–∞–∑–æ–≤–∞—è MomentumStrategy —Å–æ–∑–¥–∞–Ω–∞")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            raise
    
    async def _create_strategy_instance(self, config: StrategyConfig) -> Optional[StrategyInstance]:
        """
        –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Returns:
            StrategyInstance –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_type = config.name.lower().replace("strategy", "")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é (—Ç–µ–ø–µ—Ä—å —Å repository –∏ ta_context_manager)
            if strategy_type == "momentum":
                strategy = MomentumStrategy(
                    name=config.name,
                    symbol=config.symbol,
                    repository=self.repository,  # ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º repository
                    ta_context_manager=self.ta_context_manager,  # ‚úÖ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                    min_signal_strength=config.min_signal_strength,
                    signal_cooldown_minutes=config.signal_cooldown_minutes,
                    max_signals_per_hour=config.max_signals_per_hour,
                    **config.strategy_params
                )
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                try:
                    strategy = create_strategy(
                        strategy_type,
                        repository=self.repository,
                        ta_context_manager=self.ta_context_manager,
                        **config.strategy_params
                    )
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy_type}, –æ—à–∏–±–∫–∞: {e}")
                    return None
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            strategy_instance = StrategyInstance(
                strategy=strategy,
                config=config,
                status=StrategyStatus.INITIALIZING
            )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ª–∞–¥–∫–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω debug mode
            if self.system_config and self.system_config.debug_mode:
                strategy.enable_debug_mode(True)
            
            strategy_instance.status = StrategyStatus.ACTIVE
            return strategy_instance
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {config.name}: {e}")
            logger.error(traceback.format_exc())
            return None
    
    # ==================== ANALYSIS LOOP ====================
    
    async def _analysis_loop(self):
        """
        üîÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        
        –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞:
        1. –ö–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥ (analysis_interval)
        2. –ó–∞–ø—É—Å–∫–∞–µ–º analyze() —É –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        3. –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∞–º–∏ –ø–æ–ª—É—á–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤ SignalManager
        """
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π v2.0)")
        logger.info(f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.analysis_interval}—Å")
        logger.info(f"   ‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∞–º–∏ –ø–æ–ª—É—á–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î")
        
        while self.is_running and not self.shutdown_event.is_set():
            try:
                cycle_start_time = datetime.now()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                await self._analyze_all_strategies()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ü–∏–∫–ª–∞
                cycle_end_time = datetime.now()
                cycle_duration = (cycle_end_time - cycle_start_time).total_seconds()
                
                self.stats["analysis_cycles"] += 1
                self.stats["last_analysis_time"] = cycle_end_time
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º–µ–Ω–∏ —Ü–∏–∫–ª–∞
                if self.stats["analysis_cycles"] == 1:
                    self.stats["average_cycle_time"] = cycle_duration
                else:
                    prev_avg = self.stats["average_cycle_time"]
                    cycles_count = self.stats["analysis_cycles"]
                    self.stats["average_cycle_time"] = (prev_avg * (cycles_count - 1) + cycle_duration) / cycles_count
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if self.enable_performance_monitoring:
                    self.performance_history.append({
                        "timestamp": cycle_end_time,
                        "cycle_duration": cycle_duration,
                        "strategies_analyzed": self._count_active_strategies()
                    })
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                await asyncio.sleep(self.analysis_interval)
                
            except asyncio.CancelledError:
                logger.info("üîÑ –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                logger.error(f"Stack trace: {traceback.format_exc()}")
                self.stats["failed_analyses"] += 1
                
                # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö - –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º
                await asyncio.sleep(5)
        
        logger.info("üõë –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _analyze_all_strategies(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        
        –ö–∞–∂–¥–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–º–∞ –≤—ã–∑—ã–≤–∞–µ—Ç repository.get_recent_candles()
        """
        try:
            active_strategies = [
                instance for instance in self.strategy_instances.values()
                if instance.status == StrategyStatus.ACTIVE
            ]
            
            if not active_strategies:
                return
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            analysis_tasks = [
                asyncio.create_task(self._analyze_single_strategy(instance))
                for instance in active_strategies
            ]
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
            results = await asyncio.gather(*analysis_tasks, return_exceptions=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful_analyses = 0
            signals_generated = 0
            
            for i, result in enumerate(results):
                strategy_name = active_strategies[i].strategy_name
                
                if isinstance(result, Exception):
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {strategy_name}: {result}")
                    active_strategies[i].record_error(str(result))
                    self.stats["failed_analyses"] += 1
                elif result:  # –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
                    successful_analyses += 1
                    signals_generated += 1
                    active_strategies[i].record_signal()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ SignalManager
                    await self.signal_manager.submit_signal(result)
                else:  # –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω, –Ω–æ —Å–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
                    successful_analyses += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats["successful_analyses"] += successful_analyses
            self.stats["signals_generated"] += signals_generated
            
            if signals_generated > 0:
                logger.info(f"üìä –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞: ‚úÖ{successful_analyses} —É—Å–ø–µ—à–Ω–æ, üö®{signals_generated} —Å–∏–≥–Ω–∞–ª–æ–≤")
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _analyze_all_strategies: {e}")
            self.stats["failed_analyses"] += 1
    
    async def _analyze_single_strategy(self, strategy_instance: StrategyInstance) -> Optional[TradingSignal]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
        
        Args:
            strategy_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Returns:
            TradingSignal –µ—Å–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, None –µ—Å–ª–∏ –Ω–µ—Ç
        """
        analysis_start_time = datetime.now()
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
            async with self.analysis_semaphore:
                # –í—ã–∑—ã–≤–∞–µ–º run_analysis() - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–º–∞ –ø–æ–ª—É—á–∏—Ç –¥–∞–Ω–Ω—ã–µ
                signal = await strategy_instance.strategy.run_analysis()
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
                analysis_duration = (datetime.now() - analysis_start_time).total_seconds()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                strategy_instance.update_analysis_stats(True, analysis_duration)
                
                return signal
                
        except Exception as e:
            analysis_duration = (datetime.now() - analysis_start_time).total_seconds()
            strategy_instance.update_analysis_stats(False, analysis_duration)
            strategy_instance.record_error(str(e))
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_instance.strategy_name}: {e}")
            raise
    
    # ==================== BACKGROUND TASKS ====================
    
    async def _start_background_tasks(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏"""
        try:
            # –ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if self.enable_performance_monitoring:
                performance_task = asyncio.create_task(self._performance_monitoring_task())
                self.background_tasks.append(performance_task)
                logger.info("üìä –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            
            # –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            health_task = asyncio.create_task(self._health_monitoring_task())
            self.background_tasks.append(health_task)
            logger.info("üè• –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
            
            # –ó–∞–¥–∞—á–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_task = asyncio.create_task(self._statistics_task())
            self.background_tasks.append(stats_task)
            logger.info("üìà –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            
            logger.info(f"üîÑ –ó–∞–ø—É—â–µ–Ω–æ {len(self.background_tasks)} —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {e}")
    
    async def _performance_monitoring_task(self):
        """–ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        while self.is_running and not self.shutdown_event.is_set():
            try:
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                performance_report = self._analyze_performance()
                
                if performance_report:
                    logger.info(f"üìä –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {performance_report}")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    if performance_report.get("slow_strategies"):
                        await self._emit_event("performance_degradation", performance_report)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
                await asyncio.sleep(60)
    
    async def _health_monitoring_task(self):
        """–ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        while self.is_running and not self.shutdown_event.is_set():
            try:
                await asyncio.sleep(120)  # –ö–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                health_issues = []
                
                for name, instance in self.strategy_instances.items():
                    issue = self._check_strategy_health(instance)
                    if issue:
                        health_issues.append((name, issue))
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã
                for strategy_name, issue in health_issues:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π {strategy_name}: {issue}")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                    if issue == "too_many_errors":
                        await self._attempt_strategy_recovery(strategy_name)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                self._update_orchestrator_status()
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
                await asyncio.sleep(60)
    
    async def _statistics_task(self):
        """–ó–∞–¥–∞—á–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        while self.is_running and not self.shutdown_event.is_set():
            try:
                await asyncio.sleep(1800)  # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = self.get_stats()
                logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
                logger.info(f"   ‚Ä¢ –¶–∏–∫–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {stats['analysis_cycles']}")
                logger.info(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {stats['successful_analyses']}")
                logger.info(f"   ‚Ä¢ –°–∏–≥–Ω–∞–ª–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['signals_generated']}")
                logger.info(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {stats['strategies_active']}")
                logger.info(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞: {stats['average_cycle_time']:.3f}—Å")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
                for name, instance in self.strategy_instances.items():
                    logger.info(f"   üìä {name}: –∞–Ω–∞–ª–∏–∑–æ–≤={instance.total_analyses}, "
                              f"—Å–∏–≥–Ω–∞–ª–æ–≤={instance.signals_generated}, "
                              f"—É—Å–ø–µ—à–Ω–æ—Å—Ç—å={instance.success_rate:.1f}%")
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                await asyncio.sleep(300)
    
    # ==================== HELPER METHODS ====================
    
    def _analyze_performance(self) -> Optional[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            if not self.performance_history:
                return None
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–∑–∞ —á–∞—Å)
            recent_records = list(self.performance_history)[-20:]
            
            if len(recent_records) < 5:
                return None
            
            # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            avg_cycle_time = sum(r["cycle_duration"] for r in recent_records) / len(recent_records)
            max_cycle_time = max(r["cycle_duration"] for r in recent_records)
            
            # –ò—â–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            slow_strategies = []
            for name, instance in self.strategy_instances.items():
                if instance.average_analysis_time > 5.0:  # –ë–æ–ª–µ–µ 5 —Å–µ–∫—É–Ω–¥
                    slow_strategies.append({
                        "name": name,
                        "avg_time": instance.average_analysis_time,
                        "error_rate": (instance.error_count / max(instance.total_analyses, 1)) * 100
                    })
            
            return {
                "avg_cycle_time": round(avg_cycle_time, 3),
                "max_cycle_time": round(max_cycle_time, 3),
                "slow_strategies": slow_strategies,
                "records_analyzed": len(recent_records)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return None
    
    def _check_strategy_health(self, instance: StrategyInstance) -> Optional[str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ None –µ—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫
            if instance.total_analyses > 10:
                error_rate = instance.error_count / instance.total_analyses
                if error_rate > 0.5:  # –ë–æ–ª–µ–µ 50% –æ—à–∏–±–æ–∫
                    return "too_many_errors"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ª–≥–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if instance.last_analysis_at:
                time_since_analysis = datetime.now() - instance.last_analysis_at
                if time_since_analysis > timedelta(minutes=10):
                    return "inactive_too_long"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if instance.average_analysis_time > 10.0:  # –ë–æ–ª–µ–µ 10 —Å–µ–∫—É–Ω–¥
                return "analysis_too_slow"
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return "health_check_error"
    
    async def _attempt_strategy_recovery(self, strategy_name: str):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"""
        try:
            if strategy_name not in self.strategy_instances:
                return
            
            instance = self.strategy_instances[strategy_name]
            
            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
            instance.error_count = 0
            instance.last_error = None
            instance.status = StrategyStatus.ACTIVE
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
            if hasattr(instance.strategy, 'reset_stats'):
                instance.strategy.reset_stats()
            
            logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            await self._emit_event("strategy_recovered", {"strategy": strategy_name})
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {e}")
    
    def _update_orchestrator_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            active_count = self._count_active_strategies()
            total_count = len(self.strategy_instances)
            failed_count = sum(1 for i in self.strategy_instances.values() if i.status == StrategyStatus.ERROR)
            
            self.stats["strategies_active"] = active_count
            self.stats["strategies_failed"] = failed_count
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if not self.is_running:
                self.status = OrchestratorStatus.STOPPED
            elif active_count == 0:
                self.status = OrchestratorStatus.ERROR
            elif active_count < total_count / 2:  # –ú–µ–Ω–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç
                self.status = OrchestratorStatus.DEGRADED
            else:
                self.status = OrchestratorStatus.RUNNING
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    
    def _count_active_strategies(self) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        return sum(1 for instance in self.strategy_instances.values() 
                  if instance.status == StrategyStatus.ACTIVE)
    
    async def _emit_event(self, event_name: str, data: Any):
        """–ò—Å–ø—É—Å–∫–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        try:
            callbacks = self.event_callbacks.get(event_name, [])
            if callbacks:
                for callback in callbacks:
                    try:
                        if asyncio.iscoroutinefunction(callback):
                            await callback(data)
                        else:
                            callback(data)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback —Å–æ–±—ã—Ç–∏—è {event_name}: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—É—Å–∫–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è {event_name}: {e}")
    
    async def _log_final_statistics(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        try:
            stats = self.get_stats()
            uptime = datetime.now() - self.stats["start_time"]
            
            logger.info("üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ StrategyOrchestrator:")
            logger.info(f"   ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}")
            logger.info(f"   ‚Ä¢ –¶–∏–∫–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {stats['analysis_cycles']}")
            logger.info(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {stats['successful_analyses']}")
            logger.info(f"   ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {stats['failed_analyses']}")
            logger.info(f"   ‚Ä¢ –°–∏–≥–Ω–∞–ª–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['signals_generated']}")
            logger.info(f"   ‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {stats['strategies_loaded']}")
            logger.info(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.2f}%")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    # ==================== PUBLIC API ====================
    
    def add_event_callback(self, event_name: str, callback: Callable):
        """–î–æ–±–∞–≤–ª—è–µ—Ç callback –¥–ª—è —Å–æ–±—ã—Ç–∏—è"""
        self.event_callbacks[event_name].append(callback)
        logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω callback –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_name}")
    
    def remove_event_callback(self, event_name: str, callback: Callable):
        """–£–¥–∞–ª—è–µ—Ç callback –¥–ª—è —Å–æ–±—ã—Ç–∏—è"""
        if event_name in self.event_callbacks:
            try:
                self.event_callbacks[event_name].remove(callback)
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω callback –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_name}")
            except ValueError:
                logger.warning(f"‚ö†Ô∏è Callback –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    async def add_strategy(self, config: StrategyConfig) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"""
        try:
            if config.name in self.strategy_instances:
                logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {config.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
            
            logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {config.name}")
            
            strategy_instance = await self._create_strategy_instance(config)
            if strategy_instance:
                self.strategy_instances[config.name] = strategy_instance
                self.stats["strategies_loaded"] += 1
                
                logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {config.name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                await self._emit_event("strategy_added", {"strategy": config.name})
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é {config.name}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {config.name}: {e}")
            return False
    
    async def remove_strategy(self, strategy_name: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"""
        try:
            if strategy_name not in self.strategy_instances:
                logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            logger.info(f"‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}")
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            instance = self.strategy_instances[strategy_name]
            instance.status = StrategyStatus.STOPPED
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            del self.strategy_instances[strategy_name]
            
            logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} —É–¥–∞–ª–µ–Ω–∞")
            await self._emit_event("strategy_removed", {"strategy": strategy_name})
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {e}")
            return False
    
    async def pause_strategy(self, strategy_name: str) -> bool:
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"""
        try:
            if strategy_name in self.strategy_instances:
                self.strategy_instances[strategy_name].status = StrategyStatus.PAUSED
                logger.info(f"‚è∏Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                await self._emit_event("strategy_paused", {"strategy": strategy_name})
                return True
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—É–∑—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {e}")
            return False
    
    async def resume_strategy(self, strategy_name: str) -> bool:
        """–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if strategy_name in self.strategy_instances:
                instance = self.strategy_instances[strategy_name]
                if instance.status == StrategyStatus.PAUSED:
                    instance.status = StrategyStatus.ACTIVE
                    logger.info(f"‚ñ∂Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                    await self._emit_event("strategy_resumed", {"strategy": strategy_name})
                    return True
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {e}")
            return False
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            uptime = datetime.now() - self.stats["start_time"] if self.stats["start_time"] else timedelta(0)
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            base_stats = {
                **self.stats,
                "status": self.status.value,
                "uptime_seconds": uptime.total_seconds(),
                "uptime_formatted": str(uptime).split('.')[0],
                "is_running": self.is_running,
                "strategies_total": len(self.strategy_instances),
                "strategies_active": self._count_active_strategies(),
                "success_rate": round(
                    (self.stats["successful_analyses"] / max(self.stats["total_analyses"], 1) * 100), 2
                ) if self.stats["successful_analyses"] > 0 else 0,
                "analyses_per_hour": round(
                    (self.stats["successful_analyses"] / max(uptime.total_seconds() / 3600, 0.001)), 2
                ) if uptime.total_seconds() > 0 else 0
            }
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
            strategy_stats = {}
            for name, instance in self.strategy_instances.items():
                strategy_stats[name] = instance.to_dict()
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            performance_stats = {}
            if self.performance_history:
                recent_performance = list(self.performance_history)[-10:]
                if recent_performance:
                    performance_stats = {
                        "recent_avg_cycle_time": sum(p["cycle_duration"] for p in recent_performance) / len(recent_performance),
                        "recent_max_cycle_time": max(p["cycle_duration"] for p in recent_performance),
                        "performance_records": len(self.performance_history)
                    }
            
            return {
                **base_stats,
                "strategy_stats": strategy_stats,
                "performance_stats": performance_stats,
                "background_tasks": len([t for t in self.background_tasks if not t.done()])
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"error": str(e)}
    
    def get_strategy_stats(self, strategy_name: str) -> Optional[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if strategy_name in self.strategy_instances:
            return self.strategy_instances[strategy_name].to_dict()
        return None
    
    def get_health_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            strategy_health = {}
            overall_healthy = True
            
            for name, instance in self.strategy_instances.items():
                health_issue = self._check_strategy_health(instance)
                is_healthy = health_issue is None
                
                strategy_health[name] = {
                    "healthy": is_healthy,
                    "status": instance.status.value,
                    "issue": health_issue,
                    "error_rate": (instance.error_count / max(instance.total_analyses, 1)) * 100,
                    "last_analysis": instance.last_analysis_at.isoformat() if instance.last_analysis_at else None
                }
                
                if not is_healthy:
                    overall_healthy = False
            
            return {
                "overall_healthy": overall_healthy,
                "orchestrator_status": self.status.value,
                "active_strategies": self._count_active_strategies(),
                "total_strategies": len(self.strategy_instances),
                "strategy_health": strategy_health,
                "last_analysis_cycle": self.stats["last_analysis_time"].isoformat() if self.stats["last_analysis_time"] else None,
                "average_cycle_time": self.stats["average_cycle_time"]
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            return {"error": str(e), "overall_healthy": False}
    
    def __str__(self):
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        active_count = self._count_active_strategies()
        total_count = len(self.strategy_instances)
        
        return (f"StrategyOrchestrator(status={self.status.value}, "
                f"strategies={active_count}/{total_count}, "
                f"cycles={self.stats['analysis_cycles']}, "
                f"signals={self.stats['signals_generated']})")
    
    def __repr__(self):
        """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return (f"StrategyOrchestrator(status={self.status.value}, "
                f"interval={self.analysis_interval}s, "
                f"max_concurrent={self.max_concurrent_analyses}, "
                f"monitoring={self.enable_performance_monitoring})")


# ==================== EXPORTS ====================

__all__ = [
    "StrategyOrchestrator",
    "StrategyInstance",
    "OrchestratorStatus",
    "StrategyStatus"
]

logger.info("‚úÖ Simplified StrategyOrchestrator v2.0 loaded - Direct Repository Access")
