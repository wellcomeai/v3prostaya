"""
Candle Synchronization Service

–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–≤–µ—á–µ–π:
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
- –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –î–æ–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import logging
import traceback
from datetime import datetime, timedelta, timezone
from typing import Dict, Any, List, Optional
from dataclasses import dataclass

logger = logging.getLogger(__name__)


@dataclass
class SyncConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    intervals_to_sync: List[str] = None
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–≥—Ä—É–∑–∫–∏
    max_gap_days: int = 30          # –ú–∞–∫—Å –ø—Ä–æ–ø—É—Å–∫ –¥–ª—è –∞–≤—Ç–æ-–¥–æ–≥—Ä—É–∑–∫–∏
    check_gaps_on_start: bool = True
    
    def __post_init__(self):
        if self.intervals_to_sync is None:
            # ‚úÖ –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.intervals_to_sync = ["1m", "5m", "15m", "1h", "4h", "1d"]
    
    def get_sync_interval_seconds(self, interval: str) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        
        Args:
            interval: –¢–∞–π–º—Ñ—Ä–µ–π–º (1m, 5m, 15m, 1h, 4h, 1d)
            
        Returns:
            –°–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        """
        sync_intervals = {
            "1m": 60,       # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            "5m": 300,      # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç  
            "15m": 900,     # –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
            "1h": 3660,     # –ö–∞–∂–¥—ã–π —á–∞—Å + 1 –º–∏–Ω
            "4h": 14460,    # –ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ + 1 –º–∏–Ω
            "1d": 86460     # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å + 1 –º–∏–Ω
        }
        return sync_intervals.get(interval, 3600)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å


class CandleSyncService:
    """
    –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–≤–µ—á–µ–π
    
    –§—É–Ω–∫—Ü–∏–∏:
    1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ‚Üí –¥–æ–≥—Ä—É–∑–∫–∞
    2. –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ 1m/5m/15m/1h/4h/1d –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    """
    
    def __init__(self, 
                 repository,  # MarketDataRepository
                 rest_api_provider,  # RestApiProvider
                 historical_loader=None,  # HistoricalDataLoader (optional)
                 config: SyncConfig = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
            rest_api_provider: REST API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π
            historical_loader: –ó–∞–≥—Ä—É–∑—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ (–¥–ª—è –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤)
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        self.repository = repository
        self.rest_api = rest_api_provider
        self.historical_loader = historical_loader
        self.config = config or SyncConfig()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_running = False
        self.sync_tasks: List[asyncio.Task] = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "gaps_found": 0,
            "gaps_filled": 0,
            "candles_synced": 0,
            "sync_errors": 0,
            "start_time": None
            # last_sync_{interval} –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        }
        
        logger.info("üîÑ CandleSyncService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start(self, symbol: str = "BTCUSDT") -> bool:
        """
        –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
        –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
        1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        2. –î–æ–≥—Ä—É–∂–∞–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        3. –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è {symbol}")
            self.stats["start_time"] = datetime.now()
            
            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
            if self.config.check_gaps_on_start:
                await self._check_and_fill_gaps(symbol)
            
            # –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            self.is_running = True
            await self._start_sync_tasks(symbol)
            
            logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def _check_and_fill_gaps(self, symbol: str):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö
        
        –ó–∞—á–µ–º: –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ –¥–æ–≥—Ä—É–∑–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–Ω–∏
        """
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö...")
            
            now = datetime.now(timezone.utc)
            gaps_to_fill = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            for interval in self.config.intervals_to_sync:
                gap_info = await self.repository.check_data_gaps(
                    symbol=symbol,
                    interval=interval,
                    expected_end=now
                )
                
                if gap_info and gap_info.get("has_gap"):
                    gaps_to_fill.append((interval, gap_info))
                    self.stats["gaps_found"] += 1
                    
                    missing = gap_info.get("missing_candles", "unknown")
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –Ω–∞–π–¥–µ–Ω: {interval} - {missing} —Å–≤–µ—á–µ–π")
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
            if gaps_to_fill:
                await self._fill_gaps(symbol, gaps_to_fill)
            else:
                logger.info("‚úÖ –ü—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {e}")
    
    async def _fill_gaps(self, symbol: str, gaps: List[tuple]):
        """
        –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤
        
        –ó–∞—á–µ–º: –î–æ–≥—Ä—É–∑–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ REST API
        """
        try:
            logger.info(f"üì• –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ {len(gaps)} –ø—Ä–æ–ø—É—Å–∫–æ–≤...")
            
            for interval, gap_info in gaps:
                gap_start = gap_info.get("gap_start")
                gap_end = gap_info.get("gap_end")
                missing_candles = gap_info.get("missing_candles")
                
                # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º REST API (–æ–Ω —É–º–µ–µ—Ç –¥–µ–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤)
                logger.info(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ {missing_candles} —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ REST API")
                await self._fill_gap_with_rest(symbol, interval, gap_start, gap_end)
                
                self.stats["gaps_filled"] += 1
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤: {e}")
            self.stats["sync_errors"] += 1
    
    async def _fill_gap_with_rest(self, symbol: str, interval: str, 
                                  start: datetime, end: datetime):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–±–æ–ª—å—à–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ REST API"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º interval –≤ —Ñ–æ—Ä–º–∞—Ç Bybit
            interval_map = {
                "1m": "1",
                "5m": "5",
                "15m": "15",
                "1h": "60",
                "4h": "240",
                "1d": "D"
            }
            
            bybit_interval = interval_map.get(interval, "60")
            
            logger.info(f"üì• –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞ {symbol} {interval}: {start} ‚Üí {end}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
            from database.models.market_data import CandleInterval, MarketDataCandle
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω—É–∂–Ω–æ (max 200 —Å–≤–µ—á–µ–π –∑–∞ –∑–∞–ø—Ä–æ—Å)
            interval_enum = CandleInterval(interval)
            interval_seconds = interval_enum.to_seconds()
            
            total_seconds = (end - start).total_seconds()
            total_candles = int(total_seconds / interval_seconds)
            
            candles_per_request = 200
            num_requests = (total_candles // candles_per_request) + 1
            
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–∞—é ~{total_candles} —Å–≤–µ—á–µ–π –∑–∞ {num_requests} –∑–∞–ø—Ä–æ—Å–æ–≤")
            
            all_candles = []
            current_end = end
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ—á–∏ –ø–∞—Ä—Ç–∏—è–º–∏ –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
            for i in range(num_requests):
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ü–∏—é —Å–≤–µ—á–µ–π
                kline_response = await self.rest_api.get_kline_data(
                    symbol=symbol,
                    interval=bybit_interval,
                    limit=candles_per_request
                )
                
                if not kline_response.get('result', {}).get('list'):
                    logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å #{i+1}")
                    break
                
                # –ü–∞—Ä—Å–∏–º —Å–≤–µ—á–∏
                raw_candles = kline_response['result']['list']
                for raw_candle in raw_candles:
                    try:
                        candle = MarketDataCandle.create_from_bybit_data(
                            symbol=symbol,
                            interval=interval,
                            bybit_candle=raw_candle
                        )
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –Ω—É–∂–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                        if start <= candle.open_time <= end:
                            all_candles.append(candle)
                            
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–≤–µ—á–∏: {e}")
                        continue
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                oldest_candle_time = datetime.fromtimestamp(int(raw_candles[-1][0]) / 1000, tz=timezone.utc)
                if oldest_candle_time <= start:
                    logger.info(f"‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ {start}")
                    break
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.2)
                
                logger.info(f"üìä –ó–∞–ø—Ä–æ—Å {i+1}/{num_requests}: –ø–æ–ª—É—á–µ–Ω–æ {len(raw_candles)} —Å–≤–µ—á–µ–π")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –±–∞—Ç—á–µ–º
            if all_candles:
                inserted, updated = await self.repository.bulk_insert_candles(all_candles)
                self.stats["candles_synced"] += inserted + updated
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_candles)} —Å–≤–µ—á–µ–π ({inserted} –Ω–æ–≤—ã—Ö, {updated} –æ–±–Ω–æ–≤–ª–µ–Ω–æ)")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å–≤–µ—á–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ REST: {e}")
            logger.error(traceback.format_exc())
            self.stats["sync_errors"] += 1
    
    async def _fill_gap_with_loader(self, symbol: str, interval: str,
                                   start: datetime, end: datetime):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ HistoricalDataLoader"""
        try:
            if not self.historical_loader:
                logger.warning("‚ö†Ô∏è HistoricalDataLoader –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                return
            
            logger.info(f"üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ HistoricalDataLoader: {start} ‚Üí {end}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π loader
            result = await self.historical_loader.load_historical_data(
                intervals=[interval],
                start_time=start,
                end_time=end
            )
            
            if result.get("success"):
                candles_loaded = result.get("total_candles_loaded", 0)
                self.stats["candles_synced"] += candles_loaded
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {candles_loaded} —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ Loader")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ Loader")
                self.stats["sync_errors"] += 1
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Loader: {e}")
            self.stats["sync_errors"] += 1
    
    async def _start_sync_tasks(self, symbol: str):
        """
        –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
        ‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –í–°–ï–• –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        """
        try:
            logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: {self.config.intervals_to_sync}")
            
            # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –¥–ª—è –ö–ê–ñ–î–û–ì–û –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            for interval in self.config.intervals_to_sync:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                sync_interval_seconds = self.config.get_sync_interval_seconds(interval)
                
                # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
                task = asyncio.create_task(
                    self._sync_loop(symbol, interval, sync_interval_seconds)
                )
                self.sync_tasks.append(task)
                
                logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {interval} (–∫–∞–∂–¥—ã–µ {sync_interval_seconds}—Å)")
            
            logger.info(f"üéØ –í—Å–µ–≥–æ –∑–∞–ø—É—â–µ–Ω–æ {len(self.sync_tasks)} –∑–∞–¥–∞—á —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
    
    async def _sync_loop(self, symbol: str, interval: str, sleep_seconds: int):
        """
        –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        
        –ó–∞—á–µ–º: –ö–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–≤–µ—á–∏ —á–µ—Ä–µ–∑ REST API
        """
        logger.info(f"üîÅ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {interval} (–∫–∞–∂–¥—ã–µ {sleep_seconds}—Å)")
        
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É —á–µ—Ä–µ–∑ REST
                await self._sync_latest_candle(symbol, interval)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                self.stats[f"last_sync_{interval}"] = datetime.now()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                await asyncio.sleep(sleep_seconds)
                
            except asyncio.CancelledError:
                logger.info(f"üõë –¶–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {interval} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {interval}: {e}")
                self.stats["sync_errors"] += 1
                await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–∏–Ω—É—Ç—É
    
    async def _sync_latest_candle(self, symbol: str, interval: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º interval
            interval_map = {"1m": "1", "5m": "5", "15m": "15", "1h": "60", "4h": "240", "1d": "D"}
            bybit_interval = interval_map.get(interval, "60")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É
            kline_response = await self.rest_api.get_kline_data(
                symbol=symbol,
                interval=bybit_interval,
                limit=1
            )
            
            if not kline_response.get('result', {}).get('list'):
                return
            
            # –ü–∞—Ä—Å–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            from database.models.market_data import MarketDataCandle
            raw_candle = kline_response['result']['list'][0]
            candle = MarketDataCandle.create_from_bybit_data(
                symbol=symbol,
                interval=interval,
                bybit_candle=raw_candle
            )
            
            success = await self.repository.insert_candle(candle)
            if success:
                self.stats["candles_synced"] += 1
                logger.debug(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤–µ—á–∞ {interval}: ${candle.close_price}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–≤–µ—á–∏ {interval}: {e}")
            self.stats["sync_errors"] += 1
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        self.is_running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
        for task in self.sync_tasks:
            if not task.done():
                task.cancel()
        
        if self.sync_tasks:
            await asyncio.gather(*self.sync_tasks, return_exceptions=True)
        
        logger.info("‚úÖ –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        uptime = None
        if self.stats["start_time"]:
            uptime = datetime.now() - self.stats["start_time"]
        
        return {
            **self.stats,
            "is_running": self.is_running,
            "active_tasks": len([t for t in self.sync_tasks if not t.done()]),
            "uptime": str(uptime).split('.')[0] if uptime else None
        }


# Export
__all__ = ["CandleSyncService", "SyncConfig"]
