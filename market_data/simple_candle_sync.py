"""
Simple Candle Sync Service

–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ REST API Bybit.
–ó–∞–º–µ–Ω–∞ —Å–ª–æ–∂–Ω–æ–≥–æ CandleAggregator - –ë–ï–ó WebSocket —Ç–∏–∫–æ–≤, –ë–ï–ó deadlock.

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ü–æ–ª—É—á–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ OHLCV –æ—Ç Bybit (–Ω–µ —Å—Ç—Ä–æ–∏–º —Å–∞–º–∏)
- –†–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–∏–º–≤–æ–ª–æ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
- –ù–∞–¥–µ–∂–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ—è—Ö
- –ú–∏–Ω–∏–º—É–º –∫–æ–¥–∞, –º–∞–∫—Å–∏–º—É–º –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
"""

import asyncio
import logging
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
import traceback

logger = logging.getLogger(__name__)


@dataclass
class SyncSchedule:
    """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    interval: str           # –ù–∞—à —Ñ–æ—Ä–º–∞—Ç (1m, 5m, 15m, 1h, 4h, 1d)
    update_seconds: int     # –ö–∞–∫ —á–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
    bybit_interval: str     # –§–æ—Ä–º–∞—Ç Bybit API
    
    @classmethod
    def get_default_schedule(cls) -> List['SyncSchedule']:
        """–î–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤"""
        return [
            cls("1m", 60, "1"),          # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            cls("5m", 300, "5"),         # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            cls("15m", 900, "15"),       # –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
            cls("1h", 3600, "60"),       # –ö–∞–∂–¥—ã–π —á–∞—Å
            cls("4h", 14400, "240"),     # –ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
            cls("1d", 86400, "D"),       # –†–∞–∑ –≤ –¥–µ–Ω—å
        ]


class SimpleCandleSync:
    """
    üöÄ –ü—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ REST API Bybit
    
    –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
    - –ù–∞–¥–µ–∂–Ω—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ –æ—Ç Bybit (–Ω–µ —Å—Ç—Ä–æ–∏–º —Å–∞–º–∏)
    - –ù–µ—Ç deadlock (–ø—Ä–æ—Å—Ç—ã–µ insert)
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    - –õ–µ–≥–∫–∞—è –æ—Ç–ª–∞–¥–∫–∞
    - –ú–∏–Ω–∏–º—É–º –∫–æ–¥–∞
    """
    
    def __init__(self, 
                 symbols: List[str],
                 bybit_client,           # BybitClient instance
                 repository,             # MarketDataRepository instance
                 schedule: List[SyncSchedule] = None,
                 check_gaps_on_start: bool = True):
        """
        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ ["BTCUSDT", "ETHUSDT", ...]
            bybit_client: BybitClient –¥–ª—è REST –∑–∞–ø—Ä–æ—Å–æ–≤
            repository: MarketDataRepository –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            schedule: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (default: –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã)
            check_gaps_on_start: –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        """
        self.symbols = [s.upper() for s in symbols]
        self.bybit_client = bybit_client
        self.repository = repository
        self.schedule = schedule or SyncSchedule.get_default_schedule()
        self.check_gaps_on_start = check_gaps_on_start
        
        # –ó–∞–¥–∞—á–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.sync_tasks: List[asyncio.Task] = []
        self.is_running = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "start_time": None,
            "candles_synced": 0,
            "api_calls": 0,
            "errors": 0,
            "last_sync_by_interval": {},  # {interval: datetime}
            "gaps_found": 0,
            "gaps_filled": 0
        }
        
        logger.info("üîß SimpleCandleSync –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   ‚Ä¢ –°–∏–º–≤–æ–ª—ã: {', '.join(self.symbols)}")
        logger.info(f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã: {', '.join([s.interval for s in self.schedule])}")
        logger.info(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {'‚úÖ' if check_gaps_on_start else '‚ùå'}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ SimpleCandleSync...")
            self.is_running = True
            self.stats["start_time"] = datetime.now()
            
            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if self.check_gaps_on_start:
                await self._check_and_fill_all_gaps()
            
            # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            for schedule_item in self.schedule:
                task = asyncio.create_task(
                    self._sync_interval_loop(schedule_item)
                )
                self.sync_tasks.append(task)
                
                logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª {schedule_item.interval} "
                          f"(–∫–∞–∂–¥—ã–µ {schedule_item.update_seconds}—Å)")
            
            logger.info(f"üéØ –í—Å–µ–≥–æ –∑–∞–ø—É—â–µ–Ω–æ {len(self.sync_tasks)} –∑–∞–¥–∞—á —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            logger.info(f"üìä –°–∏–º–≤–æ–ª—ã: {len(self.symbols)}, –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã: {len(self.schedule)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ SimpleCandleSync: {e}")
            logger.error(traceback.format_exc())
            raise
    
    async def _check_and_fill_all_gaps(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –¥–ª—è –í–°–ï–• —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤...")
            
            now = datetime.now(timezone.utc)
            gaps_to_fill = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ö–ê–ñ–î–´–ô —Å–∏–º–≤–æ–ª –∏ –ö–ê–ñ–î–´–ô –∏–Ω—Ç–µ—Ä–≤–∞–ª
            for symbol in self.symbols:
                for schedule_item in self.schedule:
                    interval = schedule_item.interval
                    
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
                        gap_info = await self.repository.check_data_gaps(
                            symbol=symbol,
                            interval=interval,
                            expected_end=now
                        )
                        
                        if gap_info and gap_info.get("has_gap"):
                            missing = gap_info.get("missing_candles", "unknown")
                            gap_start = gap_info.get("gap_start")
                            gap_end = gap_info.get("gap_end")
                            
                            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ [{symbol}] {interval}: {missing} —Å–≤–µ—á–µ–π")
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                            if isinstance(missing, int) and missing < 5000:  # –ó–∞—â–∏—Ç–∞
                                gaps_to_fill.append({
                                    "symbol": symbol,
                                    "interval": interval,
                                    "bybit_interval": schedule_item.bybit_interval,
                                    "gap_start": gap_start,
                                    "gap_end": gap_end,
                                    "missing_candles": missing
                                })
                                self.stats["gaps_found"] += 1
                            else:
                                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({missing}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ [{symbol}] {interval}: {e}")
                        continue
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏
            if gaps_to_fill:
                logger.info(f"üì• –ù–∞–π–¥–µ–Ω–æ {len(gaps_to_fill)} –ø—Ä–æ–ø—É—Å–∫–æ–≤, –Ω–∞—á–∏–Ω–∞—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ...")
                
                for gap in gaps_to_fill:
                    try:
                        await self._fill_gap(gap)
                        self.stats["gaps_filled"] += 1
                        await asyncio.sleep(0.2)  # Rate limit –∑–∞—â–∏—Ç–∞
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞: {e}")
                        self.stats["errors"] += 1
                
                logger.info(f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ {self.stats['gaps_filled']}/{len(gaps_to_fill)} –ø—Ä–æ–ø—É—Å–∫–æ–≤")
            else:
                logger.info(f"‚úÖ –ü—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {e}")
            logger.error(traceback.format_exc())
    
    async def _fill_gap(self, gap: Dict[str, Any]):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ–ø—É—Å–∫ —á–µ—Ä–µ–∑ REST API"""
        try:
            symbol = gap["symbol"]
            interval = gap["interval"]
            bybit_interval = gap["bybit_interval"]
            gap_start = gap["gap_start"]
            gap_end = gap["gap_end"]
            missing_candles = gap["missing_candles"]
            
            logger.info(f"üì• –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ [{symbol}] {interval}: ~{missing_candles} —Å–≤–µ—á–µ–π")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ 200 —Å–≤–µ—á–µ–π –∑–∞ —Ä–∞–∑)
            candles_per_request = 200
            num_requests = (missing_candles // candles_per_request) + 1
            num_requests = min(num_requests, 50)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∑–∞—â–∏—Ç—ã
            
            total_saved = 0
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ—á–∏ –ø–∞—Ä—Ç–∏—è–º–∏
            for i in range(num_requests):
                try:
                    # –ó–∞–ø—Ä–æ—Å –∫ Bybit —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç
                    response = await self.bybit_client._make_request(
                        '/v5/market/kline',
                        params={
                            'category': 'linear',
                            'symbol': symbol,
                            'interval': bybit_interval,
                            'limit': candles_per_request
                        }
                    )
                    
                    self.stats["api_calls"] += 1
                    
                    # –ü–∞—Ä—Å–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                    if response.get('result', {}).get('list'):
                        raw_candles = response['result']['list']
                        saved = await self._save_candles_batch(
                            symbol, interval, raw_candles
                        )
                        total_saved += saved
                    
                    await asyncio.sleep(0.2)  # Rate limit
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {i+1}/{num_requests}: {e}")
                    self.stats["errors"] += 1
                    break
            
            logger.info(f"‚úÖ [{symbol}] {interval}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {total_saved} —Å–≤–µ—á–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞: {e}")
            raise
    
    async def _sync_interval_loop(self, schedule: SyncSchedule):
        """
        –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        
        Args:
            schedule: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        """
        interval = schedule.interval
        logger.info(f"üîÅ –¶–∏–∫–ª {interval} –∑–∞–ø—É—â–µ–Ω")
        
        while self.is_running:
            try:
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –í–°–ï —Å–∏–º–≤–æ–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                synced_count = await self._sync_interval_all_symbols(schedule)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                self.stats["last_sync_by_interval"][interval] = datetime.now()
                
                if synced_count > 0:
                    logger.debug(f"‚úÖ {interval}: {synced_count}/{len(self.symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                await asyncio.sleep(schedule.update_seconds)
                
            except asyncio.CancelledError:
                logger.info(f"üõë –¶–∏–∫–ª {interval} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ {interval}: {e}")
                self.stats["errors"] += 1
                await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–∏–Ω—É—Ç—É
    
    async def _sync_interval_all_symbols(self, schedule: SyncSchedule) -> int:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        interval = schedule.interval
        bybit_interval = schedule.bybit_interval
        
        synced_count = 0
        
        for symbol in self.symbols:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–≤–µ—á–∏ (–ø–æ—Å–ª–µ–¥–Ω—è—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç–æ–π)
                response = await self.bybit_client._make_request(
                    '/v5/market/kline',
                    params={
                        'category': 'linear',
                        'symbol': symbol,
                        'interval': bybit_interval,
                        'limit': 2
                    }
                )
                
                self.stats["api_calls"] += 1
                
                # –ü–∞—Ä—Å–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                if response.get('result', {}).get('list'):
                    raw_candles = response['result']['list']
                    saved = await self._save_candles_batch(
                        symbol, interval, raw_candles
                    )
                    
                    if saved > 0:
                        synced_count += 1
                        self.stats["candles_synced"] += saved
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
                await asyncio.sleep(0.1)
                
            except Exception as e:
                logger.error(f"‚ùå [{symbol}] {interval}: {e}")
                self.stats["errors"] += 1
                continue
        
        return synced_count
    
    async def _save_candles_batch(self, symbol: str, interval: str, 
                                  raw_candles: List) -> int:
        """
        –ü–∞—Ä—Å–∏—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞—Ç—á —Å–≤–µ—á–µ–π
        
        Args:
            symbol: –°–∏–º–≤–æ–ª
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª
            raw_candles: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Bybit
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
        """
        try:
            from database.models.market_data import MarketDataCandle
            
            saved_count = 0
            
            for raw_candle in raw_candles:
                try:
                    # –°–æ–∑–¥–∞–µ–º MarketDataCandle –∏–∑ Bybit –¥–∞–Ω–Ω—ã—Ö
                    candle = MarketDataCandle.create_from_bybit_data(
                        symbol=symbol,
                        interval=interval,
                        bybit_candle=raw_candle
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º (ON CONFLICT = update)
                    success = await self.repository.insert_candle(candle)
                    
                    if success:
                        saved_count += 1
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–≤–µ—á–∏ [{symbol}] {interval}: {e}")
                    continue
            
            return saved_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞: {e}")
            return 0
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ SimpleCandleSync...")
            self.is_running = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            for task in self.sync_tasks:
                if not task.done():
                    task.cancel()
            
            if self.sync_tasks:
                await asyncio.gather(*self.sync_tasks, return_exceptions=True)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            uptime = (datetime.now() - self.stats["start_time"]).total_seconds()
            logger.info("üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SimpleCandleSync:")
            logger.info(f"   ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime:.0f}—Å")
            logger.info(f"   ‚Ä¢ –°–≤–µ—á–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {self.stats['candles_synced']}")
            logger.info(f"   ‚Ä¢ API –∑–∞–ø—Ä–æ—Å–æ–≤: {self.stats['api_calls']}")
            logger.info(f"   ‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–æ–≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: {self.stats['gaps_filled']}")
            logger.info(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {self.stats['errors']}")
            
            logger.info("‚úÖ SimpleCandleSync –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        uptime = None
        if self.stats["start_time"]:
            uptime = (datetime.now() - self.stats["start_time"]).total_seconds()
        
        return {
            **self.stats,
            "uptime_seconds": uptime,
            "symbols_count": len(self.symbols),
            "intervals_count": len(self.schedule),
            "active_tasks": len([t for t in self.sync_tasks if not t.done()]),
            "is_running": self.is_running,
            "candles_per_second": self.stats["candles_synced"] / uptime if uptime and uptime > 0 else 0,
            "success_rate": ((self.stats["api_calls"] - self.stats["errors"]) / self.stats["api_calls"] * 100) if self.stats["api_calls"] > 0 else 100,
        }
    
    def get_health_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è"""
        stats = self.get_stats()
        
        return {
            "healthy": self.is_running and stats["errors"] < 100,
            "is_running": self.is_running,
            "uptime_seconds": stats["uptime_seconds"],
            "candles_synced": stats["candles_synced"],
            "success_rate": stats["success_rate"],
            "last_sync_times": self.stats["last_sync_by_interval"],
            "errors": stats["errors"]
        }


# Export
__all__ = ["SimpleCandleSync", "SyncSchedule"]
