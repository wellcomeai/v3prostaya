"""
YFinance WebSocket Provider

–ü—Ä–æ–≤–∞–π–¥–µ—Ä WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤ CME –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ yfinance.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- MCL (Micro WTI Crude Oil Futures)
- MGC (Micro Gold Futures)  
- MES (Micro E-mini S&P 500 Futures)
- MNQ (Micro E-mini Nasdaq 100 Futures)

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π WebSocket –∫–ª–∏–µ–Ω—Ç yfinance
- Thread-safe –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
- Callback —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
- –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
- Graceful shutdown
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Callable
from collections import deque
import traceback
import json

logger = logging.getLogger(__name__)


class RealtimeFuturesData:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self, symbol: str, max_history: int = 1000):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–∞
        
        Args:
            symbol: –°–∏–º–≤–æ–ª —Ñ—å—é—á–µ—Ä—Å–∞ (MCL, MGC, MES, MNQ)
            max_history: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
        """
        self.symbol = symbol
        self.prices = deque(maxlen=max_history)
        self.volumes = deque(maxlen=max_history)
        self.timestamps = deque(maxlen=max_history)
        self.current_data = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.stats = {
            "updates": 0,
            "last_update": None,
            "first_update": None,
            "errors": 0
        }
        
        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ summary –ª–æ–≥–∞
        self.last_summary_log = None
        
        logger.info(f"üìä RealtimeFuturesData –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {symbol} (max_history={max_history})")
    
    def update(self, data: dict):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å–∞
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –æ—Ç yfinance WebSocket
        """
        try:
            logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö {self.symbol}: {json.dumps(data, indent=2)}")
            
            self.current_data = data
            self.stats["updates"] += 1
            self.stats["last_update"] = datetime.now()
            
            if self.stats["first_update"] is None:
                self.stats["first_update"] = datetime.now()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É (—Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è)
            price = None
            if 'price' in data:
                price = float(data['price'])
            elif 'last' in data:
                price = float(data['last'])
            elif 'lastPrice' in data:
                price = float(data['lastPrice'])
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–º
            volume = None
            if 'volume' in data:
                volume = float(data['volume'])
            elif 'dayVolume' in data:
                volume = float(data['dayVolume'])
            
            timestamp = datetime.now()
            
            if price and price > 0:  # –í–∞–ª–∏–¥–Ω–∞—è —Ü–µ–Ω–∞
                self.prices.append(price)
                if volume is not None:
                    self.volumes.append(volume)
                self.timestamps.append(timestamp)
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
                if self.last_summary_log is None or (datetime.now() - self.last_summary_log).total_seconds() > 60:
                    logger.info(f"üìä {self.symbol} –æ–±–Ω–æ–≤–ª–µ–Ω: ${price:,.2f}, Vol: {volume:,.0f if volume else 0}, Updates: {self.stats['updates']}")
                    self.last_summary_log = datetime.now()
                else:
                    logger.debug(f"üìä {self.symbol} –æ–±–Ω–æ–≤–ª–µ–Ω: ${price:,.2f}")
            else:
                logger.warning(f"‚ö†Ô∏è {self.symbol}: –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ü–µ–Ω–∞: {price}")
                self.stats["errors"] += 1
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {self.symbol}: {e}")
            logger.error(f"Raw data: {data}")
            self.stats["errors"] += 1
    
    def get_price_change(self, minutes: int) -> float:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ N –º–∏–Ω—É—Ç –≤ %
        
        Args:
            minutes: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        """
        if len(self.prices) < 2 or len(self.timestamps) < 2:
            logger.debug(f"üîç {self.symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ {minutes}–º")
            return 0.0
        
        current_price = self.prices[-1]
        target_time = datetime.now() - timedelta(minutes=minutes)
        
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ü–µ–Ω—É –∫ –Ω—É–∂–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        for i, ts in enumerate(reversed(self.timestamps)):
            if ts <= target_time:
                old_price = self.prices[-(i+1)]
                if old_price > 0:
                    change = (current_price - old_price) / old_price * 100
                    logger.debug(f"üìà {self.symbol} –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ {minutes}–º: {change:+.2f}%")
                    return change
                break
        
        logger.debug(f"üîç {self.symbol}: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {minutes}–º –Ω–∞–∑–∞–¥")
        return 0.0
    
    def get_current_price(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É"""
        price = self.prices[-1] if self.prices else 0.0
        logger.debug(f"üí∞ {self.symbol} —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${price:,.2f}")
        return price
    
    def get_volume(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–º"""
        volume = self.volumes[-1] if self.volumes else 0.0
        logger.debug(f"üì¶ {self.symbol} –æ–±—ä–µ–º: {volume:,.0f}")
        return volume
    
    def has_sufficient_data(self, min_data_points: int = 10) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        sufficient = len(self.prices) >= min_data_points
        logger.debug(f"üîç {self.symbol} –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {sufficient} (–µ—Å—Ç—å {len(self.prices)}, –Ω—É–∂–Ω–æ {min_data_points})")
        return sufficient
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        uptime = None
        if self.stats["first_update"]:
            uptime = (datetime.now() - self.stats["first_update"]).total_seconds()
        
        return {
            **self.stats,
            "symbol": self.symbol,
            "data_points": len(self.prices),
            "volume_points": len(self.volumes),
            "timestamp_points": len(self.timestamps),
            "has_data": bool(self.current_data),
            "uptime_seconds": uptime,
            "current_price": self.get_current_price(),
            "current_volume": self.get_volume()
        }


class YFinanceWebSocketProvider:
    """
    –ü—Ä–æ–≤–∞–π–¥–µ—Ä WebSocket –¥–∞–Ω–Ω—ã—Ö –æ—Ç yfinance –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ CME
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
    - Thread-safe callbacks
    - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    - Graceful shutdown
    """
    
    def __init__(self, symbols: List[str] = None, verbose: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YFinance WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ —Ñ—å—é—á–µ—Ä—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é MCL, MGC, MES, MNQ)
            verbose: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        """
        # –°–∏–º–≤–æ–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ñ—å—é—á–µ—Ä—Å—ã CME
        self.symbols = symbols or ["MCL", "MGC", "MES", "MNQ"]
        self.verbose = verbose
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã –ë–ï–ó —Å—É—Ñ—Ñ–∏–∫—Å–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.symbols_base = self.symbols.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å =F –¥–ª—è WebSocket –ø–æ–¥–ø–∏—Å–∫–∏
        self.symbols_ws = [f"{symbol}=F" if not symbol.endswith('=F') else symbol 
                          for symbol in self.symbols]
        
        logger.info(f"üìä –ë–∞–∑–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã: {self.symbols_base}")
        logger.info(f"üìä WebSocket —Å–∏–º–≤–æ–ª—ã: {self.symbols_ws}")
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã)
        self.futures_data: Dict[str, RealtimeFuturesData] = {}
        for symbol in self.symbols_base:
            self.futures_data[symbol] = RealtimeFuturesData(symbol)
        
        # WebSocket –∫–ª–∏–µ–Ω—Ç
        self.ws_client = None
        self.running = False
        self.connection_ready = asyncio.Event()
        
        # Callback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        self.data_callbacks: List[Callable] = []
        
        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ summary –ª–æ–≥–∞
        self.last_summary_log = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connection_stats = {
            "connection_attempts": 0,
            "successful_connections": 0,
            "connection_failures": 0,
            "messages_received": 0,
            "messages_by_symbol": {symbol: 0 for symbol in self.symbols_base},
            "unknown_messages": 0,
            "error_messages": 0,
            "last_message_time": None,
            "start_time": None
        }
        
        logger.info(f"üîå YFinanceWebSocketProvider –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {', '.join(self.symbols_base)}")
    
    def add_data_callback(self, callback: Callable[[str, dict], None]):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            callback: –§—É–Ω–∫—Ü–∏—è —Å —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π callback(symbol: str, data: dict)
        """
        self.data_callbacks.append(callback)
        logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω data callback ({len(self.data_callbacks)} –≤—Å–µ–≥–æ)")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        try:
            self.connection_stats["connection_attempts"] += 1
            self.connection_stats["start_time"] = datetime.now()
            
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ YFinance WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...")
            logger.info(f"üîß –°–∏–º–≤–æ–ª—ã: {', '.join(self.symbols_base)}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º yfinance
            try:
                import yfinance as yf
                logger.info("‚úÖ yfinance library –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except ImportError as e:
                logger.error("‚ùå yfinance –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install yfinance")
                raise ImportError("yfinance library required. Install with: pip install yfinance") from e
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
            # –°–æ–∑–¥–∞–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç
            logger.info("üîó –°–æ–∑–¥–∞–Ω–∏–µ yfinance AsyncWebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            self.ws_client = yf.AsyncWebSocket(verbose=self.verbose)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º =F –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
            symbols_with_suffix = [f"{symbol}=F" if not symbol.endswith('=F') else symbol 
                                  for symbol in self.symbols_base]
            logger.info(f"üìä –°–∏–º–≤–æ–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: {symbols_with_suffix}")
            
            # –°–ù–ê–ß–ê–õ–ê –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–∏–º–≤–æ–ª—ã
            logger.info(f"üìä –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã...")
            await self.ws_client.subscribe(symbols_with_suffix)
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
            await asyncio.sleep(2)
            
            # –ü–û–¢–û–ú –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
            logger.info("üì° –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è WebSocket...")
            asyncio.create_task(self.ws_client.listen(self._handle_message))
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            await asyncio.sleep(3)
            
            self.running = True
            self.connection_ready.set()
            self.connection_stats["successful_connections"] += 1
            
            logger.info(f"‚úÖ YFinance WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            logger.info(f"üìû Registered callbacks: {len(self.data_callbacks)}")
            
        except Exception as e:
            self.connection_stats["connection_failures"] += 1
            logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ YFinance WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")
            logger.error(f"Stack trace: {traceback.format_exc()}")
            self.running = False
            raise
    
    def _handle_message(self, message: dict):
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç WebSocket
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç yfinance WebSocket
        """
        try:
            self.connection_stats["messages_received"] += 1
            self.connection_stats["last_message_time"] = datetime.now()
            
            logger.debug(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {json.dumps(message, indent=2)}")
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ —Å =F
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            symbol_raw = message.get('id') or message.get('symbol')
            
            if not symbol_raw:
                logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–∏–º–≤–æ–ª–∞: {message}")
                self.connection_stats["unknown_messages"] += 1
                return
            
            # –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å =F –µ—Å–ª–∏ –µ—Å—Ç—å –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            symbol = symbol_raw.replace('=F', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–∞—à —Å–∏–º–≤–æ–ª (–ë–ï–ó —Å—É—Ñ—Ñ–∏–∫—Å–∞)
            if symbol not in self.symbols_base:
                logger.debug(f"üîç –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª {symbol_raw} (–Ω–µ –≤ –ø–æ–¥–ø–∏—Å–∫–µ)")
                return
            
            logger.debug(f"üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} (raw: {symbol_raw})")
            
            self.connection_stats["messages_by_symbol"][symbol] += 1
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
            if self.last_summary_log is None or (datetime.now() - self.last_summary_log).total_seconds() > 60:
                total_msgs = sum(self.connection_stats["messages_by_symbol"].values())
                logger.info(f"üìä WebSocket –∞–∫—Ç–∏–≤–µ–Ω: {total_msgs} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ")
                for sym in self.symbols_base:
                    count = self.connection_stats["messages_by_symbol"][sym]
                    logger.info(f"   ‚Ä¢ {sym}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
                self.last_summary_log = datetime.now()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.futures_data[symbol].update(message)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            logger.debug(f"üìû –í—ã–∑–æ–≤ {len(self.data_callbacks)} callbacks –¥–ª—è {symbol}...")
            for i, callback in enumerate(self.data_callbacks):
                try:
                    logger.debug(f"üìû –í—ã–∑–æ–≤ callback #{i} –¥–ª—è {symbol}")
                    callback(symbol, message)
                    logger.debug(f"‚úÖ Callback #{i} –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è {symbol}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback #{i} –¥–ª—è {symbol}: {e}")
                    logger.error(f"Stack trace: {traceback.format_exc()}")
            
        except Exception as e:
            self.connection_stats["error_messages"] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            logger.error(f"Raw message: {message}")
            logger.error(f"Stack trace: {traceback.format_exc()}")
    
    def get_futures_data(self, symbol: str) -> Optional[RealtimeFuturesData]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ—å—é—á–µ—Ä—Å–∞
        
        Args:
            symbol: –°–∏–º–≤–æ–ª —Ñ—å—é—á–µ—Ä—Å–∞
            
        Returns:
            RealtimeFuturesData –∏–ª–∏ None
        """
        return self.futures_data.get(symbol)
    
    def get_all_futures_data(self) -> Dict[str, RealtimeFuturesData]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤"""
        return self.futures_data
    
    def get_current_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Ñ—å—é—á–µ—Ä—Å–∞–º"""
        try:
            stats = {
                "symbols": self.symbols_base,
                "data_by_symbol": {},
                "connection_stats": self.connection_stats.copy(),
                "last_update": datetime.now().isoformat()
            }
            
            for symbol in self.symbols_base:
                futures = self.futures_data[symbol]
                stats["data_by_symbol"][symbol] = {
                    "current_price": futures.get_current_price(),
                    "price_change_1m": futures.get_price_change(1),
                    "price_change_5m": futures.get_price_change(5),
                    "volume": futures.get_volume(),
                    "data_points": len(futures.prices),
                    "has_sufficient_data": futures.has_sufficient_data(),
                    "stats": futures.get_stats()
                }
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                "symbols": self.symbols_base,
                "error": str(e)
            }
    
    def is_running(self) -> bool:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        if not self.running:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ WebSocket –∫–ª–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not self.ws_client:
            logger.warning("‚ö†Ô∏è WebSocket –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        return self.is_connection_healthy()
    
    def get_connection_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        uptime = None
        if self.connection_stats["start_time"]:
            uptime = (datetime.now() - self.connection_stats["start_time"]).total_seconds()
        
        return {
            **self.connection_stats,
            "uptime_seconds": uptime,
            "messages_per_minute": (self.connection_stats["messages_received"] / (uptime / 60)) if uptime and uptime > 0 else 0,
            "is_healthy": self.is_connection_healthy()
        }
    
    def is_connection_healthy(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if not self.running:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
        if self.connection_stats["last_message_time"]:
            time_since_last = datetime.now() - self.connection_stats["last_message_time"]
            if time_since_last > timedelta(minutes=5):
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π {time_since_last.total_seconds():.0f} —Å–µ–∫—É–Ω–¥")
                return False
        
        return True
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        try:
            logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ YFinance WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...")
            self.running = False
            
            if self.ws_client:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 5: –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º =F
                logger.info(f"üì° –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤: {', '.join(self.symbols_ws)}")
                try:
                    await self.ws_client.unsubscribe(self.symbols_ws)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤: {e}")
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                logger.info("üîå –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
                try:
                    await self.ws_client.close()
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            final_stats = self.get_connection_stats()
            logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ YFinance WebSocket:")
            logger.info(f"   ‚Ä¢ –ü–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {final_stats['connection_attempts']}")
            logger.info(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {final_stats['successful_connections']}")
            logger.info(f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {final_stats['messages_received']}")
            
            for symbol in self.symbols_base:
                count = final_stats['messages_by_symbol'][symbol]
                futures = self.futures_data[symbol]
                logger.info(f"   ‚Ä¢ {symbol}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π, {len(futures.prices)} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")
            
            logger.info(f"   ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {final_stats['uptime_seconds']:.0f} —Å–µ–∫")
            logger.info(f"üõë YFinance WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ YFinance WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")
            logger.error(f"Stack trace: {traceback.format_exc()}")
    
    async def wait_for_data(self, timeout: int = 60) -> bool:
        """
        –û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        
        Args:
            timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, False –µ—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç
        """
        start_time = datetime.now()
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(self.symbols_base)} —Å–∏–º–≤–æ–ª–æ–≤ (—Ç–∞–π–º–∞—É—Ç: {timeout}—Å)...")
        
        check_interval = 2  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        
        while (datetime.now() - start_time).seconds < timeout:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
            all_have_data = True
            for symbol in self.symbols_base:
                futures = self.futures_data[symbol]
                if not futures.has_sufficient_data(min_data_points=5):
                    all_have_data = False
                    break
            
            messages_received = self.connection_stats["messages_received"]
            
            logger.debug(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö: all_have_data={all_have_data}, messages={messages_received}")
            
            if all_have_data and messages_received > 0:
                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ {(datetime.now() - start_time).seconds}—Å")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É
                for symbol in self.symbols_base:
                    futures = self.futures_data[symbol]
                    logger.info(f"   ‚Ä¢ {symbol}: {len(futures.prices)} —Ç–æ—á–µ–∫, —Ü–µ–Ω–∞ ${futures.get_current_price():,.2f}")
                return True
            
            await asyncio.sleep(check_interval)
        
        logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ({timeout}—Å)")
        logger.warning(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.warning(f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {self.connection_stats['messages_received']}")
        for symbol in self.symbols_base:
            futures = self.futures_data[symbol]
            msgs = self.connection_stats['messages_by_symbol'][symbol]
            logger.warning(f"   ‚Ä¢ {symbol}: {msgs} —Å–æ–æ–±—â–µ–Ω–∏–π, {len(futures.prices)} —Ç–æ—á–µ–∫, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ={futures.has_sufficient_data()}")
        
        return False
    
    def __str__(self):
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        status = "Running" if self.running else "Stopped"
        messages = self.connection_stats["messages_received"]
        return f"YFinanceWebSocketProvider(symbols={self.symbols_base}, status={status}, messages={messages})"
    
    def __repr__(self):
        """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return (f"YFinanceWebSocketProvider(symbols={self.symbols_base}, "
                f"running={self.running}, callbacks={len(self.data_callbacks)}, "
                f"messages={self.connection_stats['messages_received']})")


# Export main components
__all__ = [
    "RealtimeFuturesData",
    "YFinanceWebSocketProvider"
]

logger.info("YFinance WebSocket provider module loaded successfully")
