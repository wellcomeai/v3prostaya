import asyncio
import logging
import queue  # Thread-safe –æ—á–µ—Ä–µ–¥—å –¥–ª—è WebSocket —Å–æ–±—ã—Ç–∏–π
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Callable, Union
from enum import Enum
from dataclasses import dataclass, field
import traceback

from .websocket_provider import WebSocketProvider, RealtimeMarketData
from .rest_api_provider import RestApiProvider
from .yfinance_websocket_provider import YFinanceWebSocketProvider, RealtimeFuturesData
from .candle_sync_service import CandleSyncService, SyncConfig
from .candle_aggregator import CandleAggregator  # üÜï –î–û–ë–ê–í–õ–ï–ù–û
from config import Config

logger = logging.getLogger(__name__)


class DataSourceType(Enum):
    """–¢–∏–ø—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    WEBSOCKET = "websocket"
    REST_API = "rest_api" 
    COMBINED = "combined"
    CACHE = "cache"
    YFINANCE = "yfinance"


class HealthStatus(Enum):
    """–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    HEALTHY = "healthy"
    DEGRADED = "degraded"  
    CRITICAL = "critical"
    INITIALIZING = "initializing"


@dataclass
class MarketDataSnapshot:
    """–°–Ω–∏–º–æ–∫ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã)"""
    symbol: str
    timestamp: datetime
    current_price: float
    price_change_1m: float
    price_change_5m: float
    price_change_24h: float
    volume_24h: float
    high_24h: float
    low_24h: float
    bid_price: float
    ask_price: float
    spread: float
    open_interest: float
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    volume_analysis: Dict[str, Any] = field(default_factory=dict)
    orderbook_pressure: Dict[str, Any] = field(default_factory=dict)
    trades_analysis: Dict[str, Any] = field(default_factory=dict)
    hourly_stats: Dict[str, Any] = field(default_factory=dict)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    data_source: DataSourceType = DataSourceType.COMBINED
    data_quality: Dict[str, Any] = field(default_factory=dict)
    has_realtime_data: bool = False
    has_historical_data: bool = False
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return {
            'symbol': self.symbol,
            'timestamp': self.timestamp.isoformat(),
            'current_price': self.current_price,
            'price_change_1m': self.price_change_1m,
            'price_change_5m': self.price_change_5m,
            'price_change_24h': self.price_change_24h,
            'volume_24h': self.volume_24h,
            'high_24h': self.high_24h,
            'low_24h': self.low_24h,
            'bid_price': self.bid_price,
            'ask_price': self.ask_price,
            'spread': self.spread,
            'open_interest': self.open_interest,
            'volume_analysis': self.volume_analysis,
            'orderbook_pressure': self.orderbook_pressure,
            'trades_analysis': self.trades_analysis,
            'hourly_stats': self.hourly_stats,
            'data_source': self.data_source.value,
            'data_quality': self.data_quality,
            'has_realtime_data': self.has_realtime_data,
            'has_historical_data': self.has_historical_data
        }


@dataclass
class FuturesSnapshot:
    """–°–Ω–∏–º–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–∞"""
    symbol: str
    timestamp: datetime
    current_price: float
    price_change_1m: float
    price_change_5m: float
    volume: float
    data_points: int
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    data_source: DataSourceType = DataSourceType.YFINANCE
    has_sufficient_data: bool = False
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return {
            'symbol': self.symbol,
            'timestamp': self.timestamp.isoformat(),
            'current_price': self.current_price,
            'price_change_1m': self.price_change_1m,
            'price_change_5m': self.price_change_5m,
            'volume': self.volume,
            'data_points': self.data_points,
            'data_source': self.data_source.value,
            'has_sufficient_data': self.has_sufficient_data
        }


class MarketDataManager:
    """
    üöÄ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    ‚úÖ Bybit WebSocket + REST API (–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã) - –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –°–ò–ú–í–û–õ–´
    ‚úÖ YFinance WebSocket (—Ñ—å—é—á–µ—Ä—Å—ã CME)
    ‚úÖ CandleAggregator - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ WebSocket –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
    ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• —Å–∏–º–≤–æ–ª–æ–≤
    ‚úÖ Thread-safe –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    ‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ 
    ‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    ‚úÖ Graceful shutdown –∏ error recovery
    """
    
    def __init__(self, 
                 symbols_crypto: List[str] = None,
                 symbols_futures: List[str] = None,
                 testnet: bool = None, 
                 enable_bybit_websocket: bool = True,
                 enable_yfinance_websocket: bool = False,
                 enable_rest_api: bool = True,
                 enable_candle_sync: bool = True,
                 enable_candle_aggregation: bool = True,  # üÜï –î–û–ë–ê–í–õ–ï–ù–û
                 rest_cache_minutes: int = 1, 
                 websocket_reconnect: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            symbols_crypto: –°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ —Å–∏–º–≤–æ–ª–æ–≤ (BTCUSDT, ETHUSDT)
            symbols_futures: –°–ø–∏—Å–æ–∫ —Ñ—å—é—á–µ—Ä—Å–æ–≤ CME (MCL, MGC, MES, MNQ)
            testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å testnet –¥–ª—è Bybit
            enable_bybit_websocket: –í–∫–ª—é—á–∏—Ç—å Bybit WebSocket
            enable_yfinance_websocket: –í–∫–ª—é—á–∏—Ç—å YFinance WebSocket
            enable_rest_api: –í–∫–ª—é—á–∏—Ç—å REST API –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            enable_candle_sync: –í–∫–ª—é—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π
            enable_candle_aggregation: –í–∫–ª—é—á–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ WebSocket –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
            rest_cache_minutes: –í—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è REST –¥–∞–Ω–Ω—ã—Ö –≤ –º–∏–Ω—É—Ç–∞—Ö
            websocket_reconnect: –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        """
        # –°–∏–º–≤–æ–ª—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤
        self.symbols_crypto = symbols_crypto or [Config.SYMBOL]
        self.symbols_futures = symbols_futures or ["MCL", "MGC", "MES", "MNQ"]
        self.testnet = testnet if testnet is not None else Config.BYBIT_TESTNET
        
        # –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        self.bybit_websocket_provider: Optional[WebSocketProvider] = None
        self.yfinance_websocket_provider: Optional[YFinanceWebSocketProvider] = None
        self.rest_api_provider: Optional[RestApiProvider] = None
        self.candle_sync_service: Optional[CandleSyncService] = None
        self.candle_aggregator: Optional[CandleAggregator] = None  # üÜï –î–û–ë–ê–í–õ–ï–ù–û
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.enable_bybit_websocket = enable_bybit_websocket
        self.enable_yfinance_websocket = enable_yfinance_websocket
        self.enable_rest_api = enable_rest_api
        self.enable_candle_sync = enable_candle_sync
        self.enable_candle_aggregation = enable_candle_aggregation  # üÜï –î–û–ë–ê–í–õ–ï–ù–û
        self.websocket_reconnect = websocket_reconnect
        self.rest_cache_duration = timedelta(minutes=rest_cache_minutes)
        
        # –ö—ç—à –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        self.last_rest_update: Optional[datetime] = None
        self.cached_rest_data: Optional[Dict[str, Any]] = None
        self.last_snapshot: Optional[MarketDataSnapshot] = None
        self.last_futures_snapshots: Dict[str, FuturesSnapshot] = {}
        
        # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.data_subscribers: List[Callable[[MarketDataSnapshot], None]] = []
        self.futures_subscribers: List[Callable[[str, FuturesSnapshot], None]] = []
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
        self.is_running = False
        self.initialization_complete = False
        self.shutdown_event = asyncio.Event()
        self._main_loop: Optional[asyncio.AbstractEventLoop] = None
        
        # –ó–∞–¥–∞—á–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.background_tasks: List[asyncio.Task] = []
        
        # Thread-safe –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è WebSocket —Å–æ–±—ã—Ç–∏–π
        self._bybit_event_queue: Optional[queue.Queue] = None
        self._yfinance_event_queue: Optional[queue.Queue] = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.stats = {
            # Bybit —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            "bybit_websocket_updates": 0,
            "bybit_rest_api_calls": 0,
            "bybit_websocket_reconnects": 0,
            "bybit_callback_errors": 0,
            "last_bybit_websocket_data": None,
            "last_bybit_rest_data": None,
            
            # YFinance —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            "yfinance_websocket_updates": 0,
            "yfinance_reconnects": 0,
            "yfinance_callback_errors": 0,
            "last_yfinance_data": None,
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            "data_snapshots_created": 0,
            "futures_snapshots_created": 0,
            "errors": 0,
            "cache_hits": 0,
            "cache_misses": 0,
            "subscriber_notifications": 0,
            "futures_subscriber_notifications": 0,
            "start_time": datetime.now(),
            "last_error": None
        }
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.reconnect_delay = 5  # —Å–µ–∫—É–Ω–¥
        self.max_reconnect_attempts = 10
        self.current_bybit_reconnect_attempts = 0
        self.current_yfinance_reconnect_attempts = 0
        
        logger.info(f"üèóÔ∏è MarketDataManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   ‚Ä¢ Crypto symbols: {', '.join(self.symbols_crypto)}")
        logger.info(f"   ‚Ä¢ Futures symbols: {', '.join(self.symbols_futures)}")
        logger.info(f"   ‚Ä¢ Bybit WS: {enable_bybit_websocket}, YFinance WS: {enable_yfinance_websocket}")
        logger.info(f"   ‚Ä¢ Candle Sync: {enable_candle_sync} (–¥–ª—è {len(self.symbols_crypto)} —Å–∏–º–≤–æ–ª–æ–≤)")
        logger.info(f"   ‚Ä¢ Candle Aggregation: {enable_candle_aggregation}")  # üÜï –î–û–ë–ê–í–õ–ï–ù–û
    
    async def start(self) -> bool:
        """
        üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ MarketDataManager...")
            self.stats["start_time"] = datetime.now()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π event loop
            self._main_loop = asyncio.get_running_loop()
            
            # –°–æ–∑–¥–∞–µ–º thread-safe –æ—á–µ—Ä–µ–¥–∏
            self._bybit_event_queue = queue.Queue(maxsize=5000)
            self._yfinance_event_queue = queue.Queue(maxsize=1000)
            
            providers_started = 0
            initialization_errors = []
            
            # ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø BYBIT REST API ==========
            if self.enable_rest_api:
                try:
                    logger.info("üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit REST API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...")
                    self.rest_api_provider = RestApiProvider(testnet=self.testnet)
                    
                    connection_task = asyncio.create_task(self.rest_api_provider.check_connection())
                    connection_ok = await asyncio.wait_for(connection_task, timeout=10)
                    
                    if connection_ok:
                        providers_started += 1
                        logger.info("‚úÖ Bybit REST API –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≥–æ—Ç–æ–≤")
                        await self._initialize_rest_data()
                    else:
                        initialization_errors.append("Bybit REST API connection failed")
                        logger.warning("‚ö†Ô∏è Bybit REST API –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                        
                except asyncio.TimeoutError:
                    initialization_errors.append("Bybit REST API connection timeout")
                    logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit REST API")
                except Exception as e:
                    initialization_errors.append(f"Bybit REST API error: {str(e)}")
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bybit REST API: {e}")
                    self.stats["errors"] += 1
                    self.stats["last_error"] = str(e)
            
            # ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –°–í–ï–ß–ï–ô –î–õ–Ø –í–°–ï–• –°–ò–ú–í–û–õ–û–í ==========
            if self.enable_rest_api and self.enable_candle_sync:
                try:
                    logger.info(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–≤–µ—á–µ–π –¥–ª—è {len(self.symbols_crypto)} —Å–∏–º–≤–æ–ª–æ–≤...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                    from database.repositories import get_market_data_repository
                    repository = await get_market_data_repository()
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    sync_config = SyncConfig(
                        intervals_to_sync=["1m", "5m", "15m", "1h", "1d"],
                        check_gaps_on_start=True,
                        max_gap_days=30
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
                    self.candle_sync_service = CandleSyncService(
                        repository=repository,
                        rest_api_provider=self.rest_api_provider,
                        historical_loader=None,
                        config=sync_config
                    )
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –í–°–ï–• –∫—Ä–∏–ø—Ç–æ —Å–∏–º–≤–æ–ª–æ–≤
                    logger.info(f"üéØ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤: {', '.join(self.symbols_crypto)}")
                    sync_started = await self.candle_sync_service.start(self.symbols_crypto)
                    
                    if sync_started:
                        providers_started += 1
                        total_tasks = len(self.symbols_crypto) * len(sync_config.intervals_to_sync)
                        logger.info(f"‚úÖ –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω –¥–ª—è {len(self.symbols_crypto)} —Å–∏–º–≤–æ–ª–æ–≤ ({total_tasks} –∑–∞–¥–∞—á)")
                    else:
                        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–≤–µ—á–µ–π")
                        initialization_errors.append("Candle sync startup failed")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
                    logger.error(f"Stack trace: {traceback.format_exc()}")
                    initialization_errors.append(f"Candle sync error: {str(e)}")
                    self.stats["errors"] += 1
                    self.stats["last_error"] = str(e)
            
            # ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø BYBIT WEBSOCKET ==========
            if self.enable_bybit_websocket:
                bybit_ws_started = await self._initialize_bybit_websocket()
                if bybit_ws_started:
                    providers_started += 1
                else:
                    initialization_errors.append("Bybit WebSocket initialization failed")
            
            # ========== üÜï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø CANDLE AGGREGATOR ==========
            if self.enable_candle_aggregation and self.enable_bybit_websocket and self.bybit_websocket_provider:
                try:
                    logger.info(f"üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CandleAggregator –¥–ª—è {len(self.symbols_crypto)} —Å–∏–º–≤–æ–ª–æ–≤...")
                    
                    self.candle_aggregator = CandleAggregator(
                        symbols=self.symbols_crypto,
                        intervals=["1m", "5m", "15m", "1h", "1d"],
                        batch_save=True,  # –ë–∞—Ç—á–µ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                        batch_size=50
                    )
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä
                    await self.candle_aggregator.start()
                    
                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –Ω–∞ WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    self.bybit_websocket_provider.add_ticker_callback(
                        lambda symbol, ticker_data: asyncio.create_task(
                            self._handle_ticker_for_aggregator(symbol, ticker_data)
                        )
                    )
                    logger.info("‚úÖ CandleAggregator –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                    
                    providers_started += 1
                    logger.info("‚úÖ CandleAggregator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CandleAggregator: {e}")
                    logger.error(traceback.format_exc())
                    initialization_errors.append(f"CandleAggregator error: {str(e)}")
                    self.stats["errors"] += 1
                    self.stats["last_error"] = str(e)
            
            # ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø YFINANCE WEBSOCKET ==========
            if self.enable_yfinance_websocket:
                yfinance_ws_started = await self._initialize_yfinance_websocket()
                if yfinance_ws_started:
                    providers_started += 1
                else:
                    initialization_errors.append("YFinance WebSocket initialization failed")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if providers_started == 0:
                logger.error(f"üí• –ù–∏ –æ–¥–∏–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ. –û—à–∏–±–∫–∏: {initialization_errors}")
                return False
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.is_running = True
            self.initialization_complete = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            await self._start_background_tasks()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–Ω–∏–º–æ–∫ –¥–∞–Ω–Ω—ã—Ö
            if self.enable_bybit_websocket or self.enable_rest_api:
                initial_snapshot = await self.get_market_snapshot()
                if initial_snapshot:
                    logger.info(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ –¥–∞–Ω–Ω—ã–µ: ${initial_snapshot.current_price:,.2f}")
                    self.last_snapshot = initial_snapshot
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–Ω–∏–º–∫–∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤
            if self.enable_yfinance_websocket:
                for symbol in self.symbols_futures:
                    futures_snapshot = await self.get_futures_snapshot(symbol)
                    if futures_snapshot:
                        logger.info(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ {symbol}: ${futures_snapshot.current_price:,.2f}")
                        self.last_futures_snapshots[symbol] = futures_snapshot
            
            logger.info(f"‚úÖ MarketDataManager –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üìà –ü—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ: {providers_started}")
            logger.info(f"üîå Bybit WS: {'‚úÖ' if self.bybit_websocket_provider and self.bybit_websocket_provider.is_running() else '‚ùå'}")
            logger.info(f"üîå YFinance WS: {'‚úÖ' if self.yfinance_websocket_provider and self.yfinance_websocket_provider.is_running() else '‚ùå'}")
            logger.info(f"üì° REST API: {'‚úÖ' if self.rest_api_provider else '‚ùå'}")
            
            # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if self.candle_sync_service and self.candle_sync_service.is_running:
                sync_stats = self.candle_sync_service.get_stats()
                active_tasks = sync_stats.get('active_tasks', 0)
                symbols_syncing = sync_stats.get('symbols_syncing', [])
                logger.info(f"üîÑ Candle Sync: ‚úÖ ({len(symbols_syncing)} —Å–∏–º–≤–æ–ª–æ–≤, {active_tasks} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á)")
                logger.info(f"   –°–∏–º–≤–æ–ª—ã: {', '.join(symbols_syncing)}")
            else:
                logger.info(f"üîÑ Candle Sync: ‚ùå")
            
            # üÜï –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ CandleAggregator
            if self.candle_aggregator and self.candle_aggregator.is_running:
                agg_stats = self.candle_aggregator.get_stats()
                logger.info(f"üèóÔ∏è Candle Aggregator: ‚úÖ ({len(self.symbols_crypto)} —Å–∏–º–≤–æ–ª–æ–≤, {len(agg_stats['intervals'])} –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤)")
                logger.info(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã: {', '.join(agg_stats['intervals'])}")
            else:
                logger.info(f"üèóÔ∏è Candle Aggregator: ‚ùå")
            
            return True
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MarketDataManager: {e}")
            logger.error(f"Stack trace: {traceback.format_exc()}")
            self.stats["errors"] += 1
            self.stats["last_error"] = str(e)
            return False
    
    async def _initialize_rest_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ REST API"""
        try:
            logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö Bybit REST –¥–∞–Ω–Ω—ã—Ö...")
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫—Ä–∏–ø—Ç–æ —Å–∏–º–≤–æ–ª –¥–ª—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            symbol = self.symbols_crypto[0]
            self.cached_rest_data = await self.rest_api_provider.get_comprehensive_market_data(symbol)
            self.last_rest_update = datetime.now()
            self.stats["bybit_rest_api_calls"] += 1
            self.stats["last_bybit_rest_data"] = datetime.now()
            logger.info("‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ Bybit REST –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö REST –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    async def _initialize_bybit_websocket(self) -> bool:
        """üÜï –ò–ó–ú–ï–ù–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"""
        try:
            logger.info("üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...")
            
            # üÜï –ò–ó–ú–ï–ù–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –í–°–ï –∫—Ä–∏–ø—Ç–æ —Å–∏–º–≤–æ–ª—ã
            self.bybit_websocket_provider = WebSocketProvider(
                symbols=self.symbols_crypto,  # ‚úÖ –í–°–ï 15 —Å–∏–º–≤–æ–ª–æ–≤!
                testnet=self.testnet
            )
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å thread-safe callback'–∞–º–∏
            # üÜï –ò–ó–ú–ï–ù–ï–ù–û: Callbacks —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞—é—Ç (symbol, data)
            self.bybit_websocket_provider.add_ticker_callback(self._on_bybit_ticker_update)
            self.bybit_websocket_provider.add_orderbook_callback(self._on_bybit_orderbook_update)
            self.bybit_websocket_provider.add_trades_callback(self._on_bybit_trades_update)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            start_task = asyncio.create_task(self.bybit_websocket_provider.start())
            await asyncio.wait_for(start_task, timeout=15)
            
            # –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
            logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ Bybit WebSocket –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(self.symbols_crypto)} —Å–∏–º–≤–æ–ª–æ–≤...")
            data_received = await self.bybit_websocket_provider.wait_for_data(
                timeout=30,
                min_symbols=max(1, len(self.symbols_crypto) // 2)  # –•–æ—Ç—è –±—ã –ø–æ–ª–æ–≤–∏–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤
            )
            
            if data_received:
                self.current_bybit_reconnect_attempts = 0
                logger.info("‚úÖ Bybit WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≥–æ—Ç–æ–≤")
                return True
            else:
                logger.warning("‚ö†Ô∏è Bybit WebSocket –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞")
                return False
                
        except asyncio.TimeoutError:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bybit WebSocket")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bybit WebSocket: {e}")
            self.stats["errors"] += 1
            self.stats["last_error"] = str(e)
            return False
    
    async def _initialize_yfinance_websocket(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YFinance WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            logger.info("üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YFinance WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...")
            self.yfinance_websocket_provider = YFinanceWebSocketProvider(
                symbols=self.symbols_futures,
                verbose=False
            )
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.yfinance_websocket_provider.add_data_callback(self._on_yfinance_data_update)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            start_task = asyncio.create_task(self.yfinance_websocket_provider.start())
            await asyncio.wait_for(start_task, timeout=20)
            
            # –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤
            logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ YFinance WebSocket –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(self.symbols_futures)} —Å–∏–º–≤–æ–ª–æ–≤...")
            data_received = await self.yfinance_websocket_provider.wait_for_data(timeout=60)
            
            if data_received:
                self.current_yfinance_reconnect_attempts = 0
                logger.info("‚úÖ YFinance WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≥–æ—Ç–æ–≤")
                return True
            else:
                logger.warning("‚ö†Ô∏è YFinance WebSocket –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞")
                return False
                
        except asyncio.TimeoutError:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ YFinance WebSocket")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ YFinance WebSocket: {e}")
            logger.error(f"Stack trace: {traceback.format_exc()}")
            self.stats["errors"] += 1
            self.stats["last_error"] = str(e)
            return False
    
    async def _start_background_tasks(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        try:
            # –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Bybit WebSocket —Å–æ–±—ã—Ç–∏–π
            if self.bybit_websocket_provider:
                bybit_processor = asyncio.create_task(self._bybit_event_processor())
                self.background_tasks.append(bybit_processor)
                logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä Bybit WebSocket —Å–æ–±—ã—Ç–∏–π")
            
            # –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YFinance WebSocket —Å–æ–±—ã—Ç–∏–π
            if self.yfinance_websocket_provider:
                yfinance_processor = asyncio.create_task(self._yfinance_event_processor())
                self.background_tasks.append(yfinance_processor)
                logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä YFinance WebSocket —Å–æ–±—ã—Ç–∏–π")
            
            # –ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Bybit WebSocket
            if self.websocket_reconnect and self.bybit_websocket_provider:
                bybit_monitor = asyncio.create_task(self._bybit_monitor_task())
                self.background_tasks.append(bybit_monitor)
                logger.info("üîç –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Bybit WebSocket")
            
            # –ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ YFinance WebSocket
            if self.websocket_reconnect and self.yfinance_websocket_provider:
                yfinance_monitor = asyncio.create_task(self._yfinance_monitor_task())
                self.background_tasks.append(yfinance_monitor)
                logger.info("üîç –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ YFinance WebSocket")
            
            # –ó–∞–¥–∞—á–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
            cleanup_task = asyncio.create_task(self._periodic_cleanup_task())
            self.background_tasks.append(cleanup_task)
            logger.info("üßπ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            
            logger.info(f"üîÑ –ó–∞–ø—É—â–µ–Ω–æ {len(self.background_tasks)} —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {e}")
    
    # ========== BYBIT WEBSOCKET –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
    
    async def _bybit_event_processor(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Bybit WebSocket —Å–æ–±—ã—Ç–∏–π"""
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ Bybit WebSocket —Å–æ–±—ã—Ç–∏–π")
        
        while self.is_running and not self.shutdown_event.is_set():
            try:
                if not self._bybit_event_queue:
                    await asyncio.sleep(1)
                    continue
                
                try:
                    event = self._bybit_event_queue.get_nowait()
                    await self._process_bybit_event(event)
                except queue.Empty:
                    await asyncio.sleep(0.1)
                    continue
                    
            except asyncio.CancelledError:
                logger.info("üîÑ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä Bybit WebSocket —Å–æ–±—ã—Ç–∏–π –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ Bybit WebSocket: {e}")
                self.stats["errors"] += 1
                await asyncio.sleep(1)
        
        logger.info("üõë –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ Bybit WebSocket –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _process_bybit_event(self, event: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ—Ç Bybit WebSocket"""
        try:
            event_type = event.get("type")
            
            if event_type == "ticker":
                if self.data_subscribers:
                    await self._notify_subscribers_async()
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Bybit —Å–æ–±—ã—Ç–∏—è: {e}")
            self.stats["errors"] += 1
    
    def _on_bybit_ticker_update(self, symbol: str, ticker_data: dict):  # üÜï –ò–ó–ú–ï–ù–ï–ù–û
        """Thread-safe callback –¥–ª—è Bybit —Ç–∏–∫–µ—Ä–∞"""
        try:
            self.stats["bybit_websocket_updates"] += 1
            self.stats["last_bybit_websocket_data"] = datetime.now()
            
            if self._bybit_event_queue:
                try:
                    self._bybit_event_queue.put_nowait({
                        "type": "ticker",
                        "symbol": symbol,  # üÜï –î–û–ë–ê–í–õ–ï–ù–û
                        "data": ticker_data
                    })
                except queue.Full:
                    logger.warning("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å Bybit —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Bybit ticker –¥–ª—è {symbol}: {e}")
            self.stats["bybit_callback_errors"] += 1
            self.stats["errors"] += 1
    
    def _on_bybit_orderbook_update(self, symbol: str, orderbook_data: dict):  # üÜï –ò–ó–ú–ï–ù–ï–ù–û
        """Thread-safe callback –¥–ª—è Bybit –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
        try:
            if self._bybit_event_queue:
                try:
                    self._bybit_event_queue.put_nowait({
                        "type": "orderbook",
                        "symbol": symbol,  # üÜï –î–û–ë–ê–í–õ–ï–ù–û
                        "data": orderbook_data
                    })
                except queue.Full:
                    logger.warning("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å Bybit —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Bybit orderbook –¥–ª—è {symbol}: {e}")
            self.stats["bybit_callback_errors"] += 1
    
    def _on_bybit_trades_update(self, symbol: str, trades_data: list):  # üÜï –ò–ó–ú–ï–ù–ï–ù–û
        """Thread-safe callback –¥–ª—è Bybit —Ç—Ä–µ–π–¥–æ–≤"""
        try:
            if self._bybit_event_queue:
                try:
                    self._bybit_event_queue.put_nowait({
                        "type": "trades",
                        "symbol": symbol,  # üÜï –î–û–ë–ê–í–õ–ï–ù–û
                        "data": trades_data
                    })
                except queue.Full:
                    logger.warning("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å Bybit —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Bybit trades –¥–ª—è {symbol}: {e}")
            self.stats["bybit_callback_errors"] += 1
    
    async def _bybit_monitor_task(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Bybit WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        while self.is_running and not self.shutdown_event.is_set():
            try:
                await asyncio.sleep(30)
                
                if not self.bybit_websocket_provider or not self.bybit_websocket_provider.is_running():
                    logger.warning("‚ö†Ô∏è Bybit WebSocket –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                    
                    if self.current_bybit_reconnect_attempts < self.max_reconnect_attempts:
                        success = await self._attempt_bybit_reconnect()
                        if success:
                            logger.info("‚úÖ Bybit WebSocket –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω")
                            self.current_bybit_reconnect_attempts = 0
                        else:
                            self.current_bybit_reconnect_attempts += 1
                    else:
                        logger.error("üí• –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Bybit")
                        
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Bybit: {e}")
    
    async def _attempt_bybit_reconnect(self) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Bybit WebSocket"""
        try:
            if self.bybit_websocket_provider:
                await self.bybit_websocket_provider.stop()
            
            await asyncio.sleep(self.reconnect_delay)
            success = await self._initialize_bybit_websocket()
            
            if success:
                self.stats["bybit_websocket_reconnects"] += 1
                
                # üÜï –ü–µ—Ä–µ–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º CandleAggregator –µ—Å–ª–∏ –µ—Å—Ç—å
                if self.candle_aggregator and self.candle_aggregator.is_running:
                    self.bybit_websocket_provider.add_ticker_callback(
                        lambda symbol, ticker_data: asyncio.create_task(
                            self._handle_ticker_for_aggregator(symbol, ticker_data)
                        )
                    )
                    logger.info("‚úÖ CandleAggregator –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            
            return success
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Bybit: {e}")
            return False
    
    # ========== üÜï CANDLE AGGREGATOR –û–ë–†–ê–ë–û–¢–ß–ò–ö ==========
    
    async def _handle_ticker_for_aggregator(self, symbol: str, ticker_data: dict):
        """
        üÜï –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ticker updates –¥–ª—è CandleAggregator
        
        Args:
            symbol: –°–∏–º–≤–æ–ª (–ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –æ—Ç WebSocket callback)
            ticker_data: –î–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞ –æ—Ç WebSocket
        """
        try:
            if not self.candle_aggregator or not self.candle_aggregator.is_running:
                return
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä
            await self.candle_aggregator.process_ticker_update(symbol, ticker_data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–∏–∫–∞ {symbol} –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä: {e}")
    
    # ========== YFINANCE WEBSOCKET –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
    
    async def _yfinance_event_processor(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ YFinance WebSocket —Å–æ–±—ã—Ç–∏–π"""
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ YFinance WebSocket —Å–æ–±—ã—Ç–∏–π")
        
        while self.is_running and not self.shutdown_event.is_set():
            try:
                if not self._yfinance_event_queue:
                    await asyncio.sleep(1)
                    continue
                
                try:
                    event = self._yfinance_event_queue.get_nowait()
                    await self._process_yfinance_event(event)
                except queue.Empty:
                    await asyncio.sleep(0.1)
                    continue
                    
            except asyncio.CancelledError:
                logger.info("üîÑ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä YFinance WebSocket –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ YFinance WebSocket: {e}")
                self.stats["errors"] += 1
                await asyncio.sleep(1)
        
        logger.info("üõë –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ YFinance WebSocket –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _process_yfinance_event(self, event: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ—Ç YFinance WebSocket"""
        try:
            symbol = event.get("symbol")
            data = event.get("data")
            
            if symbol and data:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                if self.futures_subscribers:
                    await self._notify_futures_subscribers_async(symbol)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YFinance —Å–æ–±—ã—Ç–∏—è: {e}")
            self.stats["errors"] += 1
    
    def _on_yfinance_data_update(self, symbol: str, data: dict):
        """Thread-safe callback –¥–ª—è YFinance –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.stats["yfinance_websocket_updates"] += 1
            self.stats["last_yfinance_data"] = datetime.now()
            
            if self._yfinance_event_queue:
                try:
                    self._yfinance_event_queue.put_nowait({
                        "symbol": symbol,
                        "data": data
                    })
                except queue.Full:
                    logger.warning(f"‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å YFinance —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è {symbol}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YFinance –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
            self.stats["yfinance_callback_errors"] += 1
            self.stats["errors"] += 1
    
    async def _yfinance_monitor_task(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ YFinance WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        while self.is_running and not self.shutdown_event.is_set():
            try:
                await asyncio.sleep(90)
                
                is_healthy = (self.yfinance_websocket_provider and 
                             self.yfinance_websocket_provider.is_connection_healthy())
                
                if not is_healthy:
                    if self.yfinance_websocket_provider:
                        stats = self.yfinance_websocket_provider.get_connection_stats()
                        logger.warning(f"‚ö†Ô∏è YFinance WebSocket –Ω–µ–∑–¥–æ—Ä–æ–≤")
                        logger.warning(f"üìä –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {stats['messages_received']}")
                    
                    if self.current_yfinance_reconnect_attempts < self.max_reconnect_attempts:
                        logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {self.current_yfinance_reconnect_attempts + 1}/{self.max_reconnect_attempts}")
                        success = await self._attempt_yfinance_reconnect()
                        
                        if success:
                            logger.info("‚úÖ YFinance WebSocket —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω")
                            self.current_yfinance_reconnect_attempts = 0
                        else:
                            self.current_yfinance_reconnect_attempts += 1
                    else:
                        logger.error(f"üí• –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è YFinance")
                        await asyncio.sleep(600)
                        self.current_yfinance_reconnect_attempts = 0
                else:
                    if self.current_yfinance_reconnect_attempts > 0:
                        self.current_yfinance_reconnect_attempts = 0
                        
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ YFinance: {e}")
    
    async def _attempt_yfinance_reconnect(self) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è YFinance WebSocket"""
        try:
            if self.yfinance_websocket_provider:
                await self.yfinance_websocket_provider.stop()
            
            await asyncio.sleep(self.reconnect_delay)
            success = await self._initialize_yfinance_websocket()
            
            if success:
                self.stats["yfinance_reconnects"] += 1
            
            return success
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è YFinance: {e}")
            return False
    
    # ========== –û–ß–ò–°–¢–ö–ê –ò –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò ==========
    
    async def _periodic_cleanup_task(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"""
        while self.is_running and not self.shutdown_event.is_set():
            try:
                await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
                
                stats = self.get_stats()
                logger.info(f"üìä Hourly stats:")
                logger.info(f"   ‚Ä¢ Bybit WS: {stats['bybit_websocket_updates']}, REST: {stats['bybit_rest_api_calls']}")
                logger.info(f"   ‚Ä¢ YFinance WS: {stats['yfinance_websocket_updates']}")
                logger.info(f"   ‚Ä¢ Errors: {stats['errors']}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                if self.candle_sync_service:
                    sync_stats = stats.get('candle_sync', {})
                    logger.info(f"   ‚Ä¢ Candle Sync: {sync_stats.get('candles_synced', 0)} —Å–≤–µ—á–µ–π")
                
                # üÜï –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
                if self.candle_aggregator:
                    agg_stats = stats.get('candle_aggregator', {})
                    logger.info(f"   ‚Ä¢ Candle Aggregator: {agg_stats.get('ticks_received', 0)} —Ç–∏–∫–æ–≤, "
                              f"{agg_stats.get('candles_created', 0)} —Å–≤–µ—á–µ–π —Å–æ–∑–¥–∞–Ω–æ, "
                              f"{agg_stats.get('candles_saved', 0)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                
                # –û—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
                if self.stats["errors"] > 100:
                    self.stats["errors"] = 10
                
                # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ –µ—Å–ª–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω—ã
                for queue_name, queue_obj in [
                    ("Bybit", self._bybit_event_queue),
                    ("YFinance", self._yfinance_event_queue)
                ]:
                    if queue_obj and queue_obj.qsize() > 500:
                        logger.warning(f"üßπ –û—á–∏—â–∞—é –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å {queue_name}")
                        while not queue_obj.empty():
                            try:
                                queue_obj.get_nowait()
                            except queue.Empty:
                                break
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    # ========== –ü–û–î–ü–ò–°–ß–ò–ö–ò ==========
    
    def add_data_subscriber(self, callback: Callable[[MarketDataSnapshot], None]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ –¥–∞–Ω–Ω—ã—Ö"""
        if callback not in self.data_subscribers:
            self.data_subscribers.append(callback)
            logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫ –∫—Ä–∏–ø—Ç–æ –¥–∞–Ω–Ω—ã—Ö ({len(self.data_subscribers)} –≤—Å–µ–≥–æ)")
    
    def remove_data_subscriber(self, callback: Callable[[MarketDataSnapshot], None]):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –∫—Ä–∏–ø—Ç–æ –¥–∞–Ω–Ω—ã—Ö"""
        if callback in self.data_subscribers:
            self.data_subscribers.remove(callback)
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫ –∫—Ä–∏–ø—Ç–æ –¥–∞–Ω–Ω—ã—Ö")
    
    def add_futures_subscriber(self, callback: Callable[[str, FuturesSnapshot], None]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—å—é—á–µ—Ä—Å–æ–≤"""
        if callback not in self.futures_subscribers:
            self.futures_subscribers.append(callback)
            logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫ —Ñ—å—é—á–µ—Ä—Å–æ–≤ ({len(self.futures_subscribers)} –≤—Å–µ–≥–æ)")
    
    def remove_futures_subscriber(self, callback: Callable[[str, FuturesSnapshot], None]):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ —Ñ—å—é—á–µ—Ä—Å–æ–≤"""
        if callback in self.futures_subscribers:
            self.futures_subscribers.remove(callback)
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫ —Ñ—å—é—á–µ—Ä—Å–æ–≤")
    
    async def _notify_subscribers_async(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫—Ä–∏–ø—Ç–æ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            snapshot = await self.get_market_snapshot()
            if snapshot:
                self.last_snapshot = snapshot
                
                for subscriber in self.data_subscribers.copy():
                    try:
                        subscriber(snapshot)
                        self.stats["subscriber_notifications"] += 1
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–µ –∫—Ä–∏–ø—Ç–æ: {e}")
                        self.stats["errors"] += 1
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫—Ä–∏–ø—Ç–æ: {e}")
    
    async def _notify_futures_subscribers_async(self, symbol: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Ñ—å—é—á–µ—Ä—Å–æ–≤"""
        try:
            snapshot = await self.get_futures_snapshot(symbol)
            if snapshot:
                self.last_futures_snapshots[symbol] = snapshot
                
                for subscriber in self.futures_subscribers.copy():
                    try:
                        subscriber(symbol, snapshot)
                        self.stats["futures_subscriber_notifications"] += 1
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–µ —Ñ—å—é—á–µ—Ä—Å–æ–≤ {symbol}: {e}")
                        self.stats["errors"] += 1
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Ñ—å—é—á–µ—Ä—Å–æ–≤ {symbol}: {e}")
    
    # ========== –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• ==========
    
    async def get_market_snapshot(self, symbol: str = None, force_refresh: bool = False) -> Optional[MarketDataSnapshot]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–Ω–∏–º–æ–∫ –∫—Ä–∏–ø—Ç–æ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            symbol: –ö—Ä–∏–ø—Ç–æ —Å–∏–º–≤–æ–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞)
            force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ REST API
            
        Returns:
            –°–Ω–∏–º–æ–∫ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ None
        """
        try:
            symbol = symbol or self.symbols_crypto[0]
            websocket_data = None
            rest_data = None
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Bybit WebSocket
            if self.bybit_websocket_provider and self.bybit_websocket_provider.is_running():
                websocket_stats = self.bybit_websocket_provider.get_current_stats(symbol)
                if websocket_stats.get("has_sufficient_data"):
                    websocket_data = websocket_stats
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ REST API
            if self.rest_api_provider:
                if force_refresh or self._should_refresh_rest_data():
                    try:
                        rest_data = await self.rest_api_provider.get_comprehensive_market_data(symbol)
                        self.cached_rest_data = rest_data
                        self.last_rest_update = datetime.now()
                        self.stats["bybit_rest_api_calls"] += 1
                        self.stats["last_bybit_rest_data"] = datetime.now()
                        self.stats["cache_misses"] += 1
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ REST –¥–∞–Ω–Ω—ã—Ö: {e}")
                        if self.cached_rest_data:
                            rest_data = self.cached_rest_data
                            self.stats["cache_hits"] += 1
                elif self.cached_rest_data:
                    rest_data = self.cached_rest_data
                    self.stats["cache_hits"] += 1
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–Ω–∏–º–æ–∫
            snapshot = self._create_market_snapshot(symbol, websocket_data, rest_data)
            
            if snapshot:
                self.stats["data_snapshots_created"] += 1
                
            return snapshot
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞ –∫—Ä–∏–ø—Ç–æ: {e}")
            self.stats["errors"] += 1
            return None
    
    async def get_futures_snapshot(self, symbol: str) -> Optional[FuturesSnapshot]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–Ω–∏–º–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–∞
        
        Args:
            symbol: –°–∏–º–≤–æ–ª —Ñ—å—é—á–µ—Ä—Å–∞ (MCL, MGC, MES, MNQ)
            
        Returns:
            –°–Ω–∏–º–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–∞ –∏–ª–∏ None
        """
        try:
            if not self.yfinance_websocket_provider or not self.yfinance_websocket_provider.is_running():
                logger.warning(f"‚ö†Ô∏è YFinance WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {symbol}")
                return None
            
            futures_data = self.yfinance_websocket_provider.get_futures_data(symbol)
            if not futures_data:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–∞ {symbol}")
                return None
            
            snapshot = FuturesSnapshot(
                symbol=symbol,
                timestamp=datetime.now(),
                current_price=futures_data.get_current_price(),
                price_change_1m=futures_data.get_price_change(1),
                price_change_5m=futures_data.get_price_change(5),
                volume=futures_data.get_volume(),
                data_points=len(futures_data.prices),
                data_source=DataSourceType.YFINANCE,
                has_sufficient_data=futures_data.has_sufficient_data()
            )
            
            self.stats["futures_snapshots_created"] += 1
            return snapshot
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞ —Ñ—å—é—á–µ—Ä—Å–∞ {symbol}: {e}")
            self.stats["errors"] += 1
            return None
    
    async def get_all_futures_snapshots(self) -> Dict[str, FuturesSnapshot]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–Ω–∏–º–∫–∏ –≤—Å–µ—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤"""
        snapshots = {}
        for symbol in self.symbols_futures:
            snapshot = await self.get_futures_snapshot(symbol)
            if snapshot:
                snapshots[symbol] = snapshot
        return snapshots
    
    def _should_refresh_rest_data(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å REST –¥–∞–Ω–Ω—ã–µ"""
        if not self.last_rest_update:
            return True
        return datetime.now() - self.last_rest_update > self.rest_cache_duration
    
    def _create_market_snapshot(self, symbol: str, websocket_data: Optional[Dict], rest_data: Optional[Dict]) -> Optional[MarketDataSnapshot]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–Ω–∏–º–æ–∫ –∫—Ä–∏–ø—Ç–æ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not websocket_data and not rest_data:
                return None
            
            current_price = 0
            price_change_1m = 0
            price_change_5m = 0
            data_source = DataSourceType.REST_API
            has_realtime_data = False
            has_historical_data = bool(rest_data)
            
            if websocket_data and websocket_data.get("has_sufficient_data"):
                current_price = websocket_data.get("current_price", 0)
                price_change_1m = websocket_data.get("price_change_1m", 0)
                price_change_5m = websocket_data.get("price_change_5m", 0)
                data_source = DataSourceType.WEBSOCKET if not rest_data else DataSourceType.COMBINED
                has_realtime_data = True
            elif rest_data:
                current_price = rest_data.get("current_price", 0)
                price_change_1m = 0
                price_change_5m = 0
                data_source = DataSourceType.CACHE if self.cached_rest_data == rest_data else DataSourceType.REST_API
            
            if rest_data:
                snapshot = MarketDataSnapshot(
                    symbol=symbol,
                    timestamp=datetime.now(),
                    current_price=current_price,
                    price_change_1m=price_change_1m,
                    price_change_5m=price_change_5m,
                    price_change_24h=rest_data.get("price_change_24h", 0),
                    volume_24h=rest_data.get("volume_24h", 0),
                    high_24h=rest_data.get("high_24h", 0),
                    low_24h=rest_data.get("low_24h", 0),
                    bid_price=rest_data.get("bid_price", 0),
                    ask_price=rest_data.get("ask_price", 0),
                    spread=rest_data.get("spread", 0),
                    open_interest=rest_data.get("open_interest", 0),
                    volume_analysis=rest_data.get("trades_analysis", {}),
                    orderbook_pressure=rest_data.get("orderbook_analysis", {}),
                    trades_analysis=rest_data.get("trades_analysis", {}),
                    hourly_stats=rest_data.get("hourly_stats", {}),
                    data_source=data_source,
                    data_quality=rest_data.get("data_quality", {}),
                    has_realtime_data=has_realtime_data,
                    has_historical_data=has_historical_data
                )
            elif websocket_data:
                snapshot = MarketDataSnapshot(
                    symbol=symbol,
                    timestamp=datetime.now(),
                    current_price=current_price,
                    price_change_1m=price_change_1m,
                    price_change_5m=price_change_5m,
                    price_change_24h=websocket_data.get("price_change_24h", 0),
                    volume_24h=websocket_data.get("volume_24h", 0),
                    high_24h=0,
                    low_24h=0,
                    bid_price=0,
                    ask_price=0,
                    spread=0,
                    open_interest=0,
                    volume_analysis=websocket_data.get("volume_analysis", {}),
                    orderbook_pressure=websocket_data.get("orderbook_pressure", {}),
                    data_source=DataSourceType.WEBSOCKET,
                    has_realtime_data=has_realtime_data,
                    has_historical_data=has_historical_data
                )
            else:
                return None
            
            if websocket_data and rest_data and has_realtime_data:
                ws_volume = websocket_data.get("volume_analysis", {})
                ws_orderbook = websocket_data.get("orderbook_pressure", {})
                
                if ws_volume:
                    snapshot.volume_analysis.update(ws_volume)
                if ws_orderbook:
                    snapshot.orderbook_pressure.update(ws_orderbook)
            
            return snapshot
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞: {e}")
            self.stats["errors"] += 1
            return None
    
    # ========== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ==========
    
    def get_current_price(self, symbol: str = None) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç—ã"""
        try:
            symbol = symbol or self.symbols_crypto[0]
            if self.bybit_websocket_provider and self.bybit_websocket_provider.is_running():
                return self.bybit_websocket_provider.get_market_data(symbol).get_current_price()
            elif self.cached_rest_data:
                return self.cached_rest_data.get("current_price", 0)
            return 0.0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
            return 0.0
    
    def get_futures_price(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ñ—å—é—á–µ—Ä—Å–∞"""
        try:
            if self.yfinance_websocket_provider:
                futures_data = self.yfinance_websocket_provider.get_futures_data(symbol)
                if futures_data:
                    return futures_data.get_current_price()
            return 0.0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
            return 0.0
    
    def get_last_snapshot(self) -> Optional[MarketDataSnapshot]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–Ω–∏–º–æ–∫ –∫—Ä–∏–ø—Ç–æ –¥–∞–Ω–Ω—ã—Ö"""
        return self.last_snapshot
    
    def get_last_futures_snapshot(self, symbol: str) -> Optional[FuturesSnapshot]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–Ω–∏–º–æ–∫ —Ñ—å—é—á–µ—Ä—Å–∞"""
        return self.last_futures_snapshots.get(symbol)
    
    # ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì ==========
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        uptime = datetime.now() - self.stats["start_time"]
        uptime_hours = uptime.total_seconds() / 3600
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        bybit_updates_per_hour = self.stats["bybit_websocket_updates"] / uptime_hours if uptime_hours > 0 else 0
        bybit_calls_per_hour = self.stats["bybit_rest_api_calls"] / uptime_hours if uptime_hours > 0 else 0
        yfinance_updates_per_hour = self.stats["yfinance_websocket_updates"] / uptime_hours if uptime_hours > 0 else 0
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—Ö–∞
        total_ops = (self.stats["bybit_websocket_updates"] + self.stats["bybit_rest_api_calls"] + 
                    self.stats["yfinance_websocket_updates"] + self.stats["data_snapshots_created"] +
                    self.stats["futures_snapshots_created"])
        success_rate = ((total_ops - self.stats["errors"]) / total_ops * 100) if total_ops > 0 else 100
        
        stats_dict = {
            **self.stats,
            
            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            "uptime_seconds": uptime.total_seconds(),
            "uptime_formatted": str(uptime).split('.')[0],
            "uptime_hours": uptime_hours,
            
            # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            "is_running": self.is_running,
            "initialization_complete": self.initialization_complete,
            "bybit_websocket_active": self.bybit_websocket_provider.is_running() if self.bybit_websocket_provider else False,
            "yfinance_websocket_active": self.yfinance_websocket_provider.is_running() if self.yfinance_websocket_provider else False,
            "rest_api_active": bool(self.rest_api_provider),
            "candle_sync_active": self.candle_sync_service.is_running if self.candle_sync_service else False,
            "candle_aggregator_active": self.candle_aggregator.is_running if self.candle_aggregator else False,  # üÜï
            
            # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏
            "data_subscribers_count": len(self.data_subscribers),
            "futures_subscribers_count": len(self.futures_subscribers),
            
            # –ö—ç—à
            "cached_data_available": bool(self.cached_rest_data),
            "cached_data_age_seconds": (datetime.now() - self.last_rest_update).total_seconds() if self.last_rest_update else None,
            "cache_hit_rate": (self.stats["cache_hits"] / (self.stats["cache_hits"] + self.stats["cache_misses"]) * 100) if (self.stats["cache_hits"] + self.stats["cache_misses"]) > 0 else 0,
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            "bybit_updates_per_hour": round(bybit_updates_per_hour, 2),
            "bybit_api_calls_per_hour": round(bybit_calls_per_hour, 2),
            "yfinance_updates_per_hour": round(yfinance_updates_per_hour, 2),
            "success_rate_percent": round(success_rate, 2),
            
            # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            "background_tasks_count": len(self.background_tasks),
            "background_tasks_active": sum(1 for task in self.background_tasks if not task.done()),
            
            # –û—á–µ—Ä–µ–¥–∏
            "bybit_queue_size": self._bybit_event_queue.qsize() if self._bybit_event_queue else 0,
            "yfinance_queue_size": self._yfinance_event_queue.qsize() if self._yfinance_event_queue else 0,
            
            # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            "bybit_reconnect_attempts": self.current_bybit_reconnect_attempts,
            "yfinance_reconnect_attempts": self.current_yfinance_reconnect_attempts,
            "max_reconnect_attempts": self.max_reconnect_attempts
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–≤–µ—á–µ–π
        if self.candle_sync_service:
            stats_dict["candle_sync"] = self.candle_sync_service.get_stats()
        
        # üÜï –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–≤–µ—á–µ–π
        if self.candle_aggregator:
            stats_dict["candle_aggregator"] = self.candle_aggregator.get_stats()
        
        return stats_dict
    
    def get_health_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è"""
        bybit_ws_status = "active" if (self.bybit_websocket_provider and self.bybit_websocket_provider.is_running()) else "inactive"
        yfinance_ws_status = "active" if (self.yfinance_websocket_provider and self.yfinance_websocket_provider.is_running()) else "inactive"
        rest_api_status = "active" if self.rest_api_provider else "inactive"
        candle_sync_status = "active" if (self.candle_sync_service and self.candle_sync_service.is_running) else "inactive"
        candle_aggregator_status = "active" if (self.candle_aggregator and self.candle_aggregator.is_running) else "inactive"  # üÜï
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if not self.initialization_complete:
            overall_status = HealthStatus.INITIALIZING
        elif all(status == "inactive" for status in [bybit_ws_status, yfinance_ws_status, rest_api_status]):
            overall_status = HealthStatus.CRITICAL
        elif bybit_ws_status == "inactive" and rest_api_status == "inactive":
            overall_status = HealthStatus.DEGRADED
        elif self.stats["errors"] > 50:
            overall_status = HealthStatus.DEGRADED
        else:
            overall_status = HealthStatus.HEALTHY
        
        # –°–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        data_freshness = "unknown"
        if self.stats.get("last_bybit_websocket_data"):
            ws_age = (datetime.now() - self.stats["last_bybit_websocket_data"]).total_seconds()
            if ws_age < 60:
                data_freshness = "fresh"
            elif ws_age < 300:
                data_freshness = "stale"
            else:
                data_freshness = "very_stale"
        
        # –°–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö YFinance
        yfinance_freshness = "unknown"
        if self.stats.get("last_yfinance_data"):
            yf_age = (datetime.now() - self.stats["last_yfinance_data"]).total_seconds()
            if yf_age < 300:
                yfinance_freshness = "fresh"
            elif yf_age < 600:
                yfinance_freshness = "stale"
            else:
                yfinance_freshness = "very_stale"
        
        return {
            "overall_status": overall_status.value,
            "components": {
                "bybit_websocket": bybit_ws_status,
                "yfinance_websocket": yfinance_ws_status,
                "rest_api": rest_api_status,
                "candle_sync": candle_sync_status,
                "candle_aggregator": candle_aggregator_status,  # üÜï
                "bybit_event_queue": "healthy" if self._bybit_event_queue and self._bybit_event_queue.qsize() < 800 else "degraded",
                "yfinance_event_queue": "healthy" if self._yfinance_event_queue and self._yfinance_event_queue.qsize() < 800 else "degraded",
                "background_tasks": "active" if any(not task.done() for task in self.background_tasks) else "inactive"
            },
            "data_status": {
                "has_crypto_realtime": bool(self.bybit_websocket_provider and self.bybit_websocket_provider.is_running()),
                "has_futures_realtime": bool(self.yfinance_websocket_provider and self.yfinance_websocket_provider.is_running()),
                "has_historical_data": bool(self.cached_rest_data),
                "crypto_freshness": data_freshness,
                "futures_freshness": yfinance_freshness,
                "current_crypto_price": self.get_current_price(),
                "futures_prices": {symbol: self.get_futures_price(symbol) for symbol in self.symbols_futures},
                "last_snapshot_time": self.last_snapshot.timestamp.isoformat() if self.last_snapshot else None
            },
            "performance": {
                "error_count": self.stats["errors"],
                "bybit_callback_errors": self.stats["bybit_callback_errors"],
                "yfinance_callback_errors": self.stats["yfinance_callback_errors"],
                "bybit_reconnect_attempts": self.current_bybit_reconnect_attempts,
                "yfinance_reconnect_attempts": self.current_yfinance_reconnect_attempts,
                "cache_hit_rate": round((self.stats["cache_hits"] / (self.stats["cache_hits"] + self.stats["cache_misses"]) * 100), 2) if (self.stats["cache_hits"] + self.stats["cache_misses"]) > 0 else 0
            },
            "timestamp": datetime.now().isoformat()
        }
    
    # ========== GRACEFUL SHUTDOWN ==========
    
    async def stop(self):
        """Graceful shutdown –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é graceful shutdown MarketDataManager...")
            
            self.is_running = False
            self.shutdown_event.set()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            if self.background_tasks:
                logger.info(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {len(self.background_tasks)} —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
                for task in self.background_tasks:
                    if not task.done():
                        task.cancel()
                
                if self.background_tasks:
                    await asyncio.gather(*self.background_tasks, return_exceptions=True)
                    logger.info("‚úÖ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
            # üÜï –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CandleAggregator
            if self.candle_aggregator:
                logger.info("üèóÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é CandleAggregator...")
                try:
                    await self.candle_aggregator.stop()
                    logger.info("‚úÖ CandleAggregator –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ CandleAggregator: {e}")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Bybit WebSocket
            if self.bybit_websocket_provider:
                logger.info("üîå –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Bybit WebSocket...")
                await self.bybit_websocket_provider.stop()
                logger.info("‚úÖ Bybit WebSocket –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º YFinance WebSocket
            if self.yfinance_websocket_provider:
                logger.info("üîå –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é YFinance WebSocket...")
                await self.yfinance_websocket_provider.stop()
                logger.info("‚úÖ YFinance WebSocket –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–≤–µ—á–µ–π
            if self.candle_sync_service:
                logger.info("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–≤–µ—á–µ–π...")
                await self.candle_sync_service.stop()
                logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–≤–µ—á–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º REST API
            if self.rest_api_provider:
                logger.info("üì° –ó–∞–∫—Ä—ã–≤–∞—é REST API...")
                await self.rest_api_provider.close()
                logger.info("‚úÖ REST API –∑–∞–∫—Ä—ã—Ç")
            
            # –û—á–∏—â–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            self.data_subscribers.clear()
            self.futures_subscribers.clear()
            
            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥–∏
            for queue_name, queue_obj in [
                ("Bybit", self._bybit_event_queue),
                ("YFinance", self._yfinance_event_queue)
            ]:
                if queue_obj:
                    events_cleared = 0
                    while not queue_obj.empty():
                        try:
                            queue_obj.get_nowait()
                            events_cleared += 1
                        except queue.Empty:
                            break
                    if events_cleared > 0:
                        logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {events_cleared} —Å–æ–±—ã—Ç–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ {queue_name}")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            self.cached_rest_data = None
            self.last_snapshot = None
            self.last_futures_snapshots.clear()
            self._main_loop = None
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            final_stats = self.get_stats()
            logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            logger.info(f"   ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {final_stats['uptime_formatted']}")
            logger.info(f"   ‚Ä¢ Bybit WS –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {final_stats['bybit_websocket_updates']}")
            logger.info(f"   ‚Ä¢ YFinance WS –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {final_stats['yfinance_websocket_updates']}")
            logger.info(f"   ‚Ä¢ REST API –≤—ã–∑–æ–≤–æ–≤: {final_stats['bybit_rest_api_calls']}")
            logger.info(f"   ‚Ä¢ –ö—Ä–∏–ø—Ç–æ —Å–Ω–∏–º–∫–æ–≤: {final_stats['data_snapshots_created']}")
            logger.info(f"   ‚Ä¢ –§—å—é—á–µ—Ä—Å —Å–Ω–∏–º–∫–æ–≤: {final_stats['futures_snapshots_created']}")
            logger.info(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {final_stats['errors']}")
            logger.info(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {final_stats['success_rate_percent']:.1f}%")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if 'candle_sync' in final_stats:
                sync_stats = final_stats['candle_sync']
                logger.info(f"   ‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {sync_stats.get('gaps_found', 0)}")
                logger.info(f"   ‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–æ–≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: {sync_stats.get('gaps_filled', 0)}")
                logger.info(f"   ‚Ä¢ –°–≤–µ—á–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {sync_stats.get('candles_synced', 0)}")
            
            # üÜï –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
            if 'candle_aggregator' in final_stats:
                agg_stats = final_stats['candle_aggregator']
                logger.info(f"   ‚Ä¢ –¢–∏–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {agg_stats.get('ticks_received', 0)}")
                logger.info(f"   ‚Ä¢ –°–≤–µ—á–µ–π —Å–æ–∑–¥–∞–Ω–æ: {agg_stats.get('candles_created', 0)}")
                logger.info(f"   ‚Ä¢ –°–≤–µ—á–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {agg_stats.get('candles_saved', 0)}")
            
            logger.info("üõë MarketDataManager —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ MarketDataManager: {e}")
            logger.error(f"Stack trace: {traceback.format_exc()}")
    
    def __str__(self):
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
        status = "Running" if self.is_running else "Stopped"
        
        providers = []
        if self.bybit_websocket_provider and self.bybit_websocket_provider.is_running():
            providers.append("Bybit-WS")
        if self.yfinance_websocket_provider and self.yfinance_websocket_provider.is_running():
            providers.append("YFinance-WS")
        if self.rest_api_provider:
            providers.append("REST")
        if self.candle_sync_service and self.candle_sync_service.is_running:
            providers.append(f"Sync({len(self.symbols_crypto)})")
        if self.candle_aggregator and self.candle_aggregator.is_running:  # üÜï
            providers.append(f"Aggregator({len(self.symbols_crypto)})")
        
        providers_str = "+".join(providers) if providers else "None"
        health = self.get_health_status()["overall_status"]
        
        return f"MarketDataManager(crypto={len(self.symbols_crypto)}, futures={len(self.symbols_futures)}, status={status}, providers=[{providers_str}], health={health})"
    
    def __repr__(self):
        """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
        stats = self.get_stats()
        return (f"MarketDataManager(crypto_symbols={self.symbols_crypto}, futures_symbols={self.symbols_futures}, "
                f"running={self.is_running}, bybit_ws={stats['bybit_websocket_updates']}, "
                f"yfinance_ws={stats['yfinance_websocket_updates']}, rest={stats['bybit_rest_api_calls']}, "
                f"errors={stats['errors']})")


# Export main components
__all__ = [
    "MarketDataManager",
    "MarketDataSnapshot",
    "FuturesSnapshot",
    "DataSourceType",
    "HealthStatus"
]

logger.info("‚úÖ Market Data Manager module loaded successfully with Multi-Symbol WebSocket + CandleAggregator support")
