"""
Candle Aggregator Service

–ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç WebSocket ticker –¥–∞–Ω–Ω—ã–µ –≤ OHLCV —Å–≤–µ—á–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (1m, 5m, 15m, 1h, 1d)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–≤–µ—á–∏
- Thread-safe –æ–ø–µ—Ä–∞—Ü–∏–∏
"""

import asyncio
import logging
from datetime import datetime, timezone, timedelta
from typing import Dict, Any, List, Optional, Set
from dataclasses import dataclass, field
from decimal import Decimal
from collections import defaultdict
import traceback

from database.models.market_data import MarketDataCandle, CandleInterval
from database.repositories import get_market_data_repository

logger = logging.getLogger(__name__)


@dataclass
class CandleBuilder:
    """–°—Ç—Ä–æ–∏—Ç–µ–ª—å —Å–≤–µ—á–∏ - —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–æ–≤ –≤ OHLCV"""
    
    symbol: str
    interval: str
    open_time: datetime
    close_time: datetime
    
    # OHLCV –¥–∞–Ω–Ω—ã–µ
    open_price: Optional[Decimal] = None
    high_price: Optional[Decimal] = None
    low_price: Optional[Decimal] = None
    close_price: Optional[Decimal] = None
    volume: Decimal = field(default_factory=lambda: Decimal('0'))
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    tick_count: int = 0
    first_tick_time: Optional[datetime] = None
    last_tick_time: Optional[datetime] = None
    
    def update_with_tick(self, price: float, volume: float, timestamp: datetime):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–µ—á—É –Ω–æ–≤—ã–º —Ç–∏–∫–æ–º
        
        Args:
            price: –¶–µ–Ω–∞ —Ç–∏–∫–∞
            volume: –û–±—ä–µ–º —Ç–∏–∫–∞
            timestamp: –í—Ä–µ–º—è —Ç–∏–∫–∞
        """
        price_decimal = Decimal(str(price))
        volume_decimal = Decimal(str(volume))
        
        # –ü–µ—Ä–≤—ã–π —Ç–∏–∫ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º open
        if self.open_price is None:
            self.open_price = price_decimal
            self.high_price = price_decimal
            self.low_price = price_decimal
            self.first_tick_time = timestamp
        
        # –û–±–Ω–æ–≤–ª—è–µ–º high/low
        if self.high_price is None or price_decimal > self.high_price:
            self.high_price = price_decimal
        
        if self.low_price is None or price_decimal < self.low_price:
            self.low_price = price_decimal
        
        # Close –≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞
        self.close_price = price_decimal
        
        # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –æ–±—ä–µ–º
        self.volume += volume_decimal
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        self.tick_count += 1
        self.last_tick_time = timestamp
    
    def is_complete(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–æ—Ç–æ–≤–∞ –ª–∏ —Å–≤–µ—á–∞ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é"""
        return all([
            self.open_price is not None,
            self.high_price is not None,
            self.low_price is not None,
            self.close_price is not None,
            self.tick_count > 0
        ])
    
    def to_market_data_candle(self) -> Optional[MarketDataCandle]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å –≤ MarketDataCandle –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        
        Returns:
            MarketDataCandle –∏–ª–∏ None –µ—Å–ª–∏ —Å–≤–µ—á–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞
        """
        if not self.is_complete():
            logger.warning(f"‚ö†Ô∏è –°–≤–µ—á–∞ {self.symbol} {self.interval} –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é (ticks={self.tick_count})")
            return None
        
        try:
            candle = MarketDataCandle(
                symbol=self.symbol.upper(),
                interval=self.interval,
                open_time=self.open_time,
                close_time=self.close_time,
                open_price=self.open_price,
                high_price=self.high_price,
                low_price=self.low_price,
                close_price=self.close_price,
                volume=self.volume,
                quote_volume=None,  # –ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ –∏–∑ WebSocket —Ç–∏–∫–æ–≤
                number_of_trades=self.tick_count,
                data_source="bybit_websocket",
                raw_data=None
            )
            
            return candle
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–µ—á–∏ {self.symbol} {self.interval}: {e}")
            return None


class CandleAggregator:
    """
    üöÄ –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä WebSocket —Ç–∏–∫–æ–≤ –≤ OHLCV —Å–≤–µ—á–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ ticker updates –æ—Ç WebSocket
    - –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–µ—á–µ–π –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö —Å–≤–µ—á–µ–π –≤ –ë–î
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    """
    
    def __init__(self, 
                 symbols: List[str],
                 intervals: List[str] = None,
                 batch_save: bool = False,
                 batch_size: int = 100):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
        
        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
            intervals: –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1m, 5m, 15m, 1h, 1d)
            batch_save: –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–≤–µ—á–∏ –±–∞—Ç—á–∞–º–∏ (–¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        """
        self.symbols = [s.upper() for s in symbols]
        self.intervals = intervals or ["1m", "5m", "15m", "1h", "1d"]
        self.batch_save = batch_save
        self.batch_size = batch_size
        
        # –¢–µ–∫—É—â–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª–∏ —Å–≤–µ—á–µ–π: {symbol: {interval: CandleBuilder}}
        self.current_builders: Dict[str, Dict[str, CandleBuilder]] = defaultdict(dict)
        
        # –û—á–µ—Ä–µ–¥—å –≥–æ—Ç–æ–≤—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è –±–∞—Ç—á–µ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.pending_candles: List[MarketDataCandle] = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "ticks_received": 0,
            "ticks_by_symbol": defaultdict(int),
            "candles_created": 0,
            "candles_saved": 0,
            "candles_by_interval": defaultdict(int),
            "save_errors": 0,
            "last_tick_time": None,
            "last_save_time": None,
            "start_time": datetime.now()
        }
        
        # Repository –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.repository = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_running = False
        self.save_task = None
        
        logger.info(f"üèóÔ∏è CandleAggregator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   ‚Ä¢ –°–∏–º–≤–æ–ª—ã: {', '.join(self.symbols)}")
        logger.info(f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã: {', '.join(self.intervals)}")
        logger.info(f"   ‚Ä¢ –ë–∞—Ç—á–µ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {batch_save}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ CandleAggregator...")
            
            # –ü–æ–ª—É—á–∞–µ–º repository
            from database.repositories import get_market_data_repository
            self.repository = await get_market_data_repository()
            
            if not self.repository:
                raise RuntimeError("Failed to get MarketDataRepository")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª–∏ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            for symbol in self.symbols:
                await self._initialize_builders_for_symbol(symbol)
            
            self.is_running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if self.batch_save:
                self.save_task = asyncio.create_task(self._periodic_save_task())
            
            logger.info(f"‚úÖ CandleAggregator –∑–∞–ø—É—â–µ–Ω –¥–ª—è {len(self.symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ CandleAggregator: {e}")
            logger.error(traceback.format_exc())
            raise
    
    async def _initialize_builders_for_symbol(self, symbol: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª–∏ —Å–≤–µ—á–µ–π –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        now = datetime.now(timezone.utc)
        
        for interval in self.intervals:
            # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
            open_time, close_time = self._calculate_candle_boundaries(now, interval)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—è
            builder = CandleBuilder(
                symbol=symbol,
                interval=interval,
                open_time=open_time,
                close_time=close_time
            )
            
            self.current_builders[symbol][interval] = builder
            
            logger.debug(f"üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω builder –¥–ª—è {symbol} {interval}: {open_time} - {close_time}")
    
    def _calculate_candle_boundaries(self, timestamp: datetime, interval: str) -> tuple:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã —Å–≤–µ—á–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            timestamp: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–∏
            
        Returns:
            (open_time, close_time)
        """
        interval_enum = CandleInterval(interval)
        interval_seconds = interval_enum.to_seconds()
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        timestamp_seconds = int(timestamp.timestamp())
        interval_start = (timestamp_seconds // interval_seconds) * interval_seconds
        interval_end = interval_start + interval_seconds - 1
        
        open_time = datetime.fromtimestamp(interval_start, tz=timezone.utc)
        close_time = datetime.fromtimestamp(interval_end, tz=timezone.utc)
        
        return open_time, close_time
    
    async def process_ticker_update(self, symbol: str, ticker_data: dict):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –æ—Ç WebSocket
        
        Args:
            symbol: –°–∏–º–≤–æ–ª
            ticker_data: –î–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞ –æ—Ç WebSocket
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            price = float(ticker_data.get('lastPrice', 0))
            volume = float(ticker_data.get('volume24h', 0))
            timestamp = datetime.now(timezone.utc)
            
            if price <= 0:
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è {symbol}: {price}")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats["ticks_received"] += 1
            self.stats["ticks_by_symbol"][symbol] += 1
            self.stats["last_tick_time"] = timestamp
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            symbol = symbol.upper()
            if symbol not in self.current_builders:
                await self._initialize_builders_for_symbol(symbol)
            
            for interval in self.intervals:
                await self._process_tick_for_interval(
                    symbol, interval, price, volume, timestamp
                )
            
            logger.debug(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–∏–∫ {symbol}: ${price:,.2f}, Vol: {volume:,.0f}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–∞ {symbol}: {e}")
            logger.error(traceback.format_exc())
    
    async def _process_tick_for_interval(self, 
                                        symbol: str, 
                                        interval: str,
                                        price: float,
                                        volume: float,
                                        timestamp: datetime):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        try:
            builder = self.current_builders[symbol].get(interval)
            
            if not builder:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç builder –¥–ª—è {symbol} {interval}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª
            if timestamp > builder.close_time:
                # –°–≤–µ—á–∞ –≥–æ—Ç–æ–≤–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                await self._finalize_and_save_candle(symbol, interval)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å
                open_time, close_time = self._calculate_candle_boundaries(timestamp, interval)
                builder = CandleBuilder(
                    symbol=symbol,
                    interval=interval,
                    open_time=open_time,
                    close_time=close_time
                )
                self.current_builders[symbol][interval] = builder
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—è —Ç–∏–∫–æ–º
            builder.update_with_tick(price, volume, timestamp)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–∞ –¥–ª—è {symbol} {interval}: {e}")
    
    async def _finalize_and_save_candle(self, symbol: str, interval: str):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥–æ—Ç–æ–≤—É—é —Å–≤–µ—á—É"""
        try:
            builder = self.current_builders[symbol].get(interval)
            
            if not builder or not builder.is_complete():
                logger.debug(f"üîç –°–≤–µ—á–∞ {symbol} {interval} –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é")
                return
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ MarketDataCandle
            candle = builder.to_market_data_candle()
            
            if not candle:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–µ—á—É {symbol} {interval}")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats["candles_created"] += 1
            self.stats["candles_by_interval"][interval] += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            if self.batch_save:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –±–∞—Ç—á–µ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                self.pending_candles.append(candle)
                logger.debug(f"üì¶ –°–≤–µ—á–∞ {symbol} {interval} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å (—Ä–∞–∑–º–µ—Ä={len(self.pending_candles)})")
                
                # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                if len(self.pending_candles) >= self.batch_size:
                    await self._save_pending_candles()
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É
                await self._save_single_candle(candle)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–≤–µ—á–∏ {symbol} {interval}: {e}")
            logger.error(traceback.format_exc())
            self.stats["save_errors"] += 1
    
    async def _save_single_candle(self, candle: MarketDataCandle):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–Ω—É —Å–≤–µ—á—É –≤ –ë–î"""
        try:
            if not self.repository:
                logger.error("‚ùå Repository –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
            
            success = await self.repository.insert_candle(candle)
            
            if success:
                self.stats["candles_saved"] += 1
                self.stats["last_save_time"] = datetime.now()
                logger.info(f"‚úÖ –°–≤–µ—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {candle.symbol} {candle.interval} @ ${candle.close_price} (O:{candle.open_time})")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–µ—á—É {candle.symbol} {candle.interval}")
                self.stats["save_errors"] += 1
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–∏: {e}")
            self.stats["save_errors"] += 1
    
    async def _save_pending_candles(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –±–∞—Ç—á–µ–º"""
        try:
            if not self.pending_candles:
                return
            
            if not self.repository:
                logger.error("‚ùå Repository –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞—Ç—á–∞ –∏–∑ {len(self.pending_candles)} —Å–≤–µ—á–µ–π...")
            
            inserted, updated = await self.repository.bulk_insert_candles(
                self.pending_candles
            )
            
            self.stats["candles_saved"] += inserted + updated
            self.stats["last_save_time"] = datetime.now()
            
            logger.info(f"‚úÖ –ë–∞—Ç—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {inserted} –Ω–æ–≤—ã—Ö, {updated} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            self.pending_candles.clear()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞: {e}")
            logger.error(traceback.format_exc())
            self.stats["save_errors"] += 1
    
    async def _periodic_save_task(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞—Ç—á–µ–π"""
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        
        while self.is_running:
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(30)
                
                if self.pending_candles:
                    logger.info(f"‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {len(self.pending_candles)} —Å–≤–µ—á–µ–π")
                    await self._save_pending_candles()
                
            except asyncio.CancelledError:
                logger.info("üîÑ –ó–∞–¥–∞—á–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                await asyncio.sleep(5)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ CandleAggregator...")
            self.is_running = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            if self.save_task and not self.save_task.done():
                self.save_task.cancel()
                try:
                    await self.save_task
                except asyncio.CancelledError:
                    pass
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π...")
            
            for symbol in self.symbols:
                for interval in self.intervals:
                    builder = self.current_builders[symbol].get(interval)
                    if builder and builder.is_complete():
                        await self._finalize_and_save_candle(symbol, interval)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –±–∞—Ç—á
            if self.pending_candles:
                await self._save_pending_candles()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            uptime = (datetime.now() - self.stats["start_time"]).total_seconds()
            logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CandleAggregator:")
            logger.info(f"   ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime:.0f}—Å")
            logger.info(f"   ‚Ä¢ –¢–∏–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['ticks_received']}")
            logger.info(f"   ‚Ä¢ –°–≤–µ—á–µ–π —Å–æ–∑–¥–∞–Ω–æ: {self.stats['candles_created']}")
            logger.info(f"   ‚Ä¢ –°–≤–µ—á–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {self.stats['candles_saved']}")
            logger.info(f"   ‚Ä¢ –û—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {self.stats['save_errors']}")
            
            for interval, count in self.stats["candles_by_interval"].items():
                logger.info(f"   ‚Ä¢ {interval}: {count} —Å–≤–µ—á–µ–π")
            
            logger.info("‚úÖ CandleAggregator –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ CandleAggregator: {e}")
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞"""
        uptime = (datetime.now() - self.stats["start_time"]).total_seconds()
        
        return {
            **self.stats,
            "uptime_seconds": uptime,
            "ticks_per_second": self.stats["ticks_received"] / uptime if uptime > 0 else 0,
            "symbols": self.symbols,
            "intervals": self.intervals,
            "active_builders": sum(len(builders) for builders in self.current_builders.values()),
            "pending_candles_count": len(self.pending_candles),
            "is_running": self.is_running
        }


# Export
__all__ = ["CandleAggregator", "CandleBuilder"]
