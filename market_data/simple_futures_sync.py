"""
SimpleFuturesSync - –ù–∞–¥–µ–∂–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ YFinance REST API

–ê–Ω–∞–ª–æ–≥ SimpleCandleSync, –Ω–æ –¥–ª—è CME —Ñ—å—é—á–µ—Ä—Å–æ–≤ (MCL, MGC, MES, MNQ).
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Yahoo Finance API —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É yfinance.

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–≤–µ—á–µ–π —Ñ—å—é—á–µ—Ä—Å–æ–≤
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
- –£—á–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π YFinance –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å SimpleCandleSync (–∫—Ä–∏–ø—Ç–∞)
- –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å

Author: Trading Bot Team
Version: 1.0.0
"""

import asyncio
import logging
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

from database.models.market_data import CandleInterval, MarketDataCandle

logger = logging.getLogger(__name__)


class SyncStatus(Enum):
    """–°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    IDLE = "idle"
    RUNNING = "running"
    SYNCING = "syncing"
    CHECKING_GAPS = "checking_gaps"
    FILLING_GAP = "filling_gap"
    ERROR = "error"
    STOPPED = "stopped"


@dataclass
class FuturesSyncSchedule:
    """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ñ—å—é—á–µ—Ä—Å–æ–≤"""
    interval: str
    sync_period_minutes: int
    lookback_candles: int = 100
    
    def __post_init__(self):
        self.last_sync: Optional[datetime] = None
        self.next_sync: Optional[datetime] = None
        self.sync_count: int = 0
        self.error_count: int = 0
        self.last_error: Optional[str] = None


class SimpleFuturesSync:
    """
    üöÄ –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–≤–µ—á–µ–π
    
    –†–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ SimpleCandleSync, –Ω–æ –¥–ª—è Yahoo Finance —Ñ—å—é—á–µ—Ä—Å–æ–≤:
    - –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–µ—á–∏ —á–µ—Ä–µ–∑ YFinance REST API
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    - –ó–∞–ø–æ–ª–Ω—è–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏
    - –†–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å SimpleCandleSync (–∫—Ä–∏–ø—Ç–∞)
    
    YFinance –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é:
    - 1m: –º–∞–∫—Å–∏–º—É–º 7 –¥–Ω–µ–π
    - 5m, 15m: –º–∞–∫—Å–∏–º—É–º 60 –¥–Ω–µ–π
    - 1h: –º–∞–∫—Å–∏–º—É–º 730 –¥–Ω–µ–π (2 –≥–æ–¥–∞)
    - 1d, 1w: –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    """
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è YFinance –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    YFINANCE_LIMITS = {
        "1m": timedelta(days=7),
        "5m": timedelta(days=60),
        "15m": timedelta(days=60),
        "1h": timedelta(days=730),
        "4h": timedelta(days=730),
        "1d": timedelta(days=36500),
        "1w": timedelta(days=36500)
    }
    
    def __init__(
        self,
        symbols: List[str],
        repository,
        check_gaps_on_start: bool = True,
        max_gap_fill_attempts: int = 3
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SimpleFuturesSync
        
        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (MCL, MGC, MES, MNQ)
            repository: MarketDataRepository –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
            check_gaps_on_start: –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            max_gap_fill_attempts: –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫
        """
        self.symbols = symbols
        self.repository = repository
        self.check_gaps_on_start = check_gaps_on_start
        self.max_gap_fill_attempts = max_gap_fill_attempts
        
        # –°—Ç–∞—Ç—É—Å
        self.is_running = False
        self.status = SyncStatus.IDLE
        self.start_time: Optional[datetime] = None
        
        # –ó–∞–¥–∞—á–∏
        self._sync_task: Optional[asyncio.Task] = None
        self._tasks: List[asyncio.Task] = []
        
        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        self.schedule: List[FuturesSyncSchedule] = [
            FuturesSyncSchedule(interval="1m", sync_period_minutes=1, lookback_candles=60),
            FuturesSyncSchedule(interval="5m", sync_period_minutes=5, lookback_candles=50),
            FuturesSyncSchedule(interval="15m", sync_period_minutes=15, lookback_candles=40),
            FuturesSyncSchedule(interval="1h", sync_period_minutes=60, lookback_candles=25),
            FuturesSyncSchedule(interval="4h", sync_period_minutes=240, lookback_candles=20),
            FuturesSyncSchedule(interval="1d", sync_period_minutes=1440, lookback_candles=10)
        ]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "start_time": None,
            "total_syncs": 0,
            "successful_syncs": 0,
            "failed_syncs": 0,
            "candles_synced": 0,
            "gaps_found": 0,
            "gaps_filled": 0,
            "yfinance_calls": 0,
            "yfinance_errors": 0,
            "last_sync": None,
            "last_error": None
        }
        
        # YFinance client (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
        self.yf = None
        
        logger.info(f"üèóÔ∏è SimpleFuturesSync initialized")
        logger.info(f"   ‚Ä¢ Symbols: {', '.join(symbols)}")
        logger.info(f"   ‚Ä¢ Check gaps on start: {check_gaps_on_start}")
        logger.info(f"   ‚Ä¢ Intervals: {[s.interval for s in self.schedule]}")
    
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        if self.is_running:
            logger.warning("SimpleFuturesSync —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ SimpleFuturesSync...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å yfinance
            try:
                import yfinance as yf
                self.yf = yf
                logger.info("‚úÖ yfinance library loaded")
            except ImportError as e:
                error_msg = f"yfinance not installed: {e}"
                logger.error(f"‚ùå {error_msg}")
                raise ImportError("Install with: pip install yfinance") from e
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            if not self.repository:
                raise Exception("Repository not initialized")
            
            self.is_running = True
            self.status = SyncStatus.RUNNING
            self.start_time = datetime.now(timezone.utc)
            self.stats["start_time"] = self.start_time
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            if self.check_gaps_on_start:
                logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤...")
                await self._check_all_gaps()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            self._sync_task = asyncio.create_task(self._sync_loop())
            self._tasks.append(self._sync_task)
            
            logger.info("‚úÖ SimpleFuturesSync –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(self._tasks)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ SimpleFuturesSync: {e}")
            self.is_running = False
            self.status = SyncStatus.ERROR
            self.stats["last_error"] = str(e)
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        if not self.is_running:
            logger.warning("SimpleFuturesSync —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ SimpleFuturesSync...")
        
        self.is_running = False
        self.status = SyncStatus.STOPPED
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task in self._tasks:
            if not task.done():
                task.cancel()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        if self._tasks:
            await asyncio.gather(*self._tasks, return_exceptions=True)
        
        self._tasks.clear()
        self._sync_task = None
        
        logger.info("‚úÖ SimpleFuturesSync –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _sync_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤")
        
        while self.is_running:
            try:
                current_time = datetime.now(timezone.utc)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                for schedule in self.schedule:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è next_sync –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
                    if schedule.next_sync is None:
                        schedule.next_sync = current_time
                    
                    # –ü–æ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å?
                    if current_time >= schedule.next_sync:
                        await self._sync_interval(schedule)
                
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except asyncio.CancelledError:
                logger.info("–¶–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
                self.stats["failed_syncs"] += 1
                self.stats["last_error"] = str(e)
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
    
    async def _sync_interval(self, schedule: FuturesSyncSchedule):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        
        Args:
            schedule: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        """
        interval = schedule.interval
        
        try:
            self.status = SyncStatus.SYNCING
            logger.info(f"üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {interval} –¥–ª—è {len(self.symbols)} —Ñ—å—é—á–µ—Ä—Å–æ–≤...")
            
            sync_start = datetime.now(timezone.utc)
            total_synced = 0
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
            for symbol in self.symbols:
                try:
                    synced = await self._sync_candles(
                        symbol=symbol,
                        interval=interval,
                        lookback_candles=schedule.lookback_candles
                    )
                    total_synced += synced
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {symbol} {interval}: {e}")
                    schedule.error_count += 1
                    schedule.last_error = str(e)
                    self.stats["yfinance_errors"] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            schedule.last_sync = sync_start
            schedule.next_sync = sync_start + timedelta(minutes=schedule.sync_period_minutes)
            schedule.sync_count += 1
            
            self.stats["total_syncs"] += 1
            self.stats["successful_syncs"] += 1
            self.stats["candles_synced"] += total_synced
            self.stats["last_sync"] = sync_start
            
            duration = (datetime.now(timezone.utc) - sync_start).total_seconds()
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {interval} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {total_synced} —Å–≤–µ—á–µ–π –∑–∞ {duration:.1f}s")
            logger.info(f"   ‚Ä¢ –°–ª–µ–¥—É—é—â–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {schedule.next_sync.strftime('%H:%M:%S')}")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {interval}: {e}")
            schedule.error_count += 1
            schedule.last_error = str(e)
            self.stats["failed_syncs"] += 1
            self.stats["last_error"] = str(e)
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
            schedule.next_sync = datetime.now(timezone.utc) + timedelta(minutes=1)
        
        finally:
            self.status = SyncStatus.RUNNING
    
    async def _sync_candles(self, symbol: str, interval: str, lookback_candles: int) -> int:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–≤–µ—á–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        
        Args:
            symbol: –§—å—é—á–µ—Ä—Å–Ω—ã–π —Å–∏–º–≤–æ–ª (MCL, MGC, MES, MNQ)
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π
            lookback_candles: –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –∑–∞–≥—Ä—É–∑–∏—Ç—å
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É –∏–∑ –ë–î
            last_candle_time = await self.repository.get_latest_candle_time(symbol, interval)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏
            end_time = datetime.now(timezone.utc)
            
            if last_candle_time:
                # –î–æ–≥—Ä—É–∂–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å–≤–µ—á–∏
                start_time = last_candle_time
                logger.debug(f"üì• {symbol} {interval}: –¥–æ–≥—Ä—É–∑–∫–∞ —Å {start_time.strftime('%Y-%m-%d %H:%M')}")
            else:
                # –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –±–µ—Ä–µ–º lookback_candles
                interval_enum = CandleInterval(interval)
                interval_seconds = interval_enum.to_seconds()
                
                start_time = end_time - timedelta(seconds=interval_seconds * lookback_candles)
                logger.debug(f"üì• {symbol} {interval}: –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, {lookback_candles} —Å–≤–µ—á–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è YFinance
            max_history = self.YFINANCE_LIMITS.get(interval, timedelta(days=730))
            min_allowed_start = end_time - max_history
            
            if start_time < min_allowed_start:
                logger.warning(f"‚ö†Ô∏è {symbol} {interval}: start_time {start_time.date()} —Å—Ç–∞—Ä—à–µ –ª–∏–º–∏—Ç–∞ YFinance")
                logger.warning(f"   ‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é –Ω–∞ {min_allowed_start.date()}")
                start_time = min_allowed_start
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ YFinance
            candles = await self._fetch_yfinance_data(symbol, interval, start_time, end_time)
            
            if not candles:
                logger.debug(f"üì≠ {symbol} {interval}: –Ω–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                return 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            candle_objects = []
            
            for candle_dict in candles:
                try:
                    candle = MarketDataCandle.create_from_yfinance_data(
                        symbol=symbol,
                        interval=interval,
                        yf_data=candle_dict
                    )
                    candle_objects.append(candle)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–≤–µ—á–∏ {symbol}: {e}")
                    continue
            
            if candle_objects:
                inserted, updated = await self.repository.bulk_insert_candles(
                    candles=candle_objects,
                    batch_size=500
                )
                
                total_saved = inserted + updated
                logger.info(f"‚úÖ {symbol} {interval}: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {total_saved} —Å–≤–µ—á–µ–π (insert={inserted}, update={updated})")
                return total_saved
            
            return 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {symbol} {interval}: {e}")
            raise
    
    async def _fetch_yfinance_data(
        self, 
        symbol: str, 
        interval: str, 
        start_time: datetime, 
        end_time: datetime
    ) -> List[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ YFinance API
        
        Args:
            symbol: –§—å—é—á–µ—Ä—Å–Ω—ã–π —Å–∏–º–≤–æ–ª
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π
            start_time: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
            end_time: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ Dict
        """
        try:
            self.stats["yfinance_calls"] += 1
            
            # YFinance –º–∞–ø–ø–∏–Ω–≥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            yf_interval_map = {
                "1m": "1m",
                "5m": "5m",
                "15m": "15m",
                "1h": "1h",
                "4h": "4h",
                "1d": "1d",
                "1w": "1wk"
            }
            
            yf_interval = yf_interval_map.get(interval, interval)
            
            # –°–æ–∑–¥–∞–µ–º ticker
            ticker = self.yf.Ticker(symbol)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –≤ executor
            loop = asyncio.get_event_loop()
            df = await loop.run_in_executor(
                None,
                lambda: ticker.history(
                    start=start_time,
                    end=end_time,
                    interval=yf_interval,
                    auto_adjust=False,
                    actions=False
                )
            )
            
            if df.empty:
                logger.debug(f"üì≠ YFinance: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} {interval}")
                return []
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DataFrame –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            candles = []
            for index, row in df.iterrows():
                candle_dict = {
                    "Datetime": index.to_pydatetime(),
                    "Open": row["Open"],
                    "High": row["High"],
                    "Low": row["Low"],
                    "Close": row["Close"],
                    "Volume": row["Volume"]
                }
                candles.append(candle_dict)
            
            logger.debug(f"‚úÖ YFinance: –ø–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol} {interval}")
            return candles
            
        except Exception as e:
            logger.error(f"‚ùå YFinance API error –¥–ª—è {symbol} {interval}: {e}")
            self.stats["yfinance_errors"] += 1
            raise
    
    async def _check_all_gaps(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤–æ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–∞—Ö –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö"""
        self.status = SyncStatus.CHECKING_GAPS
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤...")
        
        gaps_found = 0
        
        for symbol in self.symbols:
            for schedule in self.schedule:
                interval = schedule.interval
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
                    expected_end = datetime.now(timezone.utc)
                    gap_info = await self.repository.check_data_gaps(
                        symbol=symbol,
                        interval=interval,
                        expected_end=expected_end
                    )
                    
                    if gap_info and gap_info.get("has_gap"):
                        gaps_found += 1
                        self.stats["gaps_found"] += 1
                        
                        gap_start = gap_info.get("gap_start")
                        gap_end = gap_info.get("gap_end")
                        missing = gap_info.get("missing_candles", "unknown")
                        
                        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –Ω–∞–π–¥–µ–Ω: {symbol} {interval}")
                        logger.warning(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {gap_start} ‚Üí {gap_end}")
                        logger.warning(f"   ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞–µ—Ç —Å–≤–µ—á–µ–π: {missing}")
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫
                        await self._fill_gap(symbol, interval, gap_start, gap_end)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤ {symbol} {interval}: {e}")
        
        if gaps_found > 0:
            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –Ω–∞–π–¥–µ–Ω–æ {gaps_found} –ø—Ä–æ–ø—É—Å–∫–æ–≤")
        else:
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –ø—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        self.status = SyncStatus.RUNNING
    
    async def _fill_gap(
        self, 
        symbol: str, 
        interval: str, 
        gap_start: Optional[datetime], 
        gap_end: datetime
    ):
        """
        –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞
        
        Args:
            symbol: –§—å—é—á–µ—Ä—Å–Ω—ã–π —Å–∏–º–≤–æ–ª
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π
            gap_start: –ù–∞—á–∞–ª–æ –ø—Ä–æ–ø—É—Å–∫–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å None –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ–æ–±—â–µ –Ω–µ—Ç)
            gap_end: –ö–æ–Ω–µ—Ü –ø—Ä–æ–ø—É—Å–∫–∞
        """
        self.status = SyncStatus.FILLING_GAP
        logger.info(f"üîß –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞: {symbol} {interval}")
        
        try:
            # –ï—Å–ª–∏ gap_start is None - –∑–∞–≥—Ä—É–∂–∞–µ–º –º–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
            if gap_start is None:
                max_history = self.YFINANCE_LIMITS.get(interval, timedelta(days=730))
                gap_start = gap_end - max_history
                logger.info(f"   ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏: {max_history.days} –¥–Ω–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã YFinance
            max_history = self.YFINANCE_LIMITS.get(interval, timedelta(days=730))
            min_allowed_start = gap_end - max_history
            
            if gap_start < min_allowed_start:
                logger.warning(f"‚ö†Ô∏è gap_start {gap_start.date()} —Å—Ç–∞—Ä—à–µ –ª–∏–º–∏—Ç–∞ YFinance")
                gap_start = min_allowed_start
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            candles = await self._fetch_yfinance_data(symbol, interval, gap_start, gap_end)
            
            if not candles:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ {symbol} {interval}")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            candle_objects = []
            
            for candle_dict in candles:
                try:
                    candle = MarketDataCandle.create_from_yfinance_data(
                        symbol=symbol,
                        interval=interval,
                        yf_data=candle_dict
                    )
                    candle_objects.append(candle)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–≤–µ—á–∏: {e}")
                    continue
            
            if candle_objects:
                inserted, updated = await self.repository.bulk_insert_candles(
                    candles=candle_objects,
                    batch_size=500
                )
                
                total_saved = inserted + updated
                self.stats["gaps_filled"] += 1
                logger.info(f"‚úÖ –ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω: {symbol} {interval}, {total_saved} —Å–≤–µ—á–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ {symbol} {interval}: {e}")
        
        finally:
            self.status = SyncStatus.RUNNING
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã"""
        uptime = None
        if self.start_time:
            uptime = datetime.now(timezone.utc) - self.start_time
        
        return {
            **self.stats,
            "uptime_seconds": uptime.total_seconds() if uptime else 0,
            "uptime_formatted": str(uptime).split('.')[0] if uptime else "0:00:00",
            "is_running": self.is_running,
            "status": self.status.value,
            "symbols": self.symbols,
            "intervals": [s.interval for s in self.schedule],
            "schedule_details": [
                {
                    "interval": s.interval,
                    "sync_period_minutes": s.sync_period_minutes,
                    "last_sync": s.last_sync.isoformat() if s.last_sync else None,
                    "next_sync": s.next_sync.isoformat() if s.next_sync else None,
                    "sync_count": s.sync_count,
                    "error_count": s.error_count,
                    "last_error": s.last_error
                }
                for s in self.schedule
            ]
        }
    
    def get_health_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        is_healthy = (
            self.is_running and
            self.status in [SyncStatus.RUNNING, SyncStatus.SYNCING] and
            self.stats["yfinance_errors"] < 10
        )
        
        return {
            "healthy": is_healthy,
            "status": self.status.value,
            "is_running": self.is_running,
            "total_syncs": self.stats["total_syncs"],
            "successful_syncs": self.stats["successful_syncs"],
            "failed_syncs": self.stats["failed_syncs"],
            "yfinance_errors": self.stats["yfinance_errors"],
            "last_sync": self.stats["last_sync"].isoformat() if self.stats["last_sync"] else None,
            "last_error": self.stats["last_error"]
        }
    
    def __repr__(self):
        return (f"SimpleFuturesSync(symbols={self.symbols}, "
                f"status={self.status.value}, "
                f"synced={self.stats['candles_synced']})")


# Export
__all__ = [
    "SimpleFuturesSync",
    "FuturesSyncSchedule",
    "SyncStatus"
]

logger.info("SimpleFuturesSync module loaded successfully")
