import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Callable
from collections import deque
from pybit.unified_trading import WebSocket
from config import Config
import traceback
import json

logger = logging.getLogger(__name__)


class RealtimeMarketData:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self, max_history: int = 1000):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            max_history: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
        """
        self.prices = deque(maxlen=max_history)
        self.volumes = deque(maxlen=max_history)
        self.timestamps = deque(maxlen=max_history)
        self.current_ticker = {}
        self.current_orderbook = {}
        self.recent_trades = deque(maxlen=100)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.stats = {
            "ticker_updates": 0,
            "orderbook_updates": 0,
            "trades_updates": 0,
            "last_ticker_update": None,
            "last_orderbook_update": None,
            "last_trades_update": None
        }
        
        # ‚úÖ –ù–û–í–û–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.last_summary_log = None
        
        logger.info(f"üìä RealtimeMarketData –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (max_history={max_history})")
        
    def update_ticker(self, ticker_data: dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞"""
        try:
            logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞: {json.dumps(ticker_data, indent=2)}")
            
            self.current_ticker = ticker_data
            self.stats["ticker_updates"] += 1
            self.stats["last_ticker_update"] = datetime.now()
            
            price = float(ticker_data.get('lastPrice', 0))
            volume = float(ticker_data.get('volume24h', 0))
            timestamp = datetime.now()
            
            if price > 0:  # –í–∞–ª–∏–¥–Ω–∞—è —Ü–µ–Ω–∞
                self.prices.append(price)
                self.volumes.append(volume)  
                self.timestamps.append(timestamp)
                
                # ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
                if self.last_summary_log is None or (datetime.now() - self.last_summary_log).total_seconds() > 60:
                    logger.info(f"üìä Ticker –æ–±–Ω–æ–≤–ª–µ–Ω: ${price:,.2f}, Vol: {volume:,.0f} BTC, Updates: {self.stats['ticker_updates']}")
                    self.last_summary_log = datetime.now()
                else:
                    logger.debug(f"üìä Ticker –æ–±–Ω–æ–≤–ª–µ–Ω: ${price:,.2f}, Vol: {volume:,.0f} BTC, Updates: {self.stats['ticker_updates']}")
            else:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ü–µ–Ω–∞: {price}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞: {e}")
            logger.error(f"Raw ticker data: {ticker_data}")
            
    def update_orderbook(self, orderbook_data: dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω–∞"""
        try:
            logger.debug(f"üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–∞: bids={len(orderbook_data.get('b', []))}, asks={len(orderbook_data.get('a', []))}")
            
            self.current_orderbook = orderbook_data
            self.stats["orderbook_updates"] += 1
            self.stats["last_orderbook_update"] = datetime.now()
            
            logger.debug(f"üìã Orderbook –æ–±–Ω–æ–≤–ª–µ–Ω, updates: {self.stats['orderbook_updates']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–±—É–∫–∞: {e}")
            logger.error(f"Raw orderbook data: {orderbook_data}")
    
    def update_trades(self, trades_data: list):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫"""
        try:
            logger.debug(f"üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–æ–≤: {len(trades_data)} —Å–¥–µ–ª–æ–∫")
            
            for trade in trades_data:
                self.recent_trades.append({
                    'price': float(trade.get('price', 0)),
                    'qty': float(trade.get('size', 0)),
                    'side': trade.get('side', ''),
                    'time': trade.get('time', ''),
                    'timestamp': datetime.now()
                })
                
            self.stats["trades_updates"] += 1
            self.stats["last_trades_update"] = datetime.now()
            
            logger.debug(f"üí∞ Trades –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(trades_data)} —Å–¥–µ–ª–æ–∫, Total updates: {self.stats['trades_updates']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤: {e}")
            logger.error(f"Raw trades data: {trades_data}")
    
    def get_price_change(self, minutes: int) -> float:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ N –º–∏–Ω—É—Ç –≤ %
        
        Args:
            minutes: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        """
        if len(self.prices) < 2 or len(self.timestamps) < 2:
            logger.debug(f"üîç –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ {minutes}–º: prices={len(self.prices)}, timestamps={len(self.timestamps)}")
            return 0.0
            
        current_price = self.prices[-1]
        target_time = datetime.now() - timedelta(minutes=minutes)
        
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ü–µ–Ω—É –∫ –Ω—É–∂–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        for i, ts in enumerate(reversed(self.timestamps)):
            if ts <= target_time:
                old_price = self.prices[-(i+1)]
                if old_price > 0:
                    change = (current_price - old_price) / old_price * 100
                    logger.debug(f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ {minutes}–º: {change:+.2f}% (${old_price:,.2f} ‚Üí ${current_price:,.2f})")
                    return change
                break
                
        logger.debug(f"üîç –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {minutes}–º –Ω–∞–∑–∞–¥")
        return 0.0
    
    def get_current_price(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É"""
        price = self.prices[-1] if self.prices else 0.0
        logger.debug(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${price:,.2f}")
        return price
    
    def get_volume_24h(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–º –∑–∞ 24—á"""
        volume = float(self.current_ticker.get('volume24h', 0))
        logger.debug(f"üì¶ –û–±—ä–µ–º 24—á: {volume:,.0f} BTC")
        return volume
    
    def get_price_change_24h(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 24—á –≤ %"""
        change = float(self.current_ticker.get('price24hPcnt', 0)) * 100
        logger.debug(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {change:+.2f}%")
        return change
        
    def get_volume_analysis(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤ —Ç–æ—Ä–≥–æ–≤"""
        try:
            if not self.recent_trades:
                logger.debug("üìä –ù–µ—Ç —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤")
                return {"buy_volume": 0, "sell_volume": 0, "buy_sell_ratio": 0}
                
            buy_volume = sum(trade['qty'] for trade in self.recent_trades if trade['side'] == 'Buy')
            sell_volume = sum(trade['qty'] for trade in self.recent_trades if trade['side'] == 'Sell')
            
            total_volume = buy_volume + sell_volume
            buy_sell_ratio = buy_volume / total_volume if total_volume > 0 else 0
            
            analysis = {
                "buy_volume": buy_volume,
                "sell_volume": sell_volume, 
                "buy_sell_ratio": buy_sell_ratio,
                "total_trades": len(self.recent_trades)
            }
            
            logger.debug(f"üìä –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤: B={buy_volume:.0f}, S={sell_volume:.0f}, Ratio={buy_sell_ratio:.2f}")
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤: {e}")
            return {"buy_volume": 0, "sell_volume": 0, "buy_sell_ratio": 0}
    
    def get_orderbook_pressure(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—Ä–¥–µ—Ä–±—É–∫–µ"""
        try:
            orderbook = self.current_orderbook
            if not orderbook.get('b') or not orderbook.get('a'):
                logger.debug("üìã –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–±—É–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–≤–ª–µ–Ω–∏—è")
                return {"bid_pressure": 0, "ask_pressure": 0, "pressure_ratio": 0}
                
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —É—Ä–æ–≤–Ω–µ–π
            bids = orderbook['b'][:10] if len(orderbook['b']) >= 10 else orderbook['b']
            asks = orderbook['a'][:10] if len(orderbook['a']) >= 10 else orderbook['a']
            
            bid_volume = sum(float(bid[1]) for bid in bids)
            ask_volume = sum(float(ask[1]) for ask in asks)
            
            total_volume = bid_volume + ask_volume
            pressure_ratio = bid_volume / total_volume if total_volume > 0 else 0.5
            
            pressure = {
                "bid_pressure": bid_volume,
                "ask_pressure": ask_volume,
                "pressure_ratio": pressure_ratio,
                "total_orderbook_volume": total_volume
            }
            
            logger.debug(f"üìã –î–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–∞: Bids={bid_volume:.0f}, Asks={ask_volume:.0f}, Ratio={pressure_ratio:.2f}")
            return pressure
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ä–¥–µ—Ä–±—É–∫–∞: {e}")
            return {"bid_pressure": 0, "ask_pressure": 0, "pressure_ratio": 0}
    
    def has_sufficient_data(self, min_data_points: int = 10) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        sufficient = len(self.prices) >= min_data_points
        logger.debug(f"üîç –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {sufficient} (–µ—Å—Ç—å {len(self.prices)}, –Ω—É–∂–Ω–æ {min_data_points})")
        return sufficient
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        return {
            **self.stats,
            "data_points": len(self.prices),
            "volume_points": len(self.volumes),
            "timestamp_points": len(self.timestamps),
            "recent_trades_count": len(self.recent_trades),
            "has_ticker_data": bool(self.current_ticker),
            "has_orderbook_data": bool(self.current_orderbook)
        }


class WebSocketProvider:
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä WebSocket –¥–∞–Ω–Ω—ã—Ö –æ—Ç Bybit —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π"""
    
    def __init__(self, symbol: str = None, testnet: bool = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ Config)
            testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å testnet (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ Config)
        """
        self.symbol = symbol or Config.SYMBOL
        self.testnet = testnet if testnet is not None else Config.BYBIT_TESTNET
        self.market_data = RealtimeMarketData()
        self.ws = None
        self.running = False
        
        # Callback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        self.ticker_callbacks: List[Callable] = []
        self.orderbook_callbacks: List[Callable] = []
        self.trades_callbacks: List[Callable] = []
        
        # ‚úÖ –ù–û–í–û–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è WebSocket
        self.last_summary_log = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connection_stats = {
            "connection_attempts": 0,
            "successful_connections": 0,
            "connection_failures": 0,
            "messages_received": 0,
            "ticker_messages": 0,
            "orderbook_messages": 0,
            "trades_messages": 0,
            "unknown_messages": 0,
            "error_messages": 0,
            "last_message_time": None,
            "start_time": None
        }
        
        logger.info(f"üîå WebSocketProvider –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.symbol}, testnet={self.testnet}")
        
    def add_ticker_callback(self, callback: Callable[[dict], None]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–∏–∫–µ—Ä–∞"""
        self.ticker_callbacks.append(callback)
        logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω ticker callback ({len(self.ticker_callbacks)} –≤—Å–µ–≥–æ)")
        
    def add_orderbook_callback(self, callback: Callable[[dict], None]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
        self.orderbook_callbacks.append(callback)
        logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω orderbook callback ({len(self.orderbook_callbacks)} –≤—Å–µ–≥–æ)")
        
    def add_trades_callback(self, callback: Callable[[list], None]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç—Ä–µ–π–¥–æ–≤"""
        self.trades_callbacks.append(callback)
        logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω trades callback ({len(self.trades_callbacks)} –≤—Å–µ–≥–æ)")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            self.connection_stats["connection_attempts"] += 1
            self.connection_stats["start_time"] = datetime.now()
            
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è {self.symbol}...")
            logger.info(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏: testnet={self.testnet}, symbol={self.symbol}")
            
            # –°–æ–∑–¥–∞–µ–º WebSocket –¥–ª—è linear (USDT –ø–µ—Ä–ø–µ—Ç—É–∞–ª—ã)
            logger.info("üîó –°–æ–∑–¥–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            self.ws = WebSocket(
                testnet=self.testnet,
                channel_type="linear"
            )
            
            logger.info("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω—É–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            logger.info(f"üìä –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ticker stream: {self.symbol}")
            self.ws.ticker_stream(self.symbol, self._handle_ticker)
            
            logger.info(f"üìã –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ orderbook stream: {self.symbol} (50 levels)")
            self.ws.orderbook_stream(50, self.symbol, self._handle_orderbook)
            
            logger.info(f"üí∞ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ trade stream: {self.symbol}")
            self.ws.trade_stream(self.symbol, self._handle_trades)
            
            self.running = True
            self.connection_stats["successful_connections"] += 1
            
            logger.info(f"‚úÖ WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è {self.symbol}")
            logger.info(f"üìû Registered callbacks: ticker={len(self.ticker_callbacks)}, orderbook={len(self.orderbook_callbacks)}, trades={len(self.trades_callbacks)}")
            
        except Exception as e:
            self.connection_stats["connection_failures"] += 1
            logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")
            logger.error(f"Stack trace: {traceback.format_exc()}")
            self.running = False
            raise
    
    def _handle_ticker(self, message: dict):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–∏–∫–µ—Ä–∞"""
        try:
            self.connection_stats["messages_received"] += 1
            self.connection_stats["last_message_time"] = datetime.now()
            
            logger.debug(f"üì® –ü–æ–ª—É—á–µ–Ω–æ ticker —Å–æ–æ–±—â–µ–Ω–∏–µ: {json.dumps(message, indent=2)}")
            
            msg_type = message.get('type')
            logger.debug(f"üìä Ticker message type: {msg_type}")
            
            if msg_type == 'snapshot' and message.get('data'):
                self.connection_stats["ticker_messages"] += 1
                data = message['data']
                
                # ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É –≤–º–µ—Å—Ç–æ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if self.last_summary_log is None or (datetime.now() - self.last_summary_log).total_seconds() > 60:
                    logger.info(f"üìä WebSocket –∞–∫—Ç–∏–≤–µ–Ω: {self.connection_stats['ticker_messages']} ticker updates, —Ü–µ–Ω–∞: ${float(data.get('lastPrice', 0)):,.2f}")
                    self.last_summary_log = datetime.now()
                else:
                    logger.debug(f"üìä Ticker data –ø–æ–ª—É—á–µ–Ω—ã: —Ü–µ–Ω–∞ ${float(data.get('lastPrice', 0)):,.2f}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
                self.market_data.update_ticker(data)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                logger.debug(f"üìû –í—ã–∑–æ–≤ {len(self.ticker_callbacks)} ticker callbacks...")
                for i, callback in enumerate(self.ticker_callbacks):
                    try:
                        logger.debug(f"üìû –í—ã–∑–æ–≤ ticker callback #{i}")
                        callback(data)
                        logger.debug(f"‚úÖ Ticker callback #{i} –≤—ã–ø–æ–ª–Ω–µ–Ω")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ ticker callback #{i}: {e}")
                        logger.error(f"Stack trace: {traceback.format_exc()}")
                
                logger.debug(f"‚úÖ Ticker callbacks –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
                
            elif msg_type == 'delta':
                logger.debug(f"üìä –ü–æ–ª—É—á–µ–Ω ticker delta: {message}")
                # –ú–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–ª—å—Ç–∞-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                pass
            else:
                self.connection_stats["unknown_messages"] += 1
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø ticker —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_type}")
                logger.debug(f"Full message: {json.dumps(message, indent=2)}")
                
        except Exception as e:
            self.connection_stats["error_messages"] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ticker —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            logger.error(f"Raw message: {message}")
            logger.error(f"Stack trace: {traceback.format_exc()}")
    
    def _handle_orderbook(self, message: dict):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
        try:
            self.connection_stats["messages_received"] += 1
            self.connection_stats["last_message_time"] = datetime.now()
            
            logger.debug(f"üì® –ü–æ–ª—É—á–µ–Ω–æ orderbook —Å–æ–æ–±—â–µ–Ω–∏–µ: type={message.get('type')}")
            
            msg_type = message.get('type')
            
            if msg_type == 'snapshot' and message.get('data'):
                self.connection_stats["orderbook_messages"] += 1
                data = message['data']
                
                logger.debug(f"üìã Orderbook data: bids={len(data.get('b', []))}, asks={len(data.get('a', []))}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
                self.market_data.update_orderbook(data)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                logger.debug(f"üìû –í—ã–∑–æ–≤ {len(self.orderbook_callbacks)} orderbook callbacks...")
                for i, callback in enumerate(self.orderbook_callbacks):
                    try:
                        callback(data)
                        logger.debug(f"‚úÖ Orderbook callback #{i} –≤—ã–ø–æ–ª–Ω–µ–Ω")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ orderbook callback #{i}: {e}")
                
            elif msg_type == 'delta':
                logger.debug(f"üìã –ü–æ–ª—É—á–µ–Ω orderbook delta")
                # –ú–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–ª—å—Ç–∞-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                pass
            else:
                self.connection_stats["unknown_messages"] += 1
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø orderbook —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_type}")
                
        except Exception as e:
            self.connection_stats["error_messages"] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ orderbook —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            logger.error(f"Raw message: {message}")
            logger.error(f"Stack trace: {traceback.format_exc()}")
    
    def _handle_trades(self, message: dict):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–¥–µ–ª–æ–∫"""
        try:
            self.connection_stats["messages_received"] += 1
            self.connection_stats["last_message_time"] = datetime.now()
            
            logger.debug(f"üì® –ü–æ–ª—É—á–µ–Ω–æ trades —Å–æ–æ–±—â–µ–Ω–∏–µ: type={message.get('type')}")
            
            msg_type = message.get('type')
            
            if msg_type == 'snapshot' and message.get('data'):
                self.connection_stats["trades_messages"] += 1
                trades = message['data']
                
                logger.debug(f"üí∞ Trades data: {len(trades)} —Å–¥–µ–ª–æ–∫")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
                self.market_data.update_trades(trades)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                logger.debug(f"üìû –í—ã–∑–æ–≤ {len(self.trades_callbacks)} trades callbacks...")
                for i, callback in enumerate(self.trades_callbacks):
                    try:
                        callback(trades)
                        logger.debug(f"‚úÖ Trades callback #{i} –≤—ã–ø–æ–ª–Ω–µ–Ω")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ trades callback #{i}: {e}")
                
            else:
                self.connection_stats["unknown_messages"] += 1
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø trades —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_type}")
                
        except Exception as e:
            self.connection_stats["error_messages"] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ trades —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            logger.error(f"Raw message: {message}")
            logger.error(f"Stack trace: {traceback.format_exc()}")
    
    def get_market_data(self) -> RealtimeMarketData:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        return self.market_data
    
    def get_current_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä—ã–Ω–∫–∞"""
        try:
            stats = {
                "symbol": self.symbol,
                "current_price": self.market_data.get_current_price(),
                "price_change_1m": self.market_data.get_price_change(1),
                "price_change_5m": self.market_data.get_price_change(5),
                "price_change_24h": self.market_data.get_price_change_24h(),
                "volume_24h": self.market_data.get_volume_24h(),
                "volume_analysis": self.market_data.get_volume_analysis(),
                "orderbook_pressure": self.market_data.get_orderbook_pressure(),
                "data_points": len(self.market_data.prices),
                "has_sufficient_data": self.market_data.has_sufficient_data(),
                "last_update": datetime.now().isoformat(),
                "connection_stats": self.connection_stats.copy(),
                "market_data_stats": self.market_data.get_stats()
            }
            
            logger.debug(f"üìä Current stats: price=${stats['current_price']:,.2f}, data_points={stats['data_points']}")
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                "symbol": self.symbol,
                "current_price": 0,
                "error": str(e)
            }
    
    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
        return self.running
    
    def get_connection_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        uptime = None
        if self.connection_stats["start_time"]:
            uptime = (datetime.now() - self.connection_stats["start_time"]).total_seconds()
            
        return {
            **self.connection_stats,
            "uptime_seconds": uptime,
            "messages_per_minute": (self.connection_stats["messages_received"] / (uptime / 60)) if uptime and uptime > 0 else 0,
            "is_healthy": self.is_connection_healthy()
        }
    
    def is_connection_healthy(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if not self.running:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã
        if self.connection_stats["last_message_time"]:
            time_since_last = datetime.now() - self.connection_stats["last_message_time"]
            if time_since_last > timedelta(minutes=2):
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π {time_since_last.total_seconds():.0f} —Å–µ–∫—É–Ω–¥")
                return False
                
        return True
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...")
            self.running = False
            
            if self.ws:
                self.ws.exit()
                logger.info("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                
            # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            final_stats = self.get_connection_stats()
            logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ WebSocket:")
            logger.info(f"   ‚Ä¢ –ü–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {final_stats['connection_attempts']}")
            logger.info(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {final_stats['successful_connections']}")
            logger.info(f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {final_stats['messages_received']}")
            logger.info(f"   ‚Ä¢ Ticker —Å–æ–æ–±—â–µ–Ω–∏–π: {final_stats['ticker_messages']}")
            logger.info(f"   ‚Ä¢ Orderbook —Å–æ–æ–±—â–µ–Ω–∏–π: {final_stats['orderbook_messages']}")
            logger.info(f"   ‚Ä¢ Trades —Å–æ–æ–±—â–µ–Ω–∏–π: {final_stats['trades_messages']}")
            logger.info(f"   ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {final_stats['uptime_seconds']:.0f} —Å–µ–∫")
            
            logger.info(f"üõë WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {self.symbol}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")
    
    async def wait_for_data(self, timeout: int = 30) -> bool:
        """
        –û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, False –µ—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç
        """
        start_time = datetime.now()
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–∞–π–º–∞—É—Ç: {timeout}—Å)...")
        
        check_interval = 1  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        
        while (datetime.now() - start_time).seconds < timeout:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            has_data = self.market_data.has_sufficient_data()
            messages_received = self.connection_stats["messages_received"]
            
            logger.debug(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö: has_data={has_data}, messages={messages_received}")
            
            if has_data and messages_received > 0:
                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ {(datetime.now() - start_time).seconds}—Å")
                return True
                
            await asyncio.sleep(check_interval)
        
        logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ({timeout}—Å)")
        logger.warning(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.warning(f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {self.connection_stats['messages_received']}")
        logger.warning(f"   ‚Ä¢ Ticker —Å–æ–æ–±—â–µ–Ω–∏–π: {self.connection_stats['ticker_messages']}")
        logger.warning(f"   ‚Ä¢ Data points: {len(self.market_data.prices)}")
        logger.warning(f"   ‚Ä¢ Has sufficient data: {self.market_data.has_sufficient_data()}")
            
        return False
    
    def __str__(self):
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        status = "Running" if self.running else "Stopped"
        messages = self.connection_stats["messages_received"]
        return f"WebSocketProvider(symbol={self.symbol}, testnet={self.testnet}, status={status}, messages={messages})"
    
    def __repr__(self):
        """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return (f"WebSocketProvider(symbol='{self.symbol}', testnet={self.testnet}, "
                f"running={self.running}, callbacks=[{len(self.ticker_callbacks)},{len(self.orderbook_callbacks)},{len(self.trades_callbacks)}], "
                f"messages={self.connection_stats['messages_received']})")
