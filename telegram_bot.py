import logging
import asyncio
from typing import Set, Optional
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram.enums import ParseMode

# ‚úÖ OpenAIAnalyzer –æ—Å—Ç–∞–≤–ª—è–µ–º
from openai_integration import OpenAIAnalyzer

logger = logging.getLogger(__name__)

class TelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –Ω–∞ aiogram (webhook —Ä–µ–∂–∏–º) - v2.3"""
    
    def __init__(self, token: str):
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self.router = Router()
        
        # ‚úÖ OpenAIAnalyzer —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        self.openai_analyzer = OpenAIAnalyzer()
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signal_subscribers: Set[int] = set()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
        self.dp.include_router(self.router)
        
        logger.info("ü§ñ TelegramBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è webhook —Ä–µ–∂–∏–º–∞ (SimpleCandleSync + SimpleFuturesSync)")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.router.message.register(self.start_command, Command("start"))
        self.router.message.register(self.help_command, Command("help"))
        
        # Callback query –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.router.callback_query.register(
            self.handle_market_analysis, 
            F.data == "market_analysis"
        )
        self.router.callback_query.register(
            self.handle_about, 
            F.data == "about"
        )
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.router.callback_query.register(
            self.handle_signals_menu,
            F.data == "signals_menu"
        )
        self.router.callback_query.register(
            self.handle_subscribe_signals,
            F.data == "subscribe_signals"
        )
        self.router.callback_query.register(
            self.handle_unsubscribe_signals,
            F.data == "unsubscribe_signals"
        )
        self.router.callback_query.register(
            self.handle_back_to_menu,
            F.data == "back_to_menu"
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö
        self.router.callback_query.register(self.handle_unknown_callback)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.router.message.register(self.handle_text_message, F.text)
        
        logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def start_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_name = message.from_user.first_name or "–¥—Ä—É–≥"
            user_id = message.from_user.id
            
            logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {user_id})")
            
            # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = self._create_main_menu()
            
            welcome_text = f"""ü§ñ *Bybit Trading Bot v2.3* 

–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –ø–æ–º–æ–≥–∞—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤.

üìä *–ß—Ç–æ —è —É–º–µ—é:*
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (Bybit)
- üÜï –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ CME (YFinance)
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL
- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏

üî• *–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã v2.3:*
- SimpleCandleSync - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
- SimpleFuturesSync - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
- MarketDataManager - real-time –¥–∞–Ω–Ω—ã–µ
- StrategyOrchestrator - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏  
- SignalManager - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤

üöÄ *–°–∏–º–≤–æ–ª—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ:*
- Crypto: BTC, ETH, BNB, SOL, XRP, DOGE –∏ –¥—Ä.
- Futures: MCL, MGC, MES, MNQ (CME micro)

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üëá"""
            
            await message.answer(
                welcome_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start_command: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def help_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            help_text = """üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*

üîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üìä *–§—É–Ω–∫—Ü–∏–∏:*
- üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–≤–µ—á–µ–π
- üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (15 –ø–∞—Ä)
- üÜï –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ—å—é—á–µ—Ä—Å–æ–≤ CME (4 –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞)
- üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PostgreSQL
- üö® –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

üÜï *–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ v2.3:*
- SimpleCandleSync - REST API —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–∫—Ä–∏–ø—Ç–∞)
- SimpleFuturesSync - YFinance —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (—Ñ—å—é—á–µ—Ä—Å—ã)
- MarketDataManager - WebSocket ticker (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- StrategyOrchestrator - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
- SignalManager - —É–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤

üö® *–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã:*
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ê–Ω–∞–ª–∏–∑ –∏–º–ø—É–ª—å—Å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π —Ü–µ–Ω—ã
- –î–µ—Ç–µ–∫—Ü–∏—è —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π (>2% –∑–∞ –º–∏–Ω—É—Ç—É)
- –ê–Ω–∞–ª–∏–∑ –æ—Ä–¥–µ—Ä–±—É–∫–∞ –∏ –æ–±—ä–µ–º–æ–≤
- –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
- –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏ (5 –º–∏–Ω—É—Ç)

‚ö†Ô∏è *–í–∞–∂–Ω–æ:*
–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º —Å–æ–≤–µ—Ç–æ–º. –¢–æ—Ä–≥–æ–≤–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ —Å–≤—è–∑–∞–Ω–∞ —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ä–∏—Å–∫–∞–º–∏.

üîÑ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"""
            
            keyboard = self._create_main_menu()
            
            await message.answer(
                help_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ help_command: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
    
    async def handle_market_analysis(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ - –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        user_id = callback.from_user.id
        user_name = callback.from_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        try:
            await callback.answer()
            
            logger.info(f"üìä –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç {user_name} (ID: {user_id})")
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            response_text = """üîß *–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω*

–§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.

üöÄ *–ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ–π—á–∞—Å:*
- ‚úÖ SimpleCandleSync - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è 15 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
  - –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã: 1m, 5m, 15m, 1h, 4h, 1d
  - –ò—Å—Ç–æ—á–Ω–∏–∫: Bybit REST API
  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤

- ‚úÖ SimpleFuturesSync - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è 4 —Ñ—å—é—á–µ—Ä—Å–æ–≤
  - –°–∏–º–≤–æ–ª—ã: MCL, MGC, MES, MNQ (CME micro)
  - –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã: 1m, 5m, 15m, 1h, 4h, 1d
  - –ò—Å—Ç–æ—á–Ω–∏–∫: Yahoo Finance API

- ‚úÖ PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  - –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
  - –ì–æ—Ç–æ–≤—ã –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
  - –î–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ REST API

- ‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
  - Real-time —á–µ—Ä–µ–∑ StrategyOrchestrator
  - MomentumStrategy –∞–∫—Ç–∏–≤–Ω–∞
  - SignalManager —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã

üîú *–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ:*
- üìä REST API –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
- ü§ñ AI –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞
- üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∏
- üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

_–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ 24/7_

–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:
- /health - https://bybitmybot.onrender.com/health
- /sync-status - —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
- /futures-sync-status - —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤"""
            
            keyboard = self._create_analysis_menu()
            
            await callback.message.edit_text(
                response_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info(f"‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_market_analysis: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def handle_about(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
        try:
            await callback.answer()
            
            about_text = """‚ÑπÔ∏è *–û –±–æ—Ç–µ*

ü§ñ *Bybit Trading Bot v2.3*
SimpleCandleSync + SimpleFuturesSync Architecture

*üèóÔ∏è –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:*
- üîÑ SimpleCandleSync - REST API —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
  - 15 —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Bybit
  - 6 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
  - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤

- üîÑ SimpleFuturesSync - YFinance —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
  - 4 –º–∏–∫—Ä–æ-—Ñ—å—é—á–µ—Ä—Å–∞ CME
  - 6 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
  - –£—á–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π YFinance API
  - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å SimpleCandleSync

- üìä MarketDataManager (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  - WebSocket ticker –¥–ª—è real-time —Ü–µ–Ω
  - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ REST API –∑–∞–ø—Ä–æ—Å–æ–≤
  - –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ

- üé≠ StrategyOrchestrator
  - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
  - MomentumStrategy –¥–ª—è –∏–º–ø—É–ª—å—Å–æ–≤
  - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞

- üéõÔ∏è SignalManager
  - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
  - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞–º–∏
  - –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤

*–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:*
- üìà Bybit REST API v5 –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
- üìä Yahoo Finance –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ CME
- ü§ñ OpenAI GPT-4 –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
- üöÄ Python aiogram –¥–ª—è Telegram
- üíæ PostgreSQL –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- ‚ö° –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

*–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:*
- 15 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä (BTC, ETH, BNB, SOL...)
- 4 –º–∏–∫—Ä–æ-—Ñ—å—é—á–µ—Ä—Å–∞ CME (MCL, MGC, MES, MNQ)
- 6 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (1m, 5m, 15m, 1h, 4h, 1d)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è 24/7

*–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å:*
- ‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ deadlock –±–ª–∞–≥–æ–¥–∞—Ä—è REST API
- ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
- ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
- ‚úÖ Health monitoring
- ‚úÖ Graceful shutdown

*–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:*
- üîó Webhook –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
- üì° REST API –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö  
- ‚ö° WebSocket ticker (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- ‚òÅÔ∏è –†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ Render.com

‚ö†Ô∏è *–î–∏—Å–∫–ª–µ–π–º–µ—Ä:*
–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º —Å–æ–≤–µ—Ç–æ–º."""
            
            keyboard = self._create_about_menu()
            
            await callback.message.edit_text(
                about_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_about: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def handle_signals_menu(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            await callback.answer()
            
            user_id = callback.from_user.id
            is_subscribed = user_id in self.signal_subscribers
            
            status_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if is_subscribed else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
            subscribers_count = len(self.signal_subscribers)
            
            menu_text = f"""üö® *–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã v2.3*

üìä *–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:* {status_text}
üë• *–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:* {subscribers_count}

üèóÔ∏è *–ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:*
- SimpleCandleSync - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
- SimpleFuturesSync - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å–æ–≤
- MarketDataManager - real-time WebSocket ticker
- StrategyOrchestrator - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
- SignalManager - —É–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
- MomentumStrategy - –∏–º–ø—É–ª—å—Å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è

üî• *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ v2.3:*
- REST API —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–µ–∑ deadlock
- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏–ø—Ç—ã –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤
- –ê–Ω–∞–ª–∏–∑ 15 –∫—Ä–∏–ø—Ç–æ–ø–∞—Ä + 4 —Ñ—å—é—á–µ—Ä—Å–∞
- –î–µ—Ç–µ–∫—Ü–∏—è —Ä–µ–∑–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π (>2%)
- –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤ (–∫—É–ª–¥–∞—É–Ω 5 –º–∏–Ω—É—Ç)

‚è±Ô∏è *–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã:*
- –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
- –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (>2%)
- –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏: 5 –º–∏–Ω—É—Ç
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: 0.5
- –ú–∞–∫—Å–∏–º—É–º 12 —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —á–∞—Å

üéØ *–¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤:*
- üü¢ BUY / STRONG_BUY - —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É
- üî¥ SELL / STRONG_SELL - —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
- –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: 0.5 - 1.0
- –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: LOW/MEDIUM/HIGH

üìà *–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:*
- Bybit REST API - –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
- Yahoo Finance - CME —Ñ—å—é—á–µ—Ä—Å—ã
- PostgreSQL - –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
- WebSocket - real-time —Ü–µ–Ω—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï:* –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ—Å—É—Ç –≤—ã—Å–æ–∫–∏–µ —Ä–∏—Å–∫–∏! –≠—Ç–æ –Ω–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç!"""
            
            keyboard = self._create_signals_menu(is_subscribed)
            
            await callback.message.edit_text(
                menu_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def handle_subscribe_signals(self, callback: CallbackQuery):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        try:
            await callback.answer()
            
            user_id = callback.from_user.id
            user_name = callback.from_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            self.signal_subscribers.add(user_id)
            
            await callback.message.edit_text(
                "‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –Ω–æ–≤–æ–π –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã v2.3.\n\n"
                "üèóÔ∏è *–°–∏–≥–Ω–∞–ª—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑:*\n"
                "‚Ä¢ SimpleCandleSync - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
                "‚Ä¢ SimpleFuturesSync - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ—å—é—á–µ—Ä—Å–æ–≤\n"
                "‚Ä¢ MarketDataManager - real-time –¥–∞–Ω–Ω—ã–µ\n"
                "‚Ä¢ StrategyOrchestrator - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
                "‚Ä¢ SignalManager - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞\n"
                "‚Ä¢ MomentumStrategy - –∏–º–ø—É–ª—å—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è\n\n"
                "üî• *–û—Å–Ω–æ–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:*\n"
                "‚Ä¢ REST API —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫\n"
                "‚Ä¢ –ê–Ω–∞–ª–∏–∑ 15 –∫—Ä–∏–ø—Ç–æ–ø–∞—Ä + 4 —Ñ—å—é—á–µ—Ä—Å–∞\n"
                "‚Ä¢ –î–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ 1m, 5m, 15m, 1h\n"
                "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ WebSocket ticker\n"
                "‚Ä¢ –û–±—ä–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤\n"
                "‚Ä¢ –î–µ—Ç–µ–∫—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π\n\n"
                "üì± *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n"
                "‚Ä¢ –ü—Ä–∏ —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö (—Å–∏–ª–∞ ‚â•0.5)\n"
                "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 1 —Å–∏–≥–Ω–∞–ª —Ç–∏–ø–∞ –≤ 5 –º–∏–Ω—É—Ç\n"
                "‚Ä¢ –£–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤\n"
                "‚Ä¢ –í –ª—é–±–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫\n\n"
                "‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ—Å—É—Ç –≤—ã—Å–æ–∫–∏–µ —Ä–∏—Å–∫–∏!\n"
                "_–≠—Ç–æ –Ω–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç!_",
                reply_markup=self._create_signals_menu(True),
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info(f"üì° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} ({user_id}) –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã v2.3")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def handle_unsubscribe_signals(self, callback: CallbackQuery):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            await callback.answer()
            
            user_id = callback.from_user.id
            user_name = callback.from_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            self.signal_subscribers.discard(user_id)
            
            await callback.message.edit_text(
                "üîï *–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞*\n\n"
                "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤! üôè",
                reply_markup=self._create_signals_menu(False),
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info(f"üì° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} ({user_id}) –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def broadcast_signal(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        try:
            if not self.signal_subscribers:
                logger.info("üì° –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞")
                return
            
            sent_count = 0
            failed_count = 0
            blocked_users = []
            
            for user_id in self.signal_subscribers.copy():  # –ö–æ–ø–∏—Ä—É–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                try:
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode=ParseMode.MARKDOWN
                    )
                    sent_count += 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
                    await asyncio.sleep(0.05)
                    
                except Exception as e:
                    failed_count += 1
                    error_msg = str(e).lower()
                    
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª —á–∞—Ç
                    if any(phrase in error_msg for phrase in [
                        "bot was blocked by the user",
                        "user is deactivated", 
                        "chat not found"
                    ]):
                        blocked_users.append(user_id)
                        logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª —á–∞—Ç")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            for user_id in blocked_users:
                self.signal_subscribers.discard(user_id)
            
            if blocked_users:
                logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {len(blocked_users)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
            
            logger.info(f"üì® –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ‚úÖ{sent_count} —É—Å–ø–µ—à–Ω–æ, ‚ùå{failed_count} –æ—à–∏–±–æ–∫")
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
    
    async def handle_back_to_menu(self, callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        try:
            await callback.answer()
            
            keyboard = self._create_main_menu()
            
            welcome_text = """ü§ñ *Bybit Trading Bot v2.3*

–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
            
            await callback.message.edit_text(
                welcome_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_back_to_menu: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def handle_unknown_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö"""
        try:
            await callback.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {callback.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self.handle_back_to_menu(callback)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_unknown_callback: {e}")
    
    async def handle_text_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_text = message.text.lower()
            
            # –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–∫—Å—Ç–æ–º
            if any(word in user_text for word in ['–ø—Ä–∏–≤–µ—Ç', '—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–∞—Ç—å', 'hello', 'hi']):
                await self.start_command(message)
            elif any(word in user_text for word in ['–∞–Ω–∞–ª–∏–∑', '—Ä—ã–Ω–æ–∫', 'btc', '–±–∏—Ç–∫–æ–∏–Ω', '—Ü–µ–Ω–∞']):
                # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(
                    text="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–µ",
                    callback_data="market_analysis"
                ))
                
                await message.answer(
                    "üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
                    "_SimpleCandleSync + SimpleFuturesSync —Å–æ–±–∏—Ä–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞_",
                    reply_markup=builder.as_markup(),
                    parse_mode=ParseMode.MARKDOWN
                )
            elif any(word in user_text for word in ['—Å–∏–≥–Ω–∞–ª', '—Å–∏–≥–Ω–∞–ª—ã', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–ø–æ–¥–ø–∏—Å–∫–∞']):
                # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(
                    text="üö® –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã",
                    callback_data="signals_menu"
                ))
                
                await message.answer(
                    "üö® –•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã?\n"
                    "_–°–∏–≥–Ω–∞–ª—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ StrategyOrchestrator v2.3_",
                    reply_markup=builder.as_markup(),
                    parse_mode=ParseMode.MARKDOWN
                )
            elif any(word in user_text for word in ['–ø–æ–º–æ—â—å', '—Å–ø—Ä–∞–≤–∫–∞', 'help']):
                await self.help_command(message)
            else:
                # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
                response_text = """ü§ñ –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã!

üÜï *–í–µ—Ä—Å–∏—è 2.3 - SimpleCandleSync + SimpleFuturesSync*

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —Å–ø—Ä–∞–≤–∫–∞

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ:
- "—Å–∏–≥–Ω–∞–ª—ã" –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
- "–ø–æ–º–æ—â—å" –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
                
                keyboard = self._create_main_menu()
                await message.answer(response_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_text_message: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
    
    # ========== –ú–ï–ù–Æ –ò –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
    
    def _create_main_menu(self) -> InlineKeyboardBuilder:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(text="üìä –û —Å–∏—Å—Ç–µ–º–µ –∞–Ω–∞–ª–∏–∑–∞", callback_data="market_analysis")
        )
        builder.add(
            InlineKeyboardButton(text="üö® –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã", callback_data="signals_menu")
        )
        builder.add(
            InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")
        )
        builder.adjust(1)  # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥
        return builder.as_markup()
    
    def _create_analysis_menu(self) -> InlineKeyboardBuilder:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞"""
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(text="üö® –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã", callback_data="signals_menu")
        )
        builder.add(
            InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")
        )
        builder.add(
            InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        )
        builder.adjust(1)
        return builder.as_markup()
    
    def _create_about_menu(self) -> InlineKeyboardBuilder:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤ —Ä–∞–∑–¥–µ–ª–µ –û –±–æ—Ç–µ"""
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(text="üö® –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã", callback_data="signals_menu")
        )
        builder.add(
            InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        )
        builder.adjust(1)
        return builder.as_markup()
    
    def _create_signals_menu(self, is_subscribed: bool) -> InlineKeyboardBuilder:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Å–∏–≥–Ω–∞–ª–æ–≤"""
        builder = InlineKeyboardBuilder()
        
        if is_subscribed:
            builder.add(InlineKeyboardButton(text="üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unsubscribe_signals"))
        else:
            builder.add(InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="subscribe_signals"))
            
        builder.add(InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"))
        builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
        builder.adjust(1)
        
        return builder.as_markup()
    
    async def close(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –±–æ—Ç–∞"""
        try:
            logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ Telegram –±–æ—Ç–∞...")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
            if self.bot and self.bot.session:
                await self.bot.session.close()
                logger.info("‚úÖ Telegram bot —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
                
            logger.info("üî¥ Telegram –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–æ—Ç–∞: {e}")
