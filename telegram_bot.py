import logging
import asyncio
from typing import Set, Optional, Dict, Any, List
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram.enums import ParseMode

from openai_integration import OpenAIAnalyzer

logger = logging.getLogger(__name__)

class TelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –Ω–∞ aiogram (webhook —Ä–µ–∂–∏–º) - v3.0"""
    
    def __init__(self, token: str, repository=None, ta_context_manager=None):
        """
        Args:
            token: Telegram bot token
            repository: MarketDataRepository –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
            ta_context_manager: TechnicalAnalysisContextManager –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        """
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self.router = Router()
        
        self.openai_analyzer = OpenAIAnalyzer()
        self.repository = repository
        self.ta_context_manager = ta_context_manager
        
        self.signal_subscribers: Set[int] = set()
        
        self.user_analysis_state: Dict[int, Dict[str, Any]] = {}
        
        self._register_handlers()
        
        self.dp.include_router(self.router)
        
        logger.info("ü§ñ TelegramBot v3.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   ‚Ä¢ Repository: {'‚úÖ' if repository else '‚ùå'}")
        logger.info(f"   ‚Ä¢ TA Context Manager: {'‚úÖ' if ta_context_manager else '‚ùå'}")
        logger.info(f"   ‚Ä¢ OpenAI Analyzer: {'‚úÖ' if self.openai_analyzer else '‚ùå'}")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.router.message.register(self.start_command, Command("start"))
        self.router.message.register(self.help_command, Command("help"))
        
        self.router.callback_query.register(
            self.handle_market_analysis_start,
            F.data == "market_analysis"
        )
        self.router.callback_query.register(
            self.handle_select_crypto,
            F.data == "select_crypto"
        )
        self.router.callback_query.register(
            self.handle_select_futures,
            F.data == "select_futures"
        )
        self.router.callback_query.register(
            self.handle_symbol_selection,
            F.data.startswith("analyze_")
        )
        self.router.callback_query.register(
            self.handle_request_analysis,
            F.data == "request_analysis"
        )
        self.router.callback_query.register(
            self.handle_cancel_analysis,
            F.data == "cancel_analysis"
        )
        self.router.callback_query.register(
            self.handle_about, 
            F.data == "about"
        )
        self.router.callback_query.register(
            self.handle_signals_menu,
            F.data == "signals_menu"
        )
        self.router.callback_query.register(
            self.handle_subscribe_signals,
            F.data == "subscribe_signals"
        )
        self.router.callback_query.register(
            self.handle_unsubscribe_signals,
            F.data == "unsubscribe_signals"
        )
        self.router.callback_query.register(
            self.handle_back_to_menu,
            F.data == "back_to_menu"
        )
        
        self.router.callback_query.register(self.handle_unknown_callback)
        
        self.router.message.register(self.handle_text_message, F.text)
        
        logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def start_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        try:
            user_name = message.from_user.first_name or "–¥—Ä—É–≥"
            user_id = message.from_user.id
            
            self.signal_subscribers.add(user_id)
            
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {user_id}) ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ü–û–î–ü–ò–°–ê–ù")
            
            keyboard = self._create_main_menu()
            
            welcome_text = f"""ü§ñ *Bybit Trading Bot v3.0* 

–ü—Ä–∏–≤–µ—Ç, {user_name}! 

‚úÖ *–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã!*

üìä *–ß—Ç–æ —è —É–º–µ—é:*
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (Bybit)
- üÜï –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ CME (YFinance)
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL
- ü§ñ AI –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —á–µ—Ä–µ–∑ OpenAI GPT-4
- üö® –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏

üî• *–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã v3.0:*
- SimpleCandleSync - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
- SimpleFuturesSync - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
- Repository - –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ë–î
- TechnicalAnalysisContextManager - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
- SignalManager - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å AI –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º
- StrategyOrchestrator - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏

üöÄ *–°–∏–º–≤–æ–ª—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ:*
- Crypto: BTC, ETH, BNB, SOL, XRP, DOGE –∏ –¥—Ä.
- Futures: MCL, MGC, MES, MNQ (CME micro)

üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å AI –∞–Ω–∞–ª–∏–∑–æ–º!
_(–ú–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –≤ –º–µ–Ω—é "–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã")_

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üëá"""
            
            await message.answer(
                welcome_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start_command: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def help_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            help_text = """üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*

üîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üìä *–§—É–Ω–∫—Ü–∏–∏:*
- üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–≤–µ—á–µ–π
- üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (15 –ø–∞—Ä)
- üÜï –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ—å—é—á–µ—Ä—Å–æ–≤ CME (4 –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞)
- üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PostgreSQL
- ü§ñ AI –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI GPT-4
- üö® –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

üÜï *–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ v3.0:*
- SimpleCandleSync - REST API —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–∫—Ä–∏–ø—Ç–∞)
- SimpleFuturesSync - YFinance —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (—Ñ—å—é—á–µ—Ä—Å—ã)
- Repository - –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
- TechnicalAnalysisContextManager - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
- SignalManager - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è + AI –æ–±–æ–≥–∞—â–µ–Ω–∏–µ
- StrategyOrchestrator - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
- OpenAI GPT-4 - AI –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞

üö® *–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã:*
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ê–Ω–∞–ª–∏–∑ –∏–º–ø—É–ª—å—Å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π —Ü–µ–Ω—ã
- –î–µ—Ç–µ–∫—Ü–∏—è —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π (>2% –∑–∞ –º–∏–Ω—É—Ç—É)
- –ê–Ω–∞–ª–∏–∑ –æ—Ä–¥–µ—Ä–±—É–∫–∞ –∏ –æ–±—ä–µ–º–æ–≤
- –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
- ü§ñ AI –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
- –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏ (5 –º–∏–Ω—É—Ç)

üîî *–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã:*
–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ /start –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç–µ—Å—å –Ω–∞ –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã.
–£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é "–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã".

‚ö†Ô∏è *–í–∞–∂–Ω–æ:*
–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º —Å–æ–≤–µ—Ç–æ–º. –¢–æ—Ä–≥–æ–≤–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ —Å–≤—è–∑–∞–Ω–∞ —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ä–∏—Å–∫–∞–º–∏.

üîÑ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"""
            
            keyboard = self._create_main_menu()
            
            await message.answer(
                help_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ help_command: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
    
    async def handle_market_analysis_start(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ - –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–∞"""
        try:
            await callback.answer()
            
            user_id = callback.from_user.id
            user_name = callback.from_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            logger.info(f"üìä {user_name} ({user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞")
            
            if not self.repository or not self.openai_analyzer:
                await callback.message.edit_text(
                    "‚ùå **–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n"
                    "–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=self._create_back_button(),
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            self.user_analysis_state[user_id] = {}
            
            text = """üìä **–ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê –° –ò–ò**

ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:

**ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã** - Bybit spot pairs
- BTC, ETH, BNB, SOL, XRP, DOGE, ADA –∏ –¥—Ä.
- –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
- AI –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 1-3 –¥–Ω—è

**üìä –§—å—é—á–µ—Ä—Å—ã** - CME micro futures
- MCL (–Ω–µ—Ñ—Ç—å), MGC (–∑–æ–ª–æ—Ç–æ)
- MES (S&P 500), MNQ (Nasdaq)
- –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
- AI –æ—Ü–µ–Ω–∫–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ ‚¨áÔ∏è"""
            
            keyboard = self._create_asset_type_menu()
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_market_analysis_start: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def handle_select_crypto(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
        try:
            await callback.answer()
            
            user_id = callback.from_user.id
            
            self.user_analysis_state[user_id] = {"asset_type": "crypto"}
            
            from config import Config
            crypto_symbols = Config.get_bybit_symbols()
            
            text = """ü™ô **–í–´–ë–ï–†–ò–¢–ï –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–£**

–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:"""
            
            keyboard = self._create_symbol_selection_menu(crypto_symbols, "crypto")
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_select_crypto: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def handle_select_futures(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ—å—é—á–µ—Ä—Å–æ–≤"""
        try:
            await callback.answer()
            
            user_id = callback.from_user.id
            
            self.user_analysis_state[user_id] = {"asset_type": "futures"}
            
            from config import Config
            futures_symbols = Config.get_yfinance_symbols() if hasattr(Config, 'get_yfinance_symbols') else []
            
            if not futures_symbols:
                await callback.message.edit_text(
                    "‚ö†Ô∏è **–§—å—é—á–µ—Ä—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã**\n\n"
                    "–°–ø–∏—Å–æ–∫ —Ñ—å—é—á–µ—Ä—Å–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
                    reply_markup=self._create_back_button(),
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            text = """üìä **–í–´–ë–ï–†–ò–¢–ï –§–¨–Æ–ß–ï–†–°**

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:

- **MCL** - Micro WTI Crude Oil
- **MGC** - Micro Gold
- **MES** - Micro E-mini S&P 500
- **MNQ** - Micro E-mini Nasdaq-100"""
            
            keyboard = self._create_symbol_selection_menu(futures_symbols, "futures")
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_select_futures: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def handle_symbol_selection(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            await callback.answer()
            
            user_id = callback.from_user.id
            
            symbol = callback.data.replace("analyze_", "")
            
            if user_id not in self.user_analysis_state:
                self.user_analysis_state[user_id] = {}
            
            self.user_analysis_state[user_id]["symbol"] = symbol
            
            asset_type = self.user_analysis_state[user_id].get("asset_type", "crypto")
            emoji = "ü™ô" if asset_type == "crypto" else "üìä"
            
            text = f"""{emoji} **–ê–ù–ê–õ–ò–ó {symbol}**

–í—ã –≤—ã–±—Ä–∞–ª–∏: **{symbol}**

üìä **–ß—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:**
- –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (—É—Ä–æ–≤–Ω–∏, ATR, —Ç—Ä–µ–Ω–¥)
- –î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
- ü§ñ AI –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç OpenAI GPT-4

‚è±Ô∏è –ê–Ω–∞–ª–∏–∑ –∑–∞–π–º–µ—Ç 5-10 —Å–µ–∫—É–Ω–¥.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ‚¨áÔ∏è"""
            
            keyboard = self._create_confirm_analysis_menu()
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_symbol_selection: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def handle_request_analysis(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ - –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Repository + OpenAI"""
        try:
            await callback.answer()
            
            user_id = callback.from_user.id
            user_name = callback.from_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            if user_id not in self.user_analysis_state:
                await callback.message.edit_text(
                    "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=self._create_back_button(),
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            symbol = self.user_analysis_state[user_id].get("symbol")
            asset_type = self.user_analysis_state[user_id].get("asset_type", "crypto")
            
            if not symbol:
                await callback.message.edit_text(
                    "‚ùå –°–∏–º–≤–æ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=self._create_back_button(),
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            emoji = "ü™ô" if asset_type == "crypto" else "üìä"
            await callback.message.edit_text(
                f"{emoji} **–ê–ù–ê–õ–ò–ó {symbol}**\n\n"
                f"‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î...\n"
                f"üìä –ü–æ–ª—É—á–∞—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...\n"
                f"ü§ñ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é AI –∞–Ω–∞–ª–∏–∑...\n\n"
                f"_–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 —Å–µ–∫—É–Ω–¥..._",
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info(f"üî¨ {user_name} ({user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –∞–Ω–∞–ª–∏–∑ {symbol}")
            
            try:
                # ========== –®–ê–ì 1: –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ –∏–∑ –ë–î ==========
                end_time = datetime.now()
                start_time_24h = end_time - timedelta(hours=24)
                start_time_1h = end_time - timedelta(hours=1)
                
                # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏ –∑–∞ 24—á
                candles_1h = await self.repository.get_candles(
                    symbol=symbol.upper(),
                    interval="1h",
                    start_time=start_time_24h,
                    end_time=end_time,
                    limit=24
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                candles_1m = await self.repository.get_candles(
                    symbol=symbol.upper(),
                    interval="1m",
                    start_time=start_time_1h,
                    end_time=end_time,
                    limit=60
                )
                
                if not candles_1h or len(candles_1h) < 5:
                    await callback.message.edit_text(
                        f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}**\n\n"
                        f"–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–æ {len(candles_1h) if candles_1h else 0} —Å–≤–µ—á–µ–π.\n"
                        f"–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 5 —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π.\n\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª.",
                        reply_markup=self._create_back_button(),
                        parse_mode=ParseMode.MARKDOWN
                    )
                    return
                
                # ========== –®–ê–ì 2: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ ==========
                latest_candle = candles_1h[-1]
                first_candle_24h = candles_1h[0]
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _price
                current_price = float(latest_candle['close_price'])
                price_24h_ago = float(first_candle_24h['open_price'])
                price_change_24h = ((current_price - price_24h_ago) / price_24h_ago) * 100
                
                high_24h = max(float(c['high_price']) for c in candles_1h)
                low_24h = min(float(c['low_price']) for c in candles_1h)
                volume_24h = sum(float(c['volume']) for c in candles_1h)
                
                # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                price_change_1m = 0
                price_change_5m = 0
                
                if candles_1m and len(candles_1m) >= 5:
                    latest_1m = candles_1m[-1]
                    candle_5m_ago = candles_1m[-6] if len(candles_1m) >= 6 else candles_1m[0]
                    candle_1m_ago = candles_1m[-2] if len(candles_1m) >= 2 else candles_1m[0]
                    
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏
                    price_now = float(latest_1m['close_price'])
                    price_1m = float(candle_1m_ago['close_price'])
                    price_5m = float(candle_5m_ago['close_price'])
                    
                    if price_1m > 0:
                        price_change_1m = ((price_now - price_1m) / price_1m) * 100
                    if price_5m > 0:
                        price_change_5m = ((price_now - price_5m) / price_5m) * 100
                
                # ========== –®–ê–ì 3: –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ==========
                trend = "NEUTRAL"
                volatility = "MEDIUM"
                atr = 0.0
                key_levels = []
                
                if self.ta_context_manager:
                    try:
                        context = await self.ta_context_manager.get_context(
                            symbol=symbol.upper(),
                            interval="1h"
                        )
                        
                        if context:
                            trend = context.trend or "NEUTRAL"
                            volatility = context.volatility or "MEDIUM"
                            atr = context.atr or 0.0
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
                            if hasattr(context, 'support_levels') and context.support_levels:
                                for level in context.support_levels[:3]:
                                    key_levels.append({
                                        'type': 'support',
                                        'price': level
                                    })
                            
                            if hasattr(context, 'resistance_levels') and context.resistance_levels:
                                for level in context.resistance_levels[:3]:
                                    key_levels.append({
                                        'type': 'resistance',
                                        'price': level
                                    })
                            
                            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: trend={trend}, volatility={volatility}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: {e}")
                else:
                    logger.info("‚ÑπÔ∏è TechnicalAnalysisContextManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                
                # ========== –®–ê–ì 4: –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è OpenAI ==========
                analysis_data = {
                    'symbol': symbol,
                    'current_price': current_price,
                    'price_change_24h': price_change_24h,
                    'price_change_1m': price_change_1m,
                    'price_change_5m': price_change_5m,
                    'volume_24h': volume_24h,
                    'high_24h': high_24h,
                    'low_24h': low_24h,
                    'trend': trend,
                    'volatility': volatility,
                    'atr': atr,
                    'key_levels': key_levels,
                    'strategies_opinions': []  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
                }
                
                logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã:")
                logger.info(f"   ‚Ä¢ –¶–µ–Ω–∞: ${current_price:,.2f}")
                logger.info(f"   ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {price_change_24h:+.2f}%")
                logger.info(f"   ‚Ä¢ –°–≤–µ—á–µ–π 1h: {len(candles_1h)}")
                logger.info(f"   ‚Ä¢ –°–≤–µ—á–µ–π 1m: {len(candles_1m)}")
                logger.info(f"   ‚Ä¢ –¢—Ä–µ–Ω–¥: {trend}")
                logger.info(f"   ‚Ä¢ –ö–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π: {len(key_levels)}")
                
                # ========== –®–ê–ì 5: –ü–æ–ª—É—á–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ ==========
                logger.info("ü§ñ –ó–∞–ø—Ä–æ—Å AI –∞–Ω–∞–ª–∏–∑–∞ –∫ OpenAI...")
                ai_analysis = await self.openai_analyzer.comprehensive_market_analysis(analysis_data)
                
                if not ai_analysis or len(ai_analysis) < 50:
                    logger.warning("‚ö†Ô∏è AI –∞–Ω–∞–ª–∏–∑ –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                    ai_analysis = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                else:
                    logger.info(f"‚úÖ AI –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω ({len(ai_analysis)} —Å–∏–º–≤–æ–ª–æ–≤)")
                
                # ========== –®–ê–ì 6: –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ==========
                message_text = f"""{emoji} **–ê–ù–ê–õ–ò–ó {symbol}**

üí∞ **–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:** ${current_price:,.2f}

üìä **–ò–∑–º–µ–Ω–µ–Ω–∏—è:**
- 1 –º–∏–Ω—É—Ç–∞: {price_change_1m:+.2f}%
- 5 –º–∏–Ω—É—Ç: {price_change_5m:+.2f}%
- 24 —á–∞—Å–∞: {price_change_24h:+.2f}%

üìà **–î–∏–∞–ø–∞–∑–æ–Ω 24—á:**
- –ú–∞–∫—Å–∏–º—É–º: ${high_24h:,.2f}
- –ú–∏–Ω–∏–º—É–º: ${low_24h:,.2f}
- –û–±—ä–µ–º: {volume_24h:,.0f}

üîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:**
- –¢—Ä–µ–Ω–¥: {trend}
- –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility}
- ATR: {atr:.2f}

ü§ñ **AI –ê–ù–ê–õ–ò–ó:**

{ai_analysis}

_–ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ {len(candles_1h)} —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö_
"""
                
                keyboard = self._create_analysis_result_menu()
                
                await callback.message.edit_text(
                    message_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
                
                logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
                if user_id in self.user_analysis_state:
                    del self.user_analysis_state[user_id]
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                import traceback
                logger.error(traceback.format_exc())
                
                await callback.message.edit_text(
                    f"‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}**\n\n"
                    f"–î–µ—Ç–∞–ª–∏: {str(e)[:100]}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª.",
                    reply_markup=self._create_back_button(),
                    parse_mode=ParseMode.MARKDOWN
                )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_request_analysis: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def handle_cancel_analysis(self, callback: CallbackQuery):
        """–û—Ç–º–µ–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            await callback.answer()
            
            user_id = callback.from_user.id
            
            if user_id in self.user_analysis_state:
                del self.user_analysis_state[user_id]
            
            await self.handle_back_to_menu(callback)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_cancel_analysis: {e}")
    
    async def handle_about(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
        try:
            await callback.answer()
            
            about_text = """‚ÑπÔ∏è *–û –±–æ—Ç–µ*

ü§ñ *Bybit Trading Bot v3.0*
Direct Repository + AI Edition

*üèóÔ∏è –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:*
- üîÑ SimpleCandleSync - REST API —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
  - 15 —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Bybit
  - 6 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
  - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤

- üîÑ SimpleFuturesSync - YFinance —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
  - 4 –º–∏–∫—Ä–æ-—Ñ—å—é—á–µ—Ä—Å–∞ CME
  - 6 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
  - –£—á–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π YFinance API
  - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å SimpleCandleSync

- üìä Repository - –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º
  - –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ PostgreSQL
  - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
  - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö

- üß† TechnicalAnalysisContextManager - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
  - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ —É—Ä–æ–≤–Ω–µ–π
  - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

- üìä MarketDataManager (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  - WebSocket ticker –¥–ª—è real-time —Ü–µ–Ω
  - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ REST API –∑–∞–ø—Ä–æ—Å–æ–≤
  - –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ

- üé≠ StrategyOrchestrator
  - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
  - MomentumStrategy –¥–ª—è –∏–º–ø—É–ª—å—Å–æ–≤
  - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞

- üéõÔ∏è SignalManager + AI
  - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
  - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞–º–∏
  - –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
  - ü§ñ AI –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ OpenAI GPT-4

*–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:*
- üìà Bybit REST API v5 –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
- üìä Yahoo Finance –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ CME
- ü§ñ OpenAI GPT-4 –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
- üöÄ Python aiogram –¥–ª—è Telegram
- üíæ PostgreSQL –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- ‚ö° –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

*–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:*
- 15 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä (BTC, ETH, BNB, SOL...)
- 4 –º–∏–∫—Ä–æ-—Ñ—å—é—á–µ—Ä—Å–∞ CME (MCL, MGC, MES, MNQ)
- 6 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (1m, 5m, 15m, 1h, 4h, 1d)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è 24/7
- ü§ñ AI –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —á–µ—Ä–µ–∑ OpenAI

*–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å:*
- ‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ deadlock –±–ª–∞–≥–æ–¥–∞—Ä—è REST API
- ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
- ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
- ‚úÖ Health monitoring
- ‚úÖ Graceful shutdown

*–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ v3.0:*
- ‚úÖ –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —á–µ—Ä–µ–∑ Repository
- ‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–µ–≤
- ‚úÖ AI –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI GPT-4
- ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫—Ä–∏–ø—Ç—ã + —Ñ—å—é—á–µ—Ä—Å–æ–≤

*–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:*
- üîó Webhook –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
- üì° REST API –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö  
- ‚ö° WebSocket ticker (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- ‚òÅÔ∏è –†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ Render.com

‚ö†Ô∏è *–î–∏—Å–∫–ª–µ–π–º–µ—Ä:*
–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º —Å–æ–≤–µ—Ç–æ–º."""
            
            keyboard = self._create_about_menu()
            
            await callback.message.edit_text(
                about_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_about: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def handle_signals_menu(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            await callback.answer()
            
            user_id = callback.from_user.id
            is_subscribed = user_id in self.signal_subscribers
            
            status_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if is_subscribed else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
            subscribers_count = len(self.signal_subscribers)
            
            menu_text = f"""üö® *–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã v3.0*

üìä *–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:* {status_text}
üë• *–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:* {subscribers_count}

üèóÔ∏è *–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:*
- SimpleCandleSync - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
- SimpleFuturesSync - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å–æ–≤
- Repository - –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ë–î
- TechnicalAnalysisContextManager - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
- MarketDataManager - real-time WebSocket ticker
- StrategyOrchestrator - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
- SignalManager - —É–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
- ü§ñ OpenAI GPT-4 - AI –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
- MomentumStrategy - –∏–º–ø—É–ª—å—Å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è

üî• *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ v3.0:*
- ‚úÖ –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏ /start
- REST API —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–µ–∑ deadlock
- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏–ø—Ç—ã –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤
- –ê–Ω–∞–ª–∏–∑ 15 –∫—Ä–∏–ø—Ç–æ–ø–∞—Ä + 4 —Ñ—å—é—á–µ—Ä—Å–∞
- –î–µ—Ç–µ–∫—Ü–∏—è —Ä–µ–∑–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π (>2%)
- –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
- ü§ñ AI –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤ (–∫—É–ª–¥–∞—É–Ω 5 –º–∏–Ω—É—Ç)

‚è±Ô∏è *–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã:*
- –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
- –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (>2%)
- –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏: 5 –º–∏–Ω—É—Ç
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: 0.5
- –ú–∞–∫—Å–∏–º—É–º 12 —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —á–∞—Å

üéØ *–¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤:*
- üü¢ BUY / STRONG_BUY - —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É
- üî¥ SELL / STRONG_SELL - —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
- –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: 0.5 - 1.0
- –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: LOW/MEDIUM/HIGH
- ü§ñ AI –∞–Ω–∞–ª–∏–∑ —Å —Ä—ã–Ω–æ—á–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º

üìà *–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:*
- Bybit REST API - –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
- Yahoo Finance - CME —Ñ—å—é—á–µ—Ä—Å—ã
- PostgreSQL - –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
- WebSocket - real-time —Ü–µ–Ω—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- OpenAI GPT-4 - AI –∞–Ω–∞–ª–∏–∑

‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï:* –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ—Å—É—Ç –≤—ã—Å–æ–∫–∏–µ —Ä–∏—Å–∫–∏! –≠—Ç–æ –Ω–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç!"""
            
            keyboard = self._create_signals_menu(is_subscribed)
            
            await callback.message.edit_text(
                menu_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def handle_subscribe_signals(self, callback: CallbackQuery):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        try:
            await callback.answer()
            
            user_id = callback.from_user.id
            user_name = callback.from_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            self.signal_subscribers.add(user_id)
            
            await callback.message.edit_text(
                "‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –æ—Ç —Å–∏—Å—Ç–µ–º—ã v3.0.\n\n"
                "üèóÔ∏è *–°–∏–≥–Ω–∞–ª—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑:*\n"
                "‚Ä¢ SimpleCandleSync - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
                "‚Ä¢ SimpleFuturesSync - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ—å—é—á–µ—Ä—Å–æ–≤\n"
                "‚Ä¢ Repository - –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ë–î\n"
                "‚Ä¢ TechnicalAnalysisContextManager - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n"
                "‚Ä¢ MarketDataManager - real-time –¥–∞–Ω–Ω—ã–µ\n"
                "‚Ä¢ StrategyOrchestrator - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
                "‚Ä¢ SignalManager - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞\n"
                "‚Ä¢ ü§ñ OpenAI GPT-4 - AI –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞\n"
                "‚Ä¢ MomentumStrategy - –∏–º–ø—É–ª—å—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è\n\n"
                "üî• *–û—Å–Ω–æ–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:*\n"
                "‚Ä¢ REST API —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫\n"
                "‚Ä¢ –ê–Ω–∞–ª–∏–∑ 15 –∫—Ä–∏–ø—Ç–æ–ø–∞—Ä + 4 —Ñ—å—é—á–µ—Ä—Å–∞\n"
                "‚Ä¢ –î–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ 1m, 5m, 15m, 1h\n"
                "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ WebSocket ticker\n"
                "‚Ä¢ –û–±—ä–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤\n"
                "‚Ä¢ –î–µ—Ç–µ–∫—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π\n"
                "‚Ä¢ ü§ñ AI –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç OpenAI\n\n"
                "üì± *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n"
                "‚Ä¢ –ü—Ä–∏ —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö (—Å–∏–ª–∞ ‚â•0.5)\n"
                "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 1 —Å–∏–≥–Ω–∞–ª —Ç–∏–ø–∞ –≤ 5 –º–∏–Ω—É—Ç\n"
                "‚Ä¢ –£–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤\n"
                "‚Ä¢ AI –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞\n"
                "‚Ä¢ –í –ª—é–±–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫\n\n"
                "‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ—Å—É—Ç –≤—ã—Å–æ–∫–∏–µ —Ä–∏—Å–∫–∏!\n"
                "_–≠—Ç–æ –Ω–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç!_",
                reply_markup=self._create_signals_menu(True),
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info(f"üì° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} ({user_id}) –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã v3.0")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def handle_unsubscribe_signals(self, callback: CallbackQuery):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            await callback.answer()
            
            user_id = callback.from_user.id
            user_name = callback.from_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            self.signal_subscribers.discard(user_id)
            
            await callback.message.edit_text(
                "üîï *–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞*\n\n"
                "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –º–µ–Ω—é —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏–≤ /start.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤! üôè",
                reply_markup=self._create_signals_menu(False),
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info(f"üì° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} ({user_id}) –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def broadcast_signal(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        try:
            if not self.signal_subscribers:
                logger.info("üì° –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞")
                return
            
            sent_count = 0
            failed_count = 0
            blocked_users = []
            
            for user_id in self.signal_subscribers.copy():
                try:
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode=ParseMode.MARKDOWN
                    )
                    sent_count += 1
                    
                    await asyncio.sleep(0.05)
                    
                except Exception as e:
                    failed_count += 1
                    error_msg = str(e).lower()
                    
                    if any(phrase in error_msg for phrase in [
                        "bot was blocked by the user",
                        "user is deactivated", 
                        "chat not found"
                    ]):
                        blocked_users.append(user_id)
                        logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª —á–∞—Ç")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            for user_id in blocked_users:
                self.signal_subscribers.discard(user_id)
            
            if blocked_users:
                logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {len(blocked_users)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
            
            logger.info(f"üì® –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ‚úÖ{sent_count} —É—Å–ø–µ—à–Ω–æ, ‚ùå{failed_count} –æ—à–∏–±–æ–∫")
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
    
    async def handle_back_to_menu(self, callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        try:
            await callback.answer()
            
            keyboard = self._create_main_menu()
            
            welcome_text = """ü§ñ *Bybit Trading Bot v3.0*

–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
            
            await callback.message.edit_text(
                welcome_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_back_to_menu: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def handle_unknown_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö"""
        try:
            await callback.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {callback.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
            
            await self.handle_back_to_menu(callback)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_unknown_callback: {e}")
    
    async def handle_text_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_text = message.text.lower()
            
            if any(word in user_text for word in ['–ø—Ä–∏–≤–µ—Ç', '—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–∞—Ç—å', 'hello', 'hi']):
                await self.start_command(message)
            elif any(word in user_text for word in ['–∞–Ω–∞–ª–∏–∑', '—Ä—ã–Ω–æ–∫', 'btc', '–±–∏—Ç–∫–æ–∏–Ω', '—Ü–µ–Ω–∞']):
                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(
                    text="üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Å AI",
                    callback_data="market_analysis"
                ))
                
                await message.answer(
                    "üìä –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å AI –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞?\n"
                    "_–î–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ –ë–î + OpenAI GPT-4_",
                    reply_markup=builder.as_markup(),
                    parse_mode=ParseMode.MARKDOWN
                )
            elif any(word in user_text for word in ['—Å–∏–≥–Ω–∞–ª', '—Å–∏–≥–Ω–∞–ª—ã', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–ø–æ–¥–ø–∏—Å–∫–∞']):
                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(
                    text="üö® –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã",
                    callback_data="signals_menu"
                ))
                
                await message.answer(
                    "üö® –•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã?\n"
                    "_–°–∏–≥–Ω–∞–ª—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ StrategyOrchestrator v3.0 —Å AI_",
                    reply_markup=builder.as_markup(),
                    parse_mode=ParseMode.MARKDOWN
                )
            elif any(word in user_text for word in ['–ø–æ–º–æ—â—å', '—Å–ø—Ä–∞–≤–∫–∞', 'help']):
                await self.help_command(message)
            else:
                response_text = """ü§ñ –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å AI!

üÜï *–í–µ—Ä—Å–∏—è 3.0 - Direct Repository + AI Edition*

–ü—Ä–∏ /start –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç–µ—Å—å –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞
/help - —Å–ø—Ä–∞–≤–∫–∞

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ:
- "–∞–Ω–∞–ª–∏–∑" –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞
- "—Å–∏–≥–Ω–∞–ª—ã" –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
- "–ø–æ–º–æ—â—å" –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
                
                keyboard = self._create_main_menu()
                await message.answer(response_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_text_message: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
    
    def _create_main_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Å –ò–ò", callback_data="market_analysis")
        )
        builder.add(
            InlineKeyboardButton(text="üö® –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã", callback_data="signals_menu")
        )
        builder.add(
            InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")
        )
        builder.adjust(1)
        return builder.as_markup()
    
    def _create_analysis_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞"""
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(text="üö® –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã", callback_data="signals_menu")
        )
        builder.add(
            InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")
        )
        builder.add(
            InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        )
        builder.adjust(1)
        return builder.as_markup()
    
    def _create_about_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤ —Ä–∞–∑–¥–µ–ª–µ –û –±–æ—Ç–µ"""
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(text="üö® –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã", callback_data="signals_menu")
        )
        builder.add(
            InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        )
        builder.adjust(1)
        return builder.as_markup()
    
    def _create_signals_menu(self, is_subscribed: bool):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Å–∏–≥–Ω–∞–ª–æ–≤"""
        builder = InlineKeyboardBuilder()
        
        if is_subscribed:
            builder.add(InlineKeyboardButton(text="üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unsubscribe_signals"))
        else:
            builder.add(InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="subscribe_signals"))
            
        builder.add(InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"))
        builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
        builder.adjust(1)
        
        return builder.as_markup()
    
    def _create_asset_type_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–∞"""
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data="select_crypto"))
        builder.add(InlineKeyboardButton(text="üìä –§—å—é—á–µ—Ä—Å—ã", callback_data="select_futures"))
        builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
        builder.adjust(1)
        return builder.as_markup()
    
    def _create_symbol_selection_menu(self, symbols: List[str], asset_type: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–∞"""
        builder = InlineKeyboardBuilder()
        
        for symbol in symbols:
            display_name = symbol
            if asset_type == "crypto":
                display_name = symbol.replace("USDT", "/USDT")
            
            builder.add(InlineKeyboardButton(
                text=display_name,
                callback_data=f"analyze_{symbol}"
            ))
        
        builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="market_analysis"))
        
        builder.adjust(2, 2, 2, 2, 2, 1)
        
        return builder.as_markup()
    
    def _create_confirm_analysis_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="ü§ñ –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="request_analysis"))
        builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_analysis"))
        builder.adjust(1)
        return builder.as_markup()
    
    def _create_analysis_result_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîÑ –î—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª", callback_data="market_analysis"))
        builder.add(InlineKeyboardButton(text="üö® –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã", callback_data="signals_menu"))
        builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
        builder.adjust(1)
        return builder.as_markup()
    
    def _create_back_button(self):
        """–ü—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
        return builder.as_markup()
    
    async def close(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –±–æ—Ç–∞"""
        try:
            logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ Telegram –±–æ—Ç–∞...")
            
            if self.bot and self.bot.session:
                await self.bot.session.close()
                logger.info("‚úÖ Telegram bot —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
                
            logger.info("üî¥ Telegram –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–æ—Ç–∞: {e}")
