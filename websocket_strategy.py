import asyncio
import logging
import json
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
from dataclasses import dataclass
from collections import deque
from pybit.unified_trading import WebSocket
from config import Config

logger = logging.getLogger(__name__)

@dataclass
class Signal:
    """–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
    type: str          # "BUY", "SELL", "NEUTRAL"
    strength: float    # 0.0 - 1.0
    reason: str        # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã
    price: float       # –¶–µ–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–∏–≥–Ω–∞–ª–∞
    volume_24h: float  # –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
    timestamp: datetime
    change_1m: float   # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –º–∏–Ω—É—Ç—É
    change_5m: float   # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç

class RealtimeMarketData:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self, max_history: int = 1000):
        self.prices = deque(maxlen=max_history)  # –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω
        self.volumes = deque(maxlen=max_history) # –ò—Å—Ç–æ—Ä–∏—è –æ–±—ä–µ–º–æ–≤
        self.timestamps = deque(maxlen=max_history) # –ò—Å—Ç–æ—Ä–∏—è –≤—Ä–µ–º–µ–Ω–∏
        self.current_ticker = {}
        self.current_orderbook = {}
        self.recent_trades = deque(maxlen=100)
        
    def update_ticker(self, ticker_data: dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞"""
        try:
            self.current_ticker = ticker_data
            price = float(ticker_data.get('lastPrice', 0))
            volume = float(ticker_data.get('volume24h', 0))
            timestamp = datetime.now()
            
            self.prices.append(price)
            self.volumes.append(volume)  
            self.timestamps.append(timestamp)
            
            logger.debug(f"üìä Ticker: ${price:,.2f}, Vol: {volume:,.0f}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞: {e}")
            
    def update_orderbook(self, orderbook_data: dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω–∞"""
        try:
            self.current_orderbook = orderbook_data
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–±—É–∫–∞: {e}")
    
    def update_trades(self, trades_data: list):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫"""
        try:
            for trade in trades_data:
                self.recent_trades.append({
                    'price': float(trade.get('price', 0)),
                    'qty': float(trade.get('size', 0)),
                    'side': trade.get('side', ''),
                    'time': trade.get('time', ''),
                    'timestamp': datetime.now()
                })
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤: {e}")
    
    def get_price_change(self, minutes: int) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ N –º–∏–Ω—É—Ç –≤ %"""
        if len(self.prices) < 2 or len(self.timestamps) < 2:
            return 0.0
            
        current_price = self.prices[-1]
        target_time = datetime.now() - timedelta(minutes=minutes)
        
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ü–µ–Ω—É –∫ –Ω—É–∂–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        for i, ts in enumerate(reversed(self.timestamps)):
            if ts <= target_time:
                old_price = self.prices[-(i+1)]
                if old_price > 0:
                    return (current_price - old_price) / old_price * 100
                break
                
        return 0.0
    
    def get_current_price(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É"""
        return self.prices[-1] if self.prices else 0.0
    
    def get_volume_24h(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–º –∑–∞ 24—á"""
        return float(self.current_ticker.get('volume24h', 0))
    
    def get_price_change_24h(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 24—á –≤ %"""
        return float(self.current_ticker.get('price24hPcnt', 0)) * 100

class WebSocketStrategy:
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ WebSocket"""
    
    def __init__(self, telegram_bot):
        self.telegram_bot = telegram_bot
        self.market_data = RealtimeMarketData()
        self.last_signals = deque(maxlen=20)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–∏–≥–Ω–∞–ª–æ–≤
        self.ws = None
        self.running = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.min_signal_strength = 0.5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞
        self.signal_cooldown = timedelta(minutes=5)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ WebSocket —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
            
            # –°–æ–∑–¥–∞–µ–º WebSocket –¥–ª—è linear (USDT –ø–µ—Ä–ø–µ—Ç—É–∞–ª—ã)
            self.ws = WebSocket(
                testnet=Config.BYBIT_TESTNET,
                channel_type="linear"
            )
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω—É–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
            self.ws.ticker_stream(Config.SYMBOL, self.handle_ticker)
            self.ws.orderbook_stream(50, Config.SYMBOL, self.handle_orderbook)
            self.ws.trade_stream(Config.SYMBOL, self.handle_trades)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            self.running = True
            asyncio.create_task(self.signal_analysis_loop())
            
            logger.info(f"‚úÖ WebSocket —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {Config.SYMBOL}")
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebSocket —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            raise
    
    def handle_ticker(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–∏–∫–µ—Ä–∞"""
        try:
            if message.get('type') == 'snapshot' and message.get('data'):
                data = message['data']
                self.market_data.update_ticker(data)
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                try:
                    loop = asyncio.get_event_loop()
                    if loop and loop.is_running():
                        loop.create_task(self.check_extreme_movement())
                except:
                    # –ï—Å–ª–∏ –Ω–µ—Ç event loop - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                    pass
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ä–∞: {e}")
    
    def handle_orderbook(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
        try:
            if message.get('type') == 'snapshot' and message.get('data'):
                data = message['data']
                self.market_data.update_orderbook(data)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–±—É–∫–∞: {e}")
    
    def handle_trades(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–¥–µ–ª–æ–∫"""
        try:
            if message.get('type') == 'snapshot' and message.get('data'):
                trades = message['data']
                self.market_data.update_trades(trades)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–π–¥–æ–≤: {e}")
    
    async def check_extreme_movement(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        try:
            change_1m = self.market_data.get_price_change(1)
            current_price = self.market_data.get_current_price()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–∫–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –∑–∞ –º–∏–Ω—É—Ç—É
            if abs(change_1m) >= 2.0:  # –î–≤–∏–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ 2% –∑–∞ –º–∏–Ω—É—Ç—É
                signal_type = "BUY" if change_1m > 0 else "SELL"
                
                signal = Signal(
                    type=signal_type,
                    strength=min(abs(change_1m) / 5.0, 1.0),  # –ß–µ–º –±–æ–ª—å—à–µ –¥–≤–∏–∂–µ–Ω–∏–µ, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ —Å–∏–≥–Ω–∞–ª
                    reason=f"üö® –†–ï–ó–ö–û–ï –î–í–ò–ñ–ï–ù–ò–ï: {change_1m:+.2f}% –∑–∞ 1 –º–∏–Ω—É—Ç—É",
                    price=current_price,
                    volume_24h=self.market_data.get_volume_24h(),
                    timestamp=datetime.now(),
                    change_1m=change_1m,
                    change_5m=self.market_data.get_price_change(5)
                )
                
                if await self.should_send_signal(signal):
                    await self.send_signal_notification(signal)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–≤–∏–∂–µ–Ω–∏–π: {e}")
    
    async def signal_analysis_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        while self.running:
            try:
                await asyncio.sleep(30)  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
                signal = await self.analyze_market()
                if signal and await self.should_send_signal(signal):
                    await self.send_signal_notification(signal)
                    
            except Exception as e:
                logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                await asyncio.sleep(10)
    
    async def analyze_market(self) -> Optional[Signal]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª"""
        try:
            if len(self.market_data.prices) < 10:  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
                return None
                
            current_price = self.market_data.get_current_price()
            change_1m = self.market_data.get_price_change(1)
            change_5m = self.market_data.get_price_change(5)
            change_24h = self.market_data.get_price_change_24h()
            volume_24h = self.market_data.get_volume_24h()
            
            signal_type = "NEUTRAL"
            strength = 0.0
            reasons = []
            
            # üéØ –°–¢–†–ê–¢–ï–ì–ò–Ø 1: –ò–º–ø—É–ª—å—Å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
            if change_1m > 1.5 and change_5m > 2.0:  # –£—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–æ—Å—Ç
                signal_type = "BUY"
                strength += 0.4
                reasons.append(f"–ò–º–ø—É–ª—å—Å –≤–≤–µ—Ä—Ö: 1–º={change_1m:+.1f}%, 5–º={change_5m:+.1f}%")
                
            elif change_1m < -1.5 and change_5m < -2.0:  # –£—Å—Ç–æ–π—á–∏–≤–æ–µ –ø–∞–¥–µ–Ω–∏–µ
                signal_type = "SELL" 
                strength += 0.4
                reasons.append(f"–ò–º–ø—É–ª—å—Å –≤–Ω–∏–∑: 1–º={change_1m:+.1f}%, 5–º={change_5m:+.1f}%")
            
            # üéØ –°–¢–†–ê–¢–ï–ì–ò–Ø 2: –†–∞–∑–≤–æ—Ä–æ—Ç —Ç—Ä–µ–Ω–¥–∞
            elif change_1m > 0.8 and change_5m < -1.0:  # –†–∞–∑–≤–æ—Ä–æ—Ç –≤–≤–µ—Ä—Ö
                signal_type = "BUY"
                strength += 0.3
                reasons.append("–í–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–≤–µ—Ä—Ö")
                
            elif change_1m < -0.8 and change_5m > 1.0:  # –†–∞–∑–≤–æ—Ä–æ—Ç –≤–Ω–∏–∑
                signal_type = "SELL"
                strength += 0.3  
                reasons.append("–í–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–Ω–∏–∑")
            
            # üéØ –°–¢–†–ê–¢–ï–ì–ò–Ø 3: –û–±—ä–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if volume_24h > 20000:  # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
                strength += 0.2
                reasons.append(f"–í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º: {volume_24h:,.0f} BTC")
            elif volume_24h < 8000:  # –ù–∏–∑–∫–∏–π –æ–±—ä–µ–º
                strength -= 0.1  # –°–Ω–∏–∂–∞–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
                
            # üéØ –°–¢–†–ê–¢–ï–ì–ò–Ø 4: –ê–Ω–∞–ª–∏–∑ –æ—Ä–¥–µ—Ä–±—É–∫–∞
            if self.market_data.current_orderbook:
                orderbook_signal = self.analyze_orderbook()
                if orderbook_signal:
                    if orderbook_signal['type'] == signal_type or signal_type == "NEUTRAL":
                        signal_type = orderbook_signal['type']
                        strength += orderbook_signal['strength']
                        reasons.append(orderbook_signal['reason'])
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏—á–∏–Ω—ã
            if not reasons:
                return None
                
            return Signal(
                type=signal_type,
                strength=min(strength, 1.0),
                reason=" | ".join(reasons),
                price=current_price,
                volume_24h=volume_24h, 
                timestamp=datetime.now(),
                change_1m=change_1m,
                change_5m=change_5m
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
            return None
    
    def analyze_orderbook(self) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ä–¥–µ—Ä–±—É–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è"""
        try:
            orderbook = self.market_data.current_orderbook
            if not orderbook.get('b') or not orderbook.get('a'):
                return None
                
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —É—Ä–æ–≤–Ω–µ–π
            bids = orderbook['b'][:10] if len(orderbook['b']) >= 10 else orderbook['b']
            asks = orderbook['a'][:10] if len(orderbook['a']) >= 10 else orderbook['a']
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—ä–µ–º—ã
            bid_volume = sum(float(bid[1]) for bid in bids)
            ask_volume = sum(float(ask[1]) for ask in asks)
            
            total_volume = bid_volume + ask_volume
            if total_volume == 0:
                return None
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ
            bid_dominance = bid_volume / total_volume
            
            if bid_dominance > 0.65:  # –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
                return {
                    'type': 'BUY',
                    'strength': 0.2,
                    'reason': f'–î–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π {bid_dominance:.1%}'
                }
            elif bid_dominance < 0.35:  # –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤  
                return {
                    'type': 'SELL',
                    'strength': 0.2,
                    'reason': f'–î–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ {1-bid_dominance:.1%}'
                }
                
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ä–¥–µ—Ä–±—É–∫–∞: {e}")
            return None
    
    async def should_send_signal(self, signal: Signal) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª"""
        try:
            # –§–∏–ª—å—Ç—Ä –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞
            if signal.strength < self.min_signal_strength:
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
            now = datetime.now()
            for last_signal in self.last_signals:
                if (last_signal.type == signal.type and 
                    now - last_signal.timestamp < self.signal_cooldown):
                    logger.debug(f"‚è∞ –°–∏–≥–Ω–∞–ª {signal.type} –≤ –∫—É–ª–¥–∞—É–Ω–µ")
                    return False
                    
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False
    
    async def send_signal_notification(self, signal: Signal):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ"""
        try:
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
            emoji_map = {
                "BUY": "üü¢",
                "SELL": "üî¥",
                "NEUTRAL": "üî∂"
            }
            
            # –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞
            if signal.strength >= 0.8:
                strength_emoji = "üî•"
                strength_text = "–û–ß–ï–ù–¨ –°–ò–õ–¨–ù–´–ô"
            elif signal.strength >= 0.7:
                strength_emoji = "‚ö°"
                strength_text = "–°–ò–õ–¨–ù–´–ô" 
            elif signal.strength >= 0.6:
                strength_emoji = "üí™"
                strength_text = "–°–†–ï–î–ù–ò–ô"
            else:
                strength_emoji = "üí°"
                strength_text = "–°–õ–ê–ë–´–ô"
            
            message = f"""
{emoji_map[signal.type]} **WEBSOCKET –°–ò–ì–ù–ê–õ**

üéØ **–¢–∏–ø:** {signal.type}
{strength_emoji} **–°–∏–ª–∞:** {strength_text} ({signal.strength:.2f})

üí∞ **–¶–µ–Ω–∞:** ${signal.price:,.2f}
üìä **1 –º–∏–Ω:** {signal.change_1m:+.2f}%
üìà **5 –º–∏–Ω:** {signal.change_5m:+.2f}%  
üì¶ **–û–±—ä–µ–º 24—á:** {signal.volume_24h:,.0f} BTC

üß† **–ê–Ω–∞–ª–∏–∑:**
{signal.reason}

‚è∞ {signal.timestamp.strftime('%H:%M:%S')}
üåê *–î–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏*

_–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ—Å—É—Ç —Ä–∏—Å–∫–∏!_
            """
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram –±–æ—Ç
            await self.telegram_bot.broadcast_signal(message)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.last_signals.append(signal)
            
            logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª: {signal.type} ({signal.strength:.2f})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"""
        try:
            self.running = False
            if self.ws:
                self.ws.exit()
            logger.info("üõë WebSocket —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
