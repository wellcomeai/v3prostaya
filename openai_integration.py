# openai_integration.py
import logging
import json
from openai import AsyncOpenAI
from config import Config
from typing import Dict, Optional

logger = logging.getLogger(__name__)

class OpenAIAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API
    
    –í–µ—Ä—Å–∏—è: 2.0 - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å SignalManager –¥–ª—è AI –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
    
    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    1. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    3. –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å fallback
    4. –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    """

    def __init__(self):
        self.api_key = Config.OPENAI_API_KEY
        self.model = Config.OPENAI_MODEL  # –Ω–∞–ø—Ä–∏–º–µ—Ä "gpt-5" –∏–ª–∏ "gpt-4"
        
        logger.info("ü§ñ OpenAIAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å: {self.model}")
        logger.info(f"   ‚Ä¢ API Key: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if self.api_key else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")

    async def analyze_market(self, market_data: Dict) -> str:
        """
        –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API
        
        Args:
            market_data: –°–ª–æ–≤–∞—Ä—å —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Å–∏–≥–Ω–∞–ª–∞:
                - current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
                - price_change_24h: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á (%)
                - volume_24h: –û–±—ä–µ–º –∑–∞ 24—á
                - high_24h, low_24h: –ú–∞–∫—Å–∏–º—É–º/–º–∏–Ω–∏–º—É–º 24—á
                - price_change_1m, price_change_5m: –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                - signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ (BUY/SELL/etc)
                - signal_strength: –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ (0-1)
                - signal_confidence: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (0-1)
                - strategy_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                - signal_reasons: –°–ø–∏—Å–æ–∫ –ø—Ä–∏—á–∏–Ω —Å–∏–≥–Ω–∞–ª–∞
                - hourly_data: –ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                
        Returns:
            str: –¢–µ–∫—Å—Ç–æ–≤—ã–π AI –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
        """
        prompt = self._create_analysis_prompt(market_data).strip()
        
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI API...")
        logger.debug(f"–ü—Ä–æ–º–ø—Ç –¥–ª–∏–Ω–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")

        try:
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ HTTP —Ä–µ—Å—É—Ä—Å–æ–≤
            async with AsyncOpenAI(api_key=self.api_key) as client:
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç input - —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                response = await client.responses.create(
                    model=self.model,
                    input=[
                        {
                            "role": "user",
                            "content": prompt
                        }
                    ],
                    max_output_tokens=500
                )

            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            logger.debug(f"Response status: {response.status if hasattr(response, 'status') else 'N/A'}")
            logger.debug(f"Response model: {response.model if hasattr(response, 'model') else 'N/A'}")
            
            # –ú–µ—Ç–æ–¥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ output_text (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)
            if hasattr(response, 'output_text') and response.output_text:
                analysis = response.output_text.strip()
                if analysis:
                    logger.info(f"‚úÖ AI –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ output_text ({len(analysis)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    return analysis

            # –ú–µ—Ç–æ–¥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ output (fallback)
            logger.debug("output_text –ø—É—Å—Ç, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ response.output")
            
            if hasattr(response, 'output') and response.output:
                analysis = ""
                for item in response.output:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º reasoning items
                    if hasattr(item, 'type') and item.type == 'reasoning':
                        logger.debug("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º reasoning item")
                        continue
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ message items
                    if hasattr(item, 'type') and item.type == 'message':
                        logger.debug("–ù–∞–π–¥–µ–Ω message item")
                        if hasattr(item, 'content') and item.content:
                            for content in item.content:
                                if hasattr(content, 'type') and content.type == 'output_text':
                                    if hasattr(content, 'text') and content.text:
                                        analysis += content.text
                                        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –∏–∑ content ({len(content.text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                
                if analysis.strip():
                    logger.info(f"‚úÖ AI –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ output ({len(analysis)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    return analysis.strip()

            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ OpenAI response")
            logger.debug(f"Response dump: {response.model_dump() if hasattr(response, 'model_dump') else 'N/A'}")
            
            return self._get_fallback_analysis(market_data)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ OpenAI: {e}", exc_info=True)
            return self._get_fallback_analysis(market_data)

    def _create_analysis_prompt(self, market_data: dict) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            market_data: –°–ª–æ–≤–∞—Ä—å —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
        """
        try:
            # ========== –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ==========
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
            current_price = market_data.get('current_price', 0)
            price_change_24h = market_data.get('price_change_24h', 0)
            volume_24h = market_data.get('volume_24h', 0)
            high_24h = market_data.get('high_24h', current_price if current_price > 0 else 0)
            low_24h = market_data.get('low_24h', current_price if current_price > 0 else 0)
            open_interest = market_data.get('open_interest', 0)
            
            # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
            price_change_1m = market_data.get('price_change_1m', 0)
            price_change_5m = market_data.get('price_change_5m', 0)
            
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
            signal_type = market_data.get('signal_type', 'N/A')
            signal_strength = market_data.get('signal_strength', 0)
            signal_confidence = market_data.get('signal_confidence', 0)
            strategy_name = market_data.get('strategy_name', 'Unknown')
            signal_reasons = market_data.get('signal_reasons', [])
            
            # –ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)
            hourly_stats = market_data.get('hourly_data', {})
            
            # ========== –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ ==========
            
            prompt = f"""–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –±–∏—Ç–∫–æ–∏–Ω–∞.

üö® –ö–û–ù–¢–ï–ö–°–¢ –¢–û–†–ì–û–í–û–ì–û –°–ò–ì–ù–ê–õ–ê:
- –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {signal_type}
- –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal_strength:.2f} (0.0 - 1.0)
- –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal_confidence:.2f} (0.0 - 1.0)
- –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è BTC/USDT:

üìä –¢–ï–ö–£–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
- –¶–µ–Ω–∞: ${current_price:,.2f}
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 1 –º–∏–Ω: {price_change_1m:+.2f}%
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω: {price_change_5m:+.2f}%
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {price_change_24h:+.2f}%
- –ú–∞–∫—Å–∏–º—É–º 24—á: ${high_24h:,.2f}
- –ú–∏–Ω–∏–º—É–º 24—á: ${low_24h:,.2f}
- –û–±—ä–µ–º 24—á: {volume_24h:,.0f} BTC
- –û—Ç–∫—Ä—ã—Ç—ã–π –∏–Ω—Ç–µ—Ä–µ—Å: {open_interest:,.0f}"""

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—ã —Å–∏–≥–Ω–∞–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if signal_reasons and len(signal_reasons) > 0:
                prompt += "\n\nüîç –ü–†–ò–ß–ò–ù–´ –°–ò–ì–ù–ê–õ–ê:\n"
                for i, reason in enumerate(signal_reasons[:3], 1):  # –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–∏—á–∏–Ω—ã
                    prompt += f"{i}. {reason}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—á–∞—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if hourly_stats:
                prompt += f"""
üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê 24 –ß–ê–°–ê:
- –¢—Ä–µ–Ω–¥: {hourly_stats.get('price_trend', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
- –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${hourly_stats.get('avg_price_24h', 0):,.2f}
- –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {hourly_stats.get('price_volatility', 0):.2f}%
- –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º/—á–∞—Å: {hourly_stats.get('avg_hourly_volume', 0):,.0f}"""

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
            prompt += """

–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∏ —á–µ—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–Ω–µ –±–æ–ª–µ–µ 600 —Å–∏–º–≤–æ–ª–æ–≤) —Å —É—á–µ—Ç–æ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞:

1) **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞**: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –ª–∏ —Å–∏–≥–Ω–∞–ª —Ç–µ–∫—É—â–∏–º–∏ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏?
2) **–¢–µ–∫—É—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ**: –ê–Ω–∞–ª–∏–∑ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ (1-5 –º–∏–Ω) –∏ —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–æ–≥–æ (24—á) –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
3) **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞**: –û—Ü–µ–Ω–∫–∞ –æ–±—ä–µ–º–æ–≤ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
4) **–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã**: –û–∂–∏–¥–∞–µ–º–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ 1-3 –¥–Ω—è
5) **–ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏**: –í–∞–∂–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–∏–¥–Ω—ã)

‚ùó –í–ê–ñ–ù–û:
- –ù–ï –¥–∞–≤–∞–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫ –¥–µ–π—Å—Ç–≤–∏—é
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–∞—Ö –≤ –∫–æ–Ω—Ü–µ
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤"""
            
            logger.debug(f"‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ ({len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return prompt
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π fallback –ø—Ä–æ–º–ø—Ç
            return f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ BTC/USDT:
–¶–µ–Ω–∞: ${market_data.get('current_price', 0):,.2f}
–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {market_data.get('price_change_24h', 0):+.2f}%
–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏."""

    def _get_fallback_analysis(self, market_data: dict) -> str:
        """
        –†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –æ—à–∏–±–∫–µ OpenAI
        
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI.
        
        Args:
            market_data: –°–ª–æ–≤–∞—Ä—å —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            
        Returns:
            str: –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º
        """
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            current_price = market_data.get('current_price', 0)
            price_change_24h = market_data.get('price_change_24h', 0)
            price_change_1m = market_data.get('price_change_1m', 0)
            price_change_5m = market_data.get('price_change_5m', 0)
            volume_24h = market_data.get('volume_24h', 0)
            high_24h = market_data.get('high_24h', current_price)
            low_24h = market_data.get('low_24h', current_price)
            
            signal_type = market_data.get('signal_type', 'N/A')
            signal_strength = market_data.get('signal_strength', 0)
            strategy_name = market_data.get('strategy_name', 'Unknown')

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if price_change_24h > 5:
                trend = "üü¢ *–°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç*"
                trend_desc = "–†—ã–Ω–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Ö–æ–¥—è—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Å —Å–∏–ª—å–Ω—ã–º –∏–º–ø—É–ª—å—Å–æ–º"
            elif price_change_24h > 2:
                trend = "üü¢ *–†–æ—Å—Ç*"
                trend_desc = "–£–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Ö–æ–¥—è—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ, —Ä—ã–Ω–æ–∫ –≤ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏"
            elif price_change_24h > -2:
                trend = "üî∂ *–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å*"
                trend_desc = "–†—ã–Ω–æ–∫ —Ç–æ—Ä–≥—É–µ—Ç—Å—è –≤ –±–æ–∫–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ, –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è"
            elif price_change_24h > -5:
                trend = "üî¥ *–°–Ω–∏–∂–µ–Ω–∏–µ*"
                trend_desc = "–£–º–µ—Ä–µ–Ω–Ω–æ–µ –Ω–∏—Å—Ö–æ–¥—è—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ, –∫–æ—Ä—Ä–µ–∫—Ü–∏—è"
            else:
                trend = "üî¥ *–°–∏–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ*"
                trend_desc = "–†—ã–Ω–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ü–∏—é"

            # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏
            short_term = ""
            if abs(price_change_1m) > 1 or abs(price_change_5m) > 2:
                if price_change_5m > 0:
                    short_term = "–ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –∏–º–ø—É–ª—å—Å —Ä–æ—Å—Ç–∞."
                else:
                    short_term = "–í–∏–¥–Ω–∞ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è."
            else:
                short_term = "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞."

            # –û—Ü–µ–Ω–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            price_range = high_24h - low_24h
            volatility_pct = (price_range / current_price) * 100 if current_price > 0 else 0
            
            if volatility_pct > 5:
                volatility_desc = "–≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"
            elif volatility_pct > 3:
                volatility_desc = "—É–º–µ—Ä–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"
            else:
                volatility_desc = "–Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"

            # –û—Ü–µ–Ω–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
            signal_confirmation = ""
            if signal_type in ['BUY', 'STRONG_BUY']:
                if price_change_24h > 0 and price_change_5m > 0:
                    signal_confirmation = "‚úÖ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –≤–æ—Å—Ö–æ–¥—è—â–∏–º –¥–≤–∏–∂–µ–Ω–∏–µ–º."
                elif price_change_24h < 0:
                    signal_confirmation = "‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ—Å—Ç—É–ø–∏–ª –Ω–∞ —Ñ–æ–Ω–µ —Å–Ω–∏–∂–µ–Ω–∏—è - –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã."
                else:
                    signal_confirmation = "üî∂ –†—ã–Ω–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏, —Å–∏–≥–Ω–∞–ª —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
            elif signal_type in ['SELL', 'STRONG_SELL']:
                if price_change_24h < 0 and price_change_5m < 0:
                    signal_confirmation = "‚úÖ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –Ω–∏—Å—Ö–æ–¥—è—â–∏–º –¥–≤–∏–∂–µ–Ω–∏–µ–º."
                elif price_change_24h > 0:
                    signal_confirmation = "‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ—Å—Ç—É–ø–∏–ª –Ω–∞ —Ñ–æ–Ω–µ —Ä–æ—Å—Ç–∞ - –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∏—Å–∫–∏."
                else:
                    signal_confirmation = "üî∂ –†—ã–Ω–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏, —Å–∏–≥–Ω–∞–ª —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            fallback_message = f"""
{trend}

üí∞ *–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:* ${current_price:,.2f}

üìä *–ò–∑–º–µ–Ω–µ–Ω–∏—è:*
- 1 –º–∏–Ω—É—Ç–∞: {price_change_1m:+.2f}%
- 5 –º–∏–Ω—É—Ç: {price_change_5m:+.2f}%
- 24 —á–∞—Å–∞: {price_change_24h:+.2f}%

üìà *–î–∏–∞–ø–∞–∑–æ–Ω 24—á:* ${low_24h:,.2f} - ${high_24h:,.2f}
üìâ *–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:* {volatility_pct:.2f}% ({volatility_desc})
üíº *–û–±—ä–µ–º 24—á:* {volume_24h:,.0f} BTC

üîç *–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞:*
- –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}
- –¢–∏–ø: {signal_type}
- –°–∏–ª–∞: {signal_strength:.2f}

{signal_confirmation}

üìå *–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥:*
{trend_desc}. {short_term} –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–∏–ª–∞ {volatility_pct:.1f}%.

‚ö†Ô∏è *AI-–∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω*
–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.

_‚ùó –≠—Ç–æ –Ω–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç. –¢–æ—Ä–≥–æ–≤–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ —Å–≤—è–∑–∞–Ω–∞ —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ä–∏—Å–∫–∞–º–∏. –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (DYOR) –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π._
            """
            
            logger.info("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (fallback)")
            return fallback_message.strip()
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π fallback –Ω–∞ —Å–ª—É—á–∞–π –ø–æ–ª–Ω–æ–≥–æ –∫—Ä–∞—Ö–∞
            return """
‚ùå *–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞*

–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.

_‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ —Å–≤—è–∑–∞–Ω–∞ —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ä–∏—Å–∫–∞–º–∏. –í—Å–µ–≥–¥–∞ –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç._
            """

    async def comprehensive_market_analysis(self, analysis_data: Dict) -> str:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            analysis_data: –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
                - symbol: —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
                - current_price, price_change_24h, volume_24h...
                - trend, volatility, atr
                - key_levels: —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π
                - strategies_opinions: –º–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                
        Returns:
            str: –ü–æ–¥—Ä–æ–±–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
        """
        prompt = self._create_comprehensive_analysis_prompt(analysis_data).strip()
        
        # ‚úÖ –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
        logger.info("=" * 80)
        logger.info("üîç –î–ê–ù–ù–´–ï –î–õ–Ø OPENAI:")
        logger.info(f"Symbol: {analysis_data.get('symbol', 'N/A')}")
        logger.info(f"Current Price: ${analysis_data.get('current_price', 0):,.2f}")
        logger.info(f"Price Change 24h: {analysis_data.get('price_change_24h', 0):+.2f}%")
        logger.info(f"Trend: {analysis_data.get('trend', 'N/A')}")
        logger.info(f"Volatility: {analysis_data.get('volatility', 'N/A')}")
        logger.info(f"ATR: {analysis_data.get('atr', 0):.2f}")
        logger.info(f"Key Levels: {len(analysis_data.get('key_levels', []))} levels")
        logger.info(f"Strategies Opinions: {len(analysis_data.get('strategies_opinions', []))} opinions")
        logger.info("-" * 80)
        logger.info(f"PROMPT LENGTH: {len(prompt)} characters")
        logger.info("PROMPT PREVIEW (first 500 chars):")
        logger.info(prompt[:500])
        logger.info("=" * 80)
        
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {analysis_data.get('symbol', 'N/A')}...")
        logger.debug(f"–ü—Ä–æ–º–ø—Ç –¥–ª–∏–Ω–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        try:
            async with AsyncOpenAI(api_key=self.api_key) as client:
                response = await client.responses.create(
                    model=self.model,
                    input=[
                        {
                            "role": "user",
                            "content": prompt
                        }
                    ],
                    max_output_tokens=800  # –ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç (–∫–∞–∫ –≤ analyze_market)
            if hasattr(response, 'output_text') and response.output_text:
                analysis = response.output_text.strip()
                if analysis:
                    logger.info(f"‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω ({len(analysis)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    return analysis
            
            if hasattr(response, 'output') and response.output:
                analysis = ""
                for item in response.output:
                    if hasattr(item, 'type') and item.type == 'reasoning':
                        continue
                    
                    if hasattr(item, 'type') and item.type == 'message':
                        if hasattr(item, 'content') and item.content:
                            for content in item.content:
                                if hasattr(content, 'type') and content.type == 'output_text':
                                    if hasattr(content, 'text') and content.text:
                                        analysis += content.text
                
                if analysis.strip():
                    logger.info(f"‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ output ({len(analysis)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    return analysis.strip()
            
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ OpenAI response")
            return self._get_comprehensive_fallback_analysis(analysis_data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ OpenAI: {e}", exc_info=True)
            return self._get_comprehensive_fallback_analysis(analysis_data)

    def _create_comprehensive_analysis_prompt(self, analysis_data: dict) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            analysis_data: –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            str: –ü—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            symbol = analysis_data.get('symbol', 'N/A')
            current_price = analysis_data.get('current_price', 0)
            price_change_24h = analysis_data.get('price_change_24h', 0)
            volume_24h = analysis_data.get('volume_24h', 0)
            high_24h = analysis_data.get('high_24h', current_price)
            low_24h = analysis_data.get('low_24h', current_price)
            
            trend = analysis_data.get('trend', 'NEUTRAL')
            volatility = analysis_data.get('volatility', 'MEDIUM')
            atr = analysis_data.get('atr', 0)
            
            key_levels = analysis_data.get('key_levels', [])
            strategies_opinions = analysis_data.get('strategies_opinions', [])
            
            prompt = f"""–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞.

üìä –ü–†–û–í–ï–î–ò –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¥–ª—è {symbol}:

üí∞ –†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï:
- –¶–µ–Ω–∞: ${current_price:,.2f}
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {price_change_24h:+.2f}%
- –ú–∞–∫—Å–∏–º—É–º 24—á: ${high_24h:,.2f}
- –ú–∏–Ω–∏–º—É–º 24—á: ${low_24h:,.2f}
- –û–±—ä–µ–º 24—á: {volume_24h:,.0f}

üìà –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:
- –¢—Ä–µ–Ω–¥: {trend}
- –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility}
- ATR: {atr:.2f}"""

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
            if key_levels:
                prompt += "\n\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –£–†–û–í–ù–ò:\n"
                for i, level in enumerate(key_levels[:5], 1):
                    level_type = level.get('type', 'support')
                    level_price = level.get('price', 0)
                    prompt += f"{i}. {level_type.capitalize()}: ${level_price:,.2f}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            if strategies_opinions:
                prompt += "\n\nü§ñ –ú–ù–ï–ù–ò–Ø –¢–û–†–ì–û–í–´–• –°–¢–†–ê–¢–ï–ì–ò–ô:\n"
                for i, strategy in enumerate(strategies_opinions, 1):
                    name = strategy.get('name', 'Unknown')
                    opinion = strategy.get('opinion', 'NEUTRAL')
                    confidence = strategy.get('confidence', 0)
                    reasoning = strategy.get('reasoning', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                    
                    prompt += f"{i}. **{name}**\n"
                    prompt += f"   –ú–Ω–µ–Ω–∏–µ: {opinion}\n"
                    prompt += f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.0%}\n"
                    prompt += f"   –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {reasoning}\n\n"
            
            prompt += """
üìù –ó–ê–î–ê–ß–ê:
–î–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (650-800 —Å–∏–º–≤–æ–ª–æ–≤) –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:

1) **–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è** (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
   - –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Ä—ã–Ω–∫–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?
   - –ö–∞–∫–∏–µ –≥–ª–∞–≤–Ω—ã–µ —Å–∏–ª—ã —Å–µ–π—á–∞—Å –¥–µ–π—Å—Ç–≤—É—é—Ç?

2) **–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤** (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
   - –°–æ–≥–ª–∞—Å—É—é—Ç—Å—è –ª–∏ –º–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π?
   - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º?
   - –ï—Å—Ç—å –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è?

3) **–ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏** (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
   - –ö–∞–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã —Å–µ–π—á–∞—Å?
   - –ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø—Ä–∏ –ø—Ä–æ–±–æ–µ/–æ—Ç–±–æ–µ?

4) **–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–∞ 1-3 –¥–Ω—è** (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
   - –ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
   - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)

5) **–ù–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ** (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
   - –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞
   - –í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è

‚ùó –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫, –∏–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
- –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º - —É–∫–∞–∑—ã–≤–∞–π —Ü–µ–Ω—ã –∏ —É—Ä–æ–≤–Ω–∏
- –ù–ï –¥–∞–≤–∞–π –ø—Ä—è–º—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
- –í –∫–æ–Ω—Ü–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–∞—Ö (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
- –ü–∏—à–∏ —á–µ—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ
"""
            
            logger.debug(f"‚úÖ –ü—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–∑–¥–∞–Ω ({len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return prompt
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π fallback –ø—Ä–æ–º–ø—Ç
            return f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä—ã–Ω–æ–∫ {analysis_data.get('symbol', 'N/A')}:
–¶–µ–Ω–∞: ${analysis_data.get('current_price', 0):,.2f}
–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {analysis_data.get('price_change_24h', 0):+.2f}%
–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤."""

    def _get_comprehensive_fallback_analysis(self, analysis_data: dict) -> str:
        """
        –†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –æ—à–∏–±–∫–µ OpenAI
        
        Args:
            analysis_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            str: –†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        """
        try:
            symbol = analysis_data.get('symbol', 'N/A')
            current_price = analysis_data.get('current_price', 0)
            price_change_24h = analysis_data.get('price_change_24h', 0)
            trend = analysis_data.get('trend', 'NEUTRAL')
            volatility = analysis_data.get('volatility', 'MEDIUM')
            
            strategies_opinions = analysis_data.get('strategies_opinions', [])
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å
            bullish = sum(1 for s in strategies_opinions if s.get('opinion') == 'BULLISH')
            bearish = sum(1 for s in strategies_opinions if s.get('opinion') == 'BEARISH')
            neutral = sum(1 for s in strategies_opinions if s.get('opinion') == 'NEUTRAL')
            total = len(strategies_opinions)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –º–Ω–µ–Ω–∏–µ
            if total > 0:
                if bullish > total * 0.6:
                    consensus = "üü¢ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –±—ã—á—å–∏"
                elif bearish > total * 0.6:
                    consensus = "üî¥ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –º–µ–¥–≤–µ–∂—å–µ"
                else:
                    consensus = "üî∂ –ú–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–∑–¥–µ–ª–∏–ª–∏—Å—å"
            else:
                consensus = "üî∂ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"
            
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
            if trend == "BULLISH":
                trend_desc = "üìà –†—ã–Ω–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–æ—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ"
            elif trend == "BEARISH":
                trend_desc = "üìâ –†—ã–Ω–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–∏—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ"
            else:
                trend_desc = "‚ÜîÔ∏è –†—ã–Ω–æ–∫ –≤ –±–æ–∫–æ–≤–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏"
            
            # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if volatility == "HIGH":
                vol_desc = "‚ö° –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–µ—Ç –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —Ç–∞–∫ –∏ —Ä–∏—Å–∫–∏"
            elif volatility == "MEDIUM":
                vol_desc = "üîÑ –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"
            else:
                vol_desc = "üò¥ –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, —Ä—ã–Ω–æ–∫ –≤ —Å–ø–æ–∫–æ–π–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
            
            fallback = f"""**–¢–ï–ö–£–©–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø**

{symbol} —Ç–æ—Ä–≥—É–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ ${current_price:,.2f} —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º {price_change_24h:+.2f}% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞. {trend_desc}. {vol_desc}.

**–°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–¨ –°–ò–ì–ù–ê–õ–û–í**

{consensus}. –ò–∑ {total} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {bullish} –≤–∏–¥—è—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞, {bearish} —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Ä–∏—Å–∫–∏ —Å–Ω–∏–∂–µ–Ω–∏—è, {neutral} –∑–∞–Ω–∏–º–∞—é—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é.

**–ü–ï–†–°–ü–ï–ö–¢–ò–í–´**

–í –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ (1-3 –¥–Ω—è) –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏ —Å —É—á–µ—Ç–æ–º –Ω–∞–±–ª—é–¥–∞–µ–º–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞. –ö–ª—é—á–µ–≤—ã–º —Ñ–∞–∫—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ä–µ–∞–∫—Ü–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è.

**–ù–ê –ß–¢–û –û–ë–†–ê–¢–ò–¢–¨ –í–ù–ò–ú–ê–ù–ò–ï**

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –æ–±—ä–µ–º–æ–≤ —Ç–æ—Ä–≥–æ–≤ –∏ —Ä–µ–∞–∫—Ü–∏–µ–π —Ü–µ–Ω—ã –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏. –ü—Ä–∏ {'–≤—ã—Å–æ–∫–æ–π' if volatility == 'HIGH' else '—É–º–µ—Ä–µ–Ω–Ω–æ–π'} –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–µ–Ω —Å—Ç—Ä–æ–≥–∏–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç.

‚ö†Ô∏è **AI-–∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.** –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –º–Ω–µ–Ω–∏–π —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.

‚ùó _–î–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º —Å–æ–≤–µ—Ç–æ–º. –¢–æ—Ä–≥–æ–≤–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ —Å–≤—è–∑–∞–Ω–∞ —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ä–∏—Å–∫–∞–º–∏ –ø–æ—Ç–µ—Ä–∏ –∫–∞–ø–∏—Ç–∞–ª–∞._
"""
            
            logger.info("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
            return fallback.strip()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return """
‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞**

–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.

_‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ —Å–≤—è–∑–∞–Ω–∞ —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ä–∏—Å–∫–∞–º–∏._
"""

    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        try:
            if not self.api_key:
                logger.error("‚ùå OpenAI API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
            
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI...")
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            import asyncio
            test_data = {
                'current_price': 50000,
                'price_change_24h': 2.5,
                'volume_24h': 25000
            }
            
            result = asyncio.run(self.analyze_market(test_data))
            
            if result and len(result) > 50:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            else:
                logger.warning("‚ö†Ô∏è OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OpenAI: {e}")
            return False

    def get_stats(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        return {
            "model": self.model,
            "api_key_configured": bool(self.api_key),
            "api_key_length": len(self.api_key) if self.api_key else 0
        }

    def __str__(self):
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
        return f"OpenAIAnalyzer(model={self.model}, api_configured={bool(self.api_key)})"

    def __repr__(self):
        """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
        return f"OpenAIAnalyzer(model='{self.model}', api_key={'‚úì' if self.api_key else '‚úó'})"


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ["OpenAIAnalyzer"]

logger.info("‚úÖ OpenAI Integration module loaded (v2.0 - SignalManager compatible)")
