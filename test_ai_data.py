#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç: –¥–∞–Ω–Ω—ã–µ + —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
–ó–∞–ø—É—Å–∫: python test_ai_full.py
"""
import asyncio
import json
from datetime import datetime, timedelta, timezone

async def main():
    print("\nü§ñ –ü–û–õ–ù–´–ô –¢–ï–°–¢: –î–ê–ù–ù–´–ï ‚Üí OpenAI ‚Üí –û–¢–í–ï–¢\n")
    
    from database import initialize_database, close_database
    from database.repositories import get_market_data_repository
    from strategies.technical_analysis.context_manager import TechnicalAnalysisContextManager
    from strategies import BreakoutStrategy
    from config import Config
    
    symbol = "BTCUSDT"
    
    try:
        # ==================== –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê ====================
        print("1Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
        await initialize_database()
        repository = await get_market_data_repository()
        
        print("2Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Technical Analysis...")
        ta_manager = TechnicalAnalysisContextManager(repository=repository, auto_start_background_updates=False)
        ta_context = await ta_manager.get_context(symbol)
        
        # ==================== –®–ê–ì 2: –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ====================
        print("3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        now = datetime.now(timezone.utc)
        
        candles_1m = await repository.get_candles(symbol, "1m", start_time=now-timedelta(hours=2), limit=100)
        candles_5m = await repository.get_candles(symbol, "5m", start_time=now-timedelta(hours=5), limit=50)
        candles_1h = await repository.get_candles(symbol, "1h", start_time=now-timedelta(hours=24), limit=24)
        candles_1d = await repository.get_candles(symbol, "1d", start_time=now-timedelta(days=180), limit=180)
        
        current_price = float(candles_1m[-1]['close_price']) if candles_1m else 0
        print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –¶–µ–Ω–∞: ${current_price:,.2f}\n")
        
        # ==================== –®–ê–ì 3: –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ò–ì–ù–ê–õ–ê ====================
        print("4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π BreakoutStrategy...")
        strategy = BreakoutStrategy(symbol=symbol, ta_context_manager=ta_manager)
        signal = await strategy.analyze_with_data(symbol, candles_1m, candles_5m, candles_1h, candles_1d, ta_context)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π
        if not signal:
            print("   ‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (—É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)")
            print("   ‚ÑπÔ∏è  –°–æ–∑–¥–∞–º –¥–µ–º–æ-—Å–∏–≥–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∞ AI...\n")
            
            from strategies.base_strategy import SignalType
            signal = strategy.create_signal(
                signal_type=SignalType.BUY,
                strength=0.78,
                confidence=0.85,
                current_price=current_price,
                reasons=[
                    f"–ü—Ä–æ–±–æ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è @ ${ta_context.levels_d1[0].price:,.2f}" if ta_context.levels_d1 else "–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ 1",
                    f"ATR –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–∞ {ta_context.atr_data.current_range_used*100:.0f}%" if ta_context.atr_data else "–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ 2",
                    "–ü–æ–¥–∂–∞—Ç–∏–µ —É —É—Ä–æ–≤–Ω—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ" if ta_context.has_compression else "–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ 3"
                ]
            )
            # –î–æ–±–∞–≤–ª—è–µ–º risk management
            signal.stop_loss = current_price * 0.97
            signal.take_profit = current_price * 1.09
        else:
            print("   ‚úÖ –†–µ–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!\n")
        
        # ==================== –®–ê–ì 4: –ü–û–ö–ê–ó–´–í–ê–ï–ú –î–ê–ù–ù–´–ï ====================
        print("="*80)
        print("üì¶ –î–ê–ù–ù–´–ï –ö–û–¢–û–†–´–ï –û–¢–ü–†–ê–í–õ–Ø–Æ–¢–°–Ø –í OpenAI")
        print("="*80)
        
        signal_dict = signal.to_dict()
        
        print(f"\nüî∏ –û–°–ù–û–í–ù–û–ï:")
        print(f"   –°–∏–º–≤–æ–ª: {signal_dict['symbol']}")
        print(f"   –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {signal_dict['signal_type']}")
        print(f"   –°–∏–ª–∞: {signal_dict['strength']:.2f} ({signal_dict['strength_level']})")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal_dict['confidence']:.2f} ({signal_dict['confidence_level']})")
        print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${signal_dict['price']:,.2f}")
        print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal_dict['strategy_name']}")
        
        print(f"\nüî∏ –ü–†–ò–ß–ò–ù–´:")
        for i, reason in enumerate(signal_dict['reasons'], 1):
            print(f"   {i}. {reason}")
        
        print(f"\nüî∏ –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢:")
        if signal_dict['stop_loss']:
            print(f"   Stop Loss: ${signal_dict['stop_loss']:,.2f}")
            risk_percent = abs((signal_dict['stop_loss'] - signal_dict['price']) / signal_dict['price'] * 100)
            print(f"   –†–∏—Å–∫: {risk_percent:.2f}%")
        if signal_dict['take_profit']:
            print(f"   Take Profit: ${signal_dict['take_profit']:,.2f}")
            reward_percent = abs((signal_dict['take_profit'] - signal_dict['price']) / signal_dict['price'] * 100)
            print(f"   –ü—Ä–æ—Ñ–∏—Ç: {reward_percent:.2f}%")
            if signal_dict['stop_loss']:
                rr_ratio = reward_percent / risk_percent
                print(f"   R:R —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {rr_ratio:.2f}:1")
        
        print(f"\nüî∏ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ö–û–ù–¢–ï–ö–°–¢:")
        print(f"   –£—Ä–æ–≤–Ω–µ–π –Ω–∞–π–¥–µ–Ω–æ: {len(ta_context.levels_d1)}")
        if ta_context.levels_d1:
            nearest = ta_context.levels_d1[0]
            print(f"   –ë–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å: {nearest.level_type} @ ${nearest.price:,.2f} (—Å–∏–ª–∞ {nearest.strength:.2f})")
        if ta_context.atr_data:
            print(f"   ATR: {ta_context.atr_data.calculated_atr:.2f}")
            print(f"   –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {(1 - ta_context.atr_data.current_range_used)*100:.0f}% –æ—Å—Ç–∞–ª—Å—è")
        print(f"   –¢—Ä–µ–Ω–¥: {ta_context.dominant_trend_h1.value if ta_context.dominant_trend_h1 else 'N/A'}")
        print(f"   –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è: {'–î–∞' if ta_context.consolidation_detected else '–ù–µ—Ç'}")
        
        # ==================== –®–ê–ì 5: –§–û–†–ú–ò–†–£–ï–ú –ü–†–û–ú–ü–¢ ====================
        print("\n" + "="*80)
        print("üí¨ –ü–†–û–ú–ü–¢ –î–õ–Ø OpenAI")
        print("="*80)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è {signal_dict['symbol']}:

–°–ò–ì–ù–ê–õ:
- –¢–∏–ø: {signal_dict['signal_type']}
- –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${signal_dict['price']:,.2f}
- –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal_dict['strength']:.2f}/1.0 ({signal_dict['strength_level']})
- –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal_dict['confidence']:.2f}/1.0 ({signal_dict['confidence_level']})
- –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal_dict['strategy_name']}

–ü–†–ò–ß–ò–ù–´ –°–ò–ì–ù–ê–õ–ê:
{chr(10).join('‚Ä¢ ' + r for r in signal_dict['reasons'])}

–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:
- –¢—Ä–µ–Ω–¥: {ta_context.dominant_trend_h1.value if ta_context.dominant_trend_h1 else '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
- ATR –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {ta_context.atr_data.current_range_used*100:.0f}% (–æ—Å—Ç–∞—Ç–æ–∫ {(1-ta_context.atr_data.current_range_used)*100:.0f}%)
- –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è: {'–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞' if ta_context.consolidation_detected else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
- –ü–æ–¥–∂–∞—Ç–∏–µ: {'–µ—Å—Ç—å' if ta_context.has_compression else '–Ω–µ—Ç'}
- –ë–ª–∏–∂–∞–π—à–∏—Ö —É—Ä–æ–≤–Ω–µ–π: {len([l for l in ta_context.levels_d1 if abs(l.price - signal_dict['price'])/signal_dict['price'] < 0.02])}

–†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢:
- Stop Loss: ${signal_dict['stop_loss']:,.2f} ({abs((signal_dict['stop_loss']-signal_dict['price'])/signal_dict['price']*100):.2f}%)
- Take Profit: ${signal_dict['take_profit']:,.2f} ({abs((signal_dict['take_profit']-signal_dict['price'])/signal_dict['price']*100):.2f}%)
- R:R —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {abs((signal_dict['take_profit']-signal_dict['price'])/signal_dict['price']) / abs((signal_dict['stop_loss']-signal_dict['price'])/signal_dict['price']):.2f}:1

–î–∞–π –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
1. –ö–ê–ß–ï–°–¢–í–û –°–ò–ì–ù–ê–õ–ê (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. –ö–õ–Æ–ß–ï–í–´–ï –†–ò–°–ö–ò (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
3. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø (–≤—Ö–æ–¥–∏—Ç—å/–∂–¥–∞—Ç—å/–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å + –ø–æ—á–µ–º—É)
"""
        
        print(prompt)
        
        # ==================== –®–ê–ì 6: –ó–ê–ü–†–û–° –ö OpenAI ====================
        print("\n" + "="*80)
        print("ü§ñ –û–¢–ü–†–ê–í–ö–ê –ó–ê–ü–†–û–°–ê –í OpenAI...")
        print("="*80)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        if not Config.OPENAI_API_KEY or Config.OPENAI_API_KEY == "YOUR_OPENAI_API_KEY":
            print("\n‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è\n")
        else:
            print(f"\n‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–º–æ–¥–µ–ª—å: {Config.OPENAI_MODEL})...")
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –Ω–∞–ø—Ä—è–º—É—é
                from openai_integration import OpenAIAnalyzer
                
                analyzer = OpenAIAnalyzer()
                ai_response = await analyzer.analyze_signal(signal)
                
                print("\n‚úÖ –û–¢–í–ï–¢ –ü–û–õ–£–ß–ï–ù!\n")
                
                print("="*80)
                print("üéØ –ê–ù–ê–õ–ò–ó –û–¢ OpenAI")
                print("="*80)
                print(f"\n{ai_response}\n")
                print("="*80)
                
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI: {e}")
                import traceback
                traceback.print_exc()
        
        print("\n‚úÖ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        await close_database()

if __name__ == "__main__":
    asyncio.run(main())
