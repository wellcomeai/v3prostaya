#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –≤ OpenAI
–ó–∞–ø—É—Å–∫: python test_ai_data.py
"""
import asyncio
import json
from datetime import datetime, timedelta, timezone

async def main():
    print("\nü§ñ –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø AI –ê–ù–ê–õ–ò–ó–ê\n")
    
    from database import initialize_database, close_database
    from database.repositories import get_market_data_repository
    from strategies.technical_analysis.context_manager import TechnicalAnalysisContextManager
    from strategies import BreakoutStrategy
    
    symbol = "BTCUSDT"
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        await initialize_database()
        repository = await get_market_data_repository()
        ta_manager = TechnicalAnalysisContextManager(repository=repository, auto_start_background_updates=False)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...\n")
        now = datetime.now(timezone.utc)
        ta_context = await ta_manager.get_context(symbol)
        
        candles_1m = await repository.get_candles(symbol, "1m", start_time=now-timedelta(hours=2), limit=100)
        candles_5m = await repository.get_candles(symbol, "5m", start_time=now-timedelta(hours=5), limit=50)
        candles_1h = await repository.get_candles(symbol, "1h", start_time=now-timedelta(hours=24), limit=24)
        candles_1d = await repository.get_candles(symbol, "1d", start_time=now-timedelta(days=180), limit=180)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
        print("üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞...\n")
        strategy = BreakoutStrategy(symbol=symbol, ta_context_manager=ta_manager)
        signal = await strategy.analyze_with_data(symbol, candles_1m, candles_5m, candles_1h, candles_1d, ta_context)
        
        if not signal:
            print("‚ÑπÔ∏è  –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–æ–∑–¥–∞–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª...\n")
            from strategies.base_strategy import SignalType
            signal = strategy.create_signal(
                signal_type=SignalType.BUY,
                strength=0.75,
                confidence=0.8,
                current_price=float(candles_1m[-1]['close_price']),
                reasons=["–¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AI"]
            )
        
        # ========== –ü–û–ö–ê–ó–´–í–ê–ï–ú –ß–¢–û –û–¢–ü–†–ê–í–õ–Ø–ï–¢–°–Ø –í AI ==========
        
        print("=" * 80)
        print("üì¶ –î–ê–ù–ù–´–ï –°–ò–ì–ù–ê–õ–ê (—á—Ç–æ –≤–∏–¥–∏—Ç AI)")
        print("=" * 80)
        
        signal_dict = signal.to_dict()
        
        print("\nüîπ –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
        print(f"   –°–∏–º–≤–æ–ª: {signal_dict['symbol']}")
        print(f"   –¢–∏–ø: {signal_dict['signal_type']}")
        print(f"   –°–∏–ª–∞: {signal_dict['strength']:.2f} ({signal_dict['strength_level']})")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal_dict['confidence']:.2f} ({signal_dict['confidence_level']})")
        print(f"   –¶–µ–Ω–∞: ${signal_dict['price']:,.2f}")
        print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal_dict['strategy_name']}")
        
        print("\nüîπ –ü–†–ò–ß–ò–ù–´ –°–ò–ì–ù–ê–õ–ê:")
        for i, reason in enumerate(signal_dict['reasons'], 1):
            print(f"   {i}. {reason}")
        
        print("\nüîπ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:")
        for key, value in signal_dict['technical_indicators'].items():
            if isinstance(value, dict):
                print(f"   ‚Ä¢ {key}:")
                for k, v in value.items():
                    print(f"      - {k}: {v}")
            else:
                print(f"   ‚Ä¢ {key}: {value}")
        
        print("\nüîπ –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò:")
        print(f"   Stop Loss: ${signal_dict['stop_loss']:,.2f}" if signal_dict['stop_loss'] else "   Stop Loss: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print(f"   Take Profit: ${signal_dict['take_profit']:,.2f}" if signal_dict['take_profit'] else "   Take Profit: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print(f"   –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {signal_dict['position_size_recommendation']*100:.2f}%")
        
        print("\nüîπ –†–´–ù–û–ß–ù–´–ï –£–°–õ–û–í–ò–Ø:")
        for key, value in signal_dict['market_conditions'].items():
            print(f"   ‚Ä¢ {key}: {value}")
        
        print("\nüîπ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û:")
        print(f"   Quality Score: {signal_dict['quality_score']:.2f}")
        print(f"   –ò—Å—Ç–µ–∫–∞–µ—Ç: {signal_dict['expires_at']}")
        print(f"   –í–∞–ª–∏–¥–µ–Ω: {signal_dict['is_valid']}")
        
        # ========== –ü–û–ö–ê–ó–´–í–ê–ï–ú –ö–û–ù–¢–ï–ö–°–¢ –†–´–ù–ö–ê ==========
        
        print("\n" + "=" * 80)
        print("üìä –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ö–û–ù–¢–ï–ö–°–¢ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI)")
        print("=" * 80)
        
        print("\nüîπ –£–†–û–í–ù–ò –ü–û–î–î–ï–†–ñ–ö–ò/–°–û–ü–†–û–¢–ò–í–õ–ï–ù–ò–Ø:")
        for i, level in enumerate(ta_context.levels_d1[:5], 1):
            print(f"   #{i}: {level.level_type.upper()} @ ${level.price:,.2f}")
            print(f"       –°–∏–ª–∞: {level.strength:.2f} | –ö–∞—Å–∞–Ω–∏—è: {level.touches} | –°–∏–ª—å–Ω—ã–π: {level.is_strong}")
        
        if ta_context.atr_data:
            print("\nüîπ ATR (–ó–ê–ü–ê–° –•–û–î–ê):")
            print(f"   Calculated ATR: {ta_context.atr_data.calculated_atr:.2f}")
            print(f"   ATR –≤ %: {ta_context.atr_data.atr_percentage:.2f}%")
            print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {ta_context.atr_data.current_range_used*100:.1f}%")
            print(f"   –û—Å—Ç–∞–ª–æ—Å—å: {ta_context.atr_data.remaining_range:.2f}")
        
        print("\nüîπ –†–´–ù–û–ß–ù–´–ï –£–°–õ–û–í–ò–Ø:")
        print(f"   –¢—Ä–µ–Ω–¥ H1: {ta_context.dominant_trend_h1.value if ta_context.dominant_trend_h1 else 'N/A'}")
        print(f"   –¢—Ä–µ–Ω–¥ D1: {ta_context.dominant_trend_d1.value if ta_context.dominant_trend_d1 else 'N/A'}")
        print(f"   –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è: {'–î–∞' if ta_context.consolidation_detected else '–ù–µ—Ç'}")
        print(f"   –ü–æ–¥–∂–∞—Ç–∏–µ: {'–î–∞' if ta_context.has_compression else '–ù–µ—Ç'}")
        print(f"   V-—Ñ–æ—Ä–º–∞—Ü–∏—è: {'–î–∞' if ta_context.has_v_formation else '–ù–µ—Ç'}")
        
        # ========== –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–†–û–ú–ü–¢ –î–õ–Ø AI ==========
        
        print("\n" + "=" * 80)
        print("üí¨ –ü–†–ò–ú–ï–†–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø OpenAI")
        print("=" * 80)
        
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª:

–°–ò–ì–ù–ê–õ:
- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {signal_dict['symbol']}
- –¢–∏–ø: {signal_dict['signal_type']}
- –°–∏–ª–∞: {signal_dict['strength']:.2f} ({signal_dict['strength_level']})
- –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal_dict['confidence']:.2f}
- –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${signal_dict['price']:,.2f}
- –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal_dict['strategy_name']}

–ü–†–ò–ß–ò–ù–´:
{chr(10).join('- ' + r for r in signal_dict['reasons'])}

–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ö–û–ù–¢–ï–ö–°–¢:
- –¢—Ä–µ–Ω–¥: {ta_context.dominant_trend_h1.value if ta_context.dominant_trend_h1 else 'N/A'}
- ATR –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {ta_context.atr_data.current_range_used*100:.1f}% (–æ—Å—Ç–∞–ª–æ—Å—å {ta_context.atr_data.remaining_range:.2f})
- –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è: {'–î–∞' if ta_context.consolidation_detected else '–ù–µ—Ç'}
- –£—Ä–æ–≤–Ω–µ–π —Ä—è–¥–æ–º: {len([l for l in ta_context.levels_d1 if abs(l.price - signal_dict['price']) / signal_dict['price'] < 0.02])}

–†–ò–°–ö –ú–ï–ù–ï–î–ñ–ú–ï–ù–¢:
- Stop Loss: ${signal_dict['stop_loss']:,.2f}
- Take Profit: ${signal_dict['take_profit']:,.2f}
- –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {signal_dict['position_size_recommendation']*100:.2f}%

–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):
1. –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞
2. –ö–ª—é—á–µ–≤—ã–µ —Ä–∏—Å–∫–∏
3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è (–ø–æ–¥—Ö–æ–¥–∏—Ç/–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Ö–æ–¥–∞)
"""
        
        print(prompt)
        
        # ========== –ü–û–õ–ù–´–ô JSON –î–õ–Ø –û–¢–õ–ê–î–ö–ò ==========
        
        print("\n" + "=" * 80)
        print("üìÑ –ü–û–õ–ù–´–ô JSON –°–ò–ì–ù–ê–õ–ê (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)")
        print("=" * 80)
        print("\n" + json.dumps(signal_dict, indent=2, default=str))
        
        print("\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        await close_database()

if __name__ == "__main__":
    asyncio.run(main())
