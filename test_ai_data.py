#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç: –¥–∞–Ω–Ω—ã–µ + —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
–ó–∞–ø—É—Å–∫: python test_ai_data.py
"""
import asyncio
from datetime import datetime, timedelta, timezone

async def main():
    print("\nü§ñ –ü–û–õ–ù–´–ô –¢–ï–°–¢: –î–ê–ù–ù–´–ï ‚Üí OpenAI ‚Üí –û–¢–í–ï–¢\n")
    
    from database import initialize_database, close_database
    from database.repositories import get_market_data_repository
    from strategies.technical_analysis.context_manager import TechnicalAnalysisContextManager
    from strategies import BreakoutStrategy
    from openai_integration import OpenAIAnalyzer
    from config import Config
    
    symbol = "BTCUSDT"
    
    try:
        # ==================== –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê ====================
        print("1Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
        await initialize_database()
        repository = await get_market_data_repository()
        
        print("2Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Technical Analysis...")
        ta_manager = TechnicalAnalysisContextManager(repository=repository, auto_start_background_updates=False)
        ta_context = await ta_manager.get_context(symbol)
        
        # ==================== –®–ê–ì 2: –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ====================
        print("3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        now = datetime.now(timezone.utc)
        
        candles_1m = await repository.get_candles(symbol, "1m", start_time=now-timedelta(hours=2), limit=100)
        candles_5m = await repository.get_candles(symbol, "5m", start_time=now-timedelta(hours=5), limit=50)
        candles_1h = await repository.get_candles(symbol, "1h", start_time=now-timedelta(hours=24), limit=24)
        candles_1d = await repository.get_candles(symbol, "1d", start_time=now-timedelta(days=180), limit=180)
        
        current_price = float(candles_1m[-1]['close_price']) if candles_1m else 0
        print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –¶–µ–Ω–∞: ${current_price:,.2f}\n")
        
        # ==================== –®–ê–ì 3: –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ò–ì–ù–ê–õ–ê ====================
        print("4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π BreakoutStrategy...")
        strategy = BreakoutStrategy(symbol=symbol, ta_context_manager=ta_manager)
        signal = await strategy.analyze_with_data(symbol, candles_1m, candles_5m, candles_1h, candles_1d, ta_context)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π
        if not signal:
            print("   ‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (—É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)")
            print("   ‚ÑπÔ∏è  –°–æ–∑–¥–∞–º –¥–µ–º–æ-—Å–∏–≥–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∞ AI...\n")
            
            from strategies.base_strategy import SignalType
            signal = strategy.create_signal(
                signal_type=SignalType.BUY,
                strength=0.78,
                confidence=0.85,
                current_price=current_price,
                reasons=[
                    f"–ü—Ä–æ–±–æ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è @ ${ta_context.levels_d1[0].price:,.2f}" if ta_context.levels_d1 else "–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ 1",
                    "–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                    "–¢—Ä–µ–Ω–¥ –≤–æ—Å—Ö–æ–¥—è—â–∏–π"
                ]
            )
            signal.stop_loss = current_price * 0.97
            signal.take_profit = current_price * 1.09
        else:
            print("   ‚úÖ –†–µ–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!\n")
        
        # ==================== –®–ê–ì 4: –ü–û–ö–ê–ó–´–í–ê–ï–ú –î–ê–ù–ù–´–ï ====================
        print("="*80)
        print("üì¶ –î–ê–ù–ù–´–ï –ö–û–¢–û–†–´–ï –û–¢–ü–†–ê–í–õ–Ø–Æ–¢–°–Ø –í OpenAI")
        print("="*80)
        
        signal_dict = signal.to_dict()
        
        print(f"\nüî∏ –û–°–ù–û–í–ù–û–ï:")
        print(f"   –°–∏–º–≤–æ–ª: {signal_dict['symbol']}")
        print(f"   –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {signal_dict['signal_type']}")
        print(f"   –°–∏–ª–∞: {signal_dict['strength']:.2f} ({signal_dict['strength_level']})")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal_dict['confidence']:.2f} ({signal_dict['confidence_level']})")
        print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${signal_dict['price']:,.2f}")
        print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal_dict['strategy_name']}")
        
        print(f"\nüî∏ –ü–†–ò–ß–ò–ù–´:")
        for i, reason in enumerate(signal_dict['reasons'], 1):
            print(f"   {i}. {reason}")
        
        print(f"\nüî∏ –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢:")
        if signal_dict['stop_loss']:
            risk_percent = abs((signal_dict['stop_loss'] - signal_dict['price']) / signal_dict['price'] * 100)
            print(f"   Stop Loss: ${signal_dict['stop_loss']:,.2f} (—Ä–∏—Å–∫ {risk_percent:.2f}%)")
        if signal_dict['take_profit']:
            reward_percent = abs((signal_dict['take_profit'] - signal_dict['price']) / signal_dict['price'] * 100)
            print(f"   Take Profit: ${signal_dict['take_profit']:,.2f} (–ø—Ä–æ—Ñ–∏—Ç {reward_percent:.2f}%)")
            if signal_dict['stop_loss']:
                rr_ratio = reward_percent / risk_percent
                print(f"   R:R —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {rr_ratio:.2f}:1")
        
        print(f"\nüî∏ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ö–û–ù–¢–ï–ö–°–¢:")
        print(f"   –£—Ä–æ–≤–Ω–µ–π –Ω–∞–π–¥–µ–Ω–æ: {len(ta_context.levels_d1)}")
        if ta_context.levels_d1:
            nearest = ta_context.levels_d1[0]
            print(f"   –ë–ª–∏–∂–∞–π—à–∏–π: {nearest.level_type} @ ${nearest.price:,.2f} (—Å–∏–ª–∞ {nearest.strength:.2f})")
        if ta_context.atr_data:
            print(f"   ATR: {ta_context.atr_data.calculated_atr:.2f}")
            print(f"   –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {(1 - ta_context.atr_data.current_range_used)*100:.0f}%")
        print(f"   –¢—Ä–µ–Ω–¥: {ta_context.dominant_trend_h1.value if ta_context.dominant_trend_h1 else 'N/A'}")
        print(f"   –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è: {'–î–∞' if ta_context.consolidation_detected else '–ù–µ—Ç'}")
        
        # ==================== –®–ê–ì 5: –ü–û–î–ì–û–¢–û–í–ö–ê market_data –î–õ–Ø OpenAI ====================
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        price_change_1m = 0
        price_change_5m = 0
        price_change_24h = 0
        
        if len(candles_1m) >= 2:
            price_change_1m = (float(candles_1m[-1]['close_price']) - float(candles_1m[-2]['close_price'])) / float(candles_1m[-2]['close_price']) * 100
        
        if len(candles_5m) >= 2:
            price_change_5m = (float(candles_5m[-1]['close_price']) - float(candles_5m[-2]['close_price'])) / float(candles_5m[-2]['close_price']) * 100
        
        if len(candles_1d) >= 2:
            price_change_24h = (float(candles_1d[-1]['close_price']) - float(candles_1d[-2]['close_price'])) / float(candles_1d[-2]['close_price']) * 100
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º market_data —Å–ª–æ–≤–∞—Ä—å (–∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç analyze_market)
        market_data = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            'current_price': signal_dict['price'],
            'price_change_1m': price_change_1m,
            'price_change_5m': price_change_5m,
            'price_change_24h': price_change_24h,
            'volume_24h': float(candles_1d[-1]['volume']) if candles_1d else 0,
            'high_24h': float(candles_1d[-1]['high_price']) if candles_1d else current_price,
            'low_24h': float(candles_1d[-1]['low_price']) if candles_1d else current_price,
            'open_interest': 0,
            
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–∏–≥–Ω–∞–ª–∞
            'signal_type': signal_dict['signal_type'],
            'signal_strength': signal_dict['strength'],
            'signal_confidence': signal_dict['confidence'],
            'strategy_name': signal_dict['strategy_name'],
            'signal_reasons': signal_dict['reasons'],
            
            # –ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            'hourly_data': {
                'price_trend': ta_context.dominant_trend_h1.value if ta_context.dominant_trend_h1 else 'unknown',
                'avg_price_24h': current_price,
                'price_volatility': (float(candles_1d[-1]['high_price']) - float(candles_1d[-1]['low_price'])) / float(candles_1d[-1]['low_price']) * 100 if candles_1d else 0,
                'avg_hourly_volume': float(candles_1d[-1]['volume']) / 24 if candles_1d else 0
            }
        }
        
        print("\n" + "="*80)
        print("üì§ –°–¢–†–£–ö–¢–£–†–ê market_data –î–õ–Ø OpenAI")
        print("="*80)
        print(f"\nüí∞ –¶–µ–Ω–∞: ${market_data['current_price']:,.2f}")
        print(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è: 1m={price_change_1m:+.2f}%, 5m={price_change_5m:+.2f}%, 24h={price_change_24h:+.2f}%")
        print(f"üìà –û–±—ä–µ–º 24h: {market_data['volume_24h']:,.0f}")
        print(f"üî∏ –°–∏–≥–Ω–∞–ª: {market_data['signal_type']} (—Å–∏–ª–∞={market_data['signal_strength']:.2f})")
        print(f"üß† –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {market_data['strategy_name']}")
        print(f"üìù –ü—Ä–∏—á–∏–Ω: {len(market_data['signal_reasons'])}")
        
        # ==================== –®–ê–ì 6: –ó–ê–ü–†–û–° –ö OpenAI ====================
        print("\n" + "="*80)
        print("ü§ñ –û–¢–ü–†–ê–í–ö–ê –ó–ê–ü–†–û–°–ê –í OpenAI...")
        print("="*80)
        
        if not Config.OPENAI_API_KEY or Config.OPENAI_API_KEY == "YOUR_OPENAI_API_KEY":
            print("\n‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            print("   –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (fallback)\n")
        else:
            print(f"\n‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ OpenAI (–º–æ–¥–µ–ª—å: {Config.OPENAI_MODEL})...\n")
        
        try:
            analyzer = OpenAIAnalyzer()
            
            # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –í–´–ó–û–í: analyze_market(market_data)
            ai_response = await analyzer.analyze_market(market_data)
            
            print("="*80)
            print("‚úÖ –ê–ù–ê–õ–ò–ó –û–¢ OpenAI (–∏–ª–∏ fallback)")
            print("="*80)
            print(f"\n{ai_response}\n")
            print("="*80)
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI: {e}")
            import traceback
            traceback.print_exc()
        
        print("\n‚úÖ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù\n")
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        await close_database()

if __name__ == "__main__":
    asyncio.run(main())
