#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ Render Shell
–ó–∞–ø—É—Å–∫: python test_quick.py
"""
import asyncio
import sys
from datetime import datetime, timedelta, timezone

async def main():
    print("\nüî¨ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–¢–†–ê–¢–ï–ì–ò–ô\n")
    
    # –ò–º–ø–æ—Ä—Ç—ã
    from database import initialize_database, close_database
    from database.repositories import get_market_data_repository
    from strategies.technical_analysis.context_manager import TechnicalAnalysisContextManager
    from strategies import BreakoutStrategy
    
    symbol = "BTCUSDT"  # –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π —Å–∏–º–≤–æ–ª
    
    try:
        # 1. –ë–î
        print("1Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
        await initialize_database()
        repository = await get_market_data_repository()
        print("‚úÖ –ë–î –≥–æ—Ç–æ–≤–∞\n")
        
        # 2. Technical Analysis
        print("2Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Technical Analysis...")
        ta_manager = TechnicalAnalysisContextManager(
            repository=repository,
            auto_start_background_updates=False
        )
        ta_context = await ta_manager.get_context(symbol)
        print(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è {symbol}\n")
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î...")
        now = datetime.now(timezone.utc)
        
        candles_1m = await repository.get_candles(symbol, "1m", start_time=now-timedelta(hours=2), limit=100)
        candles_5m = await repository.get_candles(symbol, "5m", start_time=now-timedelta(hours=5), limit=50)
        candles_1h = await repository.get_candles(symbol, "1h", start_time=now-timedelta(hours=24), limit=24)
        candles_1d = await repository.get_candles(symbol, "1d", start_time=now-timedelta(days=180), limit=180)
        
        print(f"   M1: {len(candles_1m)} —Å–≤–µ—á–µ–π")
        print(f"   M5: {len(candles_5m)} —Å–≤–µ—á–µ–π")
        print(f"   H1: {len(candles_1h)} —Å–≤–µ—á–µ–π")
        print(f"   D1: {len(candles_1d)} —Å–≤–µ—á–µ–π")
        
        if candles_1m:
            current_price = float(candles_1m[-1]['close_price'])
            print(f"   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:,.2f}\n")
        
        # 4. Technical Analysis –¥–µ—Ç–∞–ª–∏
        print("4Ô∏è‚É£ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:")
        print(f"   üìä –£—Ä–æ–≤–Ω–µ–π D1: {len(ta_context.levels_d1)}")
        if ta_context.levels_d1:
            for i, level in enumerate(ta_context.levels_d1[:3], 1):
                print(f"      #{i}: {level.level_type} @ ${level.price:,.2f} (strength={level.strength:.2f})")
        
        if ta_context.atr_data:
            print(f"   üìà ATR: {ta_context.atr_data.calculated_atr:.2f}")
            print(f"   üîã –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {ta_context.atr_data.current_range_used*100:.1f}%")
        
        print(f"   üéØ –¢—Ä–µ–Ω–¥: {ta_context.dominant_trend_h1.value if ta_context.dominant_trend_h1 else 'N/A'}")
        print(f"   üí• –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è: {'–î–∞' if ta_context.consolidation_detected else '–ù–µ—Ç'}\n")
        
        # 5. –¢–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        print("5Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ BreakoutStrategy...")
        strategy = BreakoutStrategy(
            symbol=symbol,
            ta_context_manager=ta_manager
        )
        
        signal = await strategy.analyze_with_data(
            symbol=symbol,
            candles_1m=candles_1m,
            candles_5m=candles_5m,
            candles_1h=candles_1h,
            candles_1d=candles_1d,
            ta_context=ta_context
        )
        
        if signal:
            print(f"   üîî –°–ò–ì–ù–ê–õ: {signal.signal_type.value}")
            print(f"   üí™ –°–∏–ª–∞: {signal.strength:.2f}")
            print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f}")
            print(f"   üíµ –¶–µ–Ω–∞: ${signal.price:,.2f}")
            print(f"   üìù –ü—Ä–∏—á–∏–Ω—ã:")
            for reason in signal.reasons:
                print(f"      ‚Ä¢ {reason}")
        else:
            print("   ‚ÑπÔ∏è  –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞")
        
        print("\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        await close_database()

if __name__ == "__main__":
    asyncio.run(main())
