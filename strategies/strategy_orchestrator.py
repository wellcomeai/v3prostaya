"""
Strategy Orchestrator - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

–£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:
- –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
- –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Repository –∏ TA Context Manager
- –ü–µ—Ä–µ–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –≤ SignalManager –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
- –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫

Architecture:
- TechnicalAnalysisContextManager -> –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Ö–Ω. –∞–Ω–∞–ª–∏–∑
- Repository -> —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
- Strategies -> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
- SignalManager -> –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞

Author: Trading Bot Team
Version: 3.1.1 - FIXED: –£–±—Ä–∞–Ω end_time –¥–ª—è M1/M5 (—Ä–∞–±–æ—Ç–∞ —Å —Ñ—å—é—á–µ—Ä—Å–∞–º–∏ –≤ –Ω–µ—Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã)
"""

import asyncio
import logging
from datetime import datetime, timezone, timedelta
from typing import List, Dict, Any, Optional
from dataclasses import dataclass, field
from enum import Enum

logger = logging.getLogger(__name__)


class OrchestratorStatus(Enum):
    """–°—Ç–∞—Ç—É—Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    IDLE = "idle"
    RUNNING = "running"
    ANALYZING = "analyzing"
    PAUSED = "paused"
    ERROR = "error"
    STOPPED = "stopped"


@dataclass
class AnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
    symbol: str
    success: bool
    signals_count: int
    strategies_run: int
    execution_time: float
    error: Optional[str] = None
    timestamp: datetime = field(default_factory=lambda: datetime.now(timezone.utc))


@dataclass
class CycleStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    cycle_number: int
    start_time: datetime
    end_time: Optional[datetime] = None
    symbols_analyzed: int = 0
    signals_count: int = 0
    errors_count: int = 0
    execution_time: float = 0.0
    
    def finalize(self):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ü–∏–∫–ª –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è"""
        self.end_time = datetime.now(timezone.utc)
        self.execution_time = (self.end_time - self.start_time).total_seconds()


class StrategyOrchestrator:
    """
    üé≠ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π v3.1.1
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.
    
    Features:
    - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
    - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    - –£–º–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏
    - Graceful shutdown
    - ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å data sync
    - ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ end_time –¥–ª—è M1/M5)
    - ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π
    - ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ—å—é—á–µ—Ä—Å–æ–≤ —Å –Ω–µ—Ä–∞–±–æ—á–∏–º–∏ —á–∞—Å–∞–º–∏
    """
    
    # ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    MIN_CANDLES = {
        "1m": 100,   # 100 –º–∏–Ω—É—Ç = 1.5 —á–∞—Å–∞
        "5m": 50,    # 250 –º–∏–Ω—É—Ç = 4+ —á–∞—Å–∞
        "1h": 24,    # 24 —á–∞—Å–∞ = 1 –¥–µ–Ω—å
        "1d": 180    # 180 –¥–Ω–µ–π = ~6 –º–µ—Å—è—Ü–µ–≤
    }
    
    # ‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å data sync
    SYNC_START_SECOND = 40  # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ :40 —Å–µ–∫—É–Ω–¥—ã –∫–∞–∂–¥–æ–π –º–∏–Ω—É—Ç—ã
    
    def __init__(
        self,
        repository,
        ta_context_manager,
        signal_manager,
        symbols: List[str],
        analysis_interval_seconds: int = 60,
        enabled_strategies: List[str] = None
    ):
        """
        Args:
            repository: MarketDataRepository –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
            ta_context_manager: TechnicalAnalysisContextManager –¥–ª—è —Ç–µ—Ö–Ω. –∞–Ω–∞–ª–∏–∑–∞
            signal_manager: SignalManager –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_interval_seconds: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
            enabled_strategies: –°–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (None = –≤—Å–µ)
        """
        self.repository = repository
        self.ta_context_manager = ta_context_manager
        self.signal_manager = signal_manager
        self.symbols = symbols
        self.analysis_interval = analysis_interval_seconds
        
        # –°—Ç–∞—Ç—É—Å
        self.status = OrchestratorStatus.IDLE
        self.is_running = False
        self.start_time: Optional[datetime] = None
        
        # –ó–∞–¥–∞—á–∏
        self._main_task: Optional[asyncio.Task] = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.strategies = self._initialize_strategies(enabled_strategies)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_cycles": 0,
            "total_symbols_analyzed": 0,
            "total_signals_generated": 0,
            "total_errors": 0,
            "uptime_seconds": 0,
            "last_cycle_time": None,
            "average_cycle_time": 0.0,
            "cycles_history": []
        }
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ü–∏–∫–ª–∞
        self.last_cycle: Optional[CycleStats] = None
        self.symbol_results: Dict[str, AnalysisResult] = {}
        
        logger.info("=" * 70)
        logger.info("üé≠ StrategyOrchestrator v3.1.1 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info("=" * 70)
        logger.info(f"   ‚Ä¢ –°–∏–º–≤–æ–ª—ã: {len(symbols)}")
        logger.info(f"   ‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏: {len(self.strategies)}")
        logger.info(f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞: {analysis_interval_seconds}s")
        logger.info(f"   ‚Ä¢ –°—Ç–∞—Ä—Ç –≤ : {self.SYNC_START_SECOND} —Å–µ–∫—É–Ω–¥—ã –∫–∞–∂–¥–æ–π –º–∏–Ω—É—Ç—ã")
        logger.info(f"   ‚Ä¢ Repository: {'‚úÖ' if repository else '‚ùå'}")
        logger.info(f"   ‚Ä¢ TA Manager: {'‚úÖ' if ta_context_manager else '‚ùå'}")
        logger.info(f"   ‚Ä¢ Signal Manager: {'‚úÖ' if signal_manager else '‚ùå'}")
        logger.info("=" * 70)
        
        for strategy in self.strategies:
            logger.info(f"   ‚úÖ {strategy.__class__.__name__}")
        
        logger.info("=" * 70)
        logger.info("üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º:")
        for interval, min_count in self.MIN_CANDLES.items():
            logger.info(f"   ‚Ä¢ {interval}: {min_count} —Å–≤–µ—á–µ–π")
        logger.info("=" * 70)
    
    def _initialize_strategies(self, enabled_strategies: List[str] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        from strategies import (
            BreakoutStrategy,
            BounceStrategy,
            FalseBreakoutStrategy
        )
        
        available_strategies = {
            "breakout": BreakoutStrategy,
            "bounce": BounceStrategy,
            "false_breakout": FalseBreakoutStrategy
        }
        
        if enabled_strategies is None:
            enabled_strategies = list(available_strategies.keys())
        
        strategies = []
        for name in enabled_strategies:
            if name.lower() in available_strategies:
                strategy_class = available_strategies[name.lower()]
                try:
                    strategy = strategy_class(
                        symbol="PLACEHOLDER",
                        ta_context_manager=self.ta_context_manager
                    )
                    strategies.append(strategy)
                    logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_class.__name__}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {name}: {e}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {name}")
        
        if not strategies:
            logger.warning("‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        
        return strategies
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è StrategyOrchestrator —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ StrategyOrchestrator...")
            
            if not self.repository:
                raise ValueError("Repository –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            if not self.ta_context_manager:
                raise ValueError("TechnicalAnalysisContextManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            if not self.signal_manager:
                raise ValueError("SignalManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            if not self.strategies:
                raise ValueError("–ù–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
            
            self.is_running = True
            self.status = OrchestratorStatus.RUNNING
            self.start_time = datetime.now(timezone.utc)
            
            self._main_task = asyncio.create_task(self._main_loop())
            
            logger.info("‚úÖ StrategyOrchestrator –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"   ‚Ä¢ –ë—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å {len(self.symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥—ã–µ {self.analysis_interval}s")
            logger.info(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(self.strategies)}")
            logger.info(f"   ‚Ä¢ –°—Ç–∞—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ :{self.SYNC_START_SECOND} —Å–µ–∫—É–Ω–¥—ã –∫–∞–∂–¥–æ–π –º–∏–Ω—É—Ç—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ StrategyOrchestrator: {e}")
            self.is_running = False
            self.status = OrchestratorStatus.ERROR
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not self.is_running:
            logger.warning("‚ö†Ô∏è StrategyOrchestrator —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ StrategyOrchestrator...")
        
        self.is_running = False
        self.status = OrchestratorStatus.STOPPED
        
        if self._main_task and not self._main_task.done():
            self._main_task.cancel()
            try:
                await self._main_task
            except asyncio.CancelledError:
                pass
        
        uptime = (datetime.now(timezone.utc) - self.start_time).total_seconds()
        
        logger.info("=" * 70)
        logger.info("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê STRATEGY ORCHESTRATOR")
        logger.info("=" * 70)
        logger.info(f"   ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime:.0f}s ({uptime/3600:.1f}h)")
        logger.info(f"   ‚Ä¢ –¶–∏–∫–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.stats['total_cycles']}")
        logger.info(f"   ‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {self.stats['total_symbols_analyzed']}")
        logger.info(f"   ‚Ä¢ –°–∏–≥–Ω–∞–ª–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {self.stats['total_signals_generated']}")
        logger.info(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {self.stats['total_errors']}")
        logger.info(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞: {self.stats['average_cycle_time']:.2f}s")
        logger.info("=" * 70)
        
        logger.info("‚úÖ StrategyOrchestrator –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("üîÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª StrategyOrchestrator –∑–∞–ø—É—â–µ–Ω")
        
        await self._wait_for_sync_time()
        
        while self.is_running:
            try:
                cycle_start = datetime.now(timezone.utc)
                
                await self._run_analysis_cycle()
                
                cycle_duration = (datetime.now(timezone.utc) - cycle_start).total_seconds()
                wait_time = await self._calculate_wait_time(cycle_duration)
                
                if wait_time > 0:
                    logger.debug(f"üí§ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f}s –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞")
                    await asyncio.sleep(wait_time)
                else:
                    logger.warning(f"‚ö†Ô∏è –¶–∏–∫–ª –∑–∞–Ω—è–ª {cycle_duration:.1f}s (–±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ {self.analysis_interval}s)")
                
            except asyncio.CancelledError:
                logger.info("üõë –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                self.stats["total_errors"] += 1
                self.status = OrchestratorStatus.ERROR
                await asyncio.sleep(60)
                self.status = OrchestratorStatus.RUNNING
    
    async def _wait_for_sync_time(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞"""
        now = datetime.now(timezone.utc)
        current_second = now.second
        
        if current_second < self.SYNC_START_SECOND:
            wait_seconds = self.SYNC_START_SECOND - current_second
        else:
            wait_seconds = (60 - current_second) + self.SYNC_START_SECOND
        
        if wait_seconds > 0:
            logger.info(f"‚è∞ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_seconds}s –¥–æ :{self.SYNC_START_SECOND} —Å–µ–∫—É–Ω–¥—ã")
            await asyncio.sleep(wait_seconds)
    
    async def _calculate_wait_time(self, cycle_duration: float) -> float:
        """–†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å —É—á—ë—Ç–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        now = datetime.now(timezone.utc)
        current_second = now.second
        
        if current_second < self.SYNC_START_SECOND:
            seconds_until_next = self.SYNC_START_SECOND - current_second
        else:
            seconds_until_next = (60 - current_second) + self.SYNC_START_SECOND
        
        return max(0, seconds_until_next)
    
    async def _run_analysis_cycle(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        try:
            self.status = OrchestratorStatus.ANALYZING
            
            cycle_stats = CycleStats(
                cycle_number=self.stats["total_cycles"] + 1,
                start_time=datetime.now(timezone.utc)
            )
            
            logger.info("=" * 70)
            logger.info(f"üîç –¶–ò–ö–õ –ê–ù–ê–õ–ò–ó–ê #{cycle_stats.cycle_number}")
            logger.info("=" * 70)
            logger.info(f"   ‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: {len(self.symbols)}")
            logger.info(f"   ‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(self.strategies)}")
            
            tasks = [self._analyze_symbol(symbol) for symbol in self.symbols]
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            for result in results:
                if isinstance(result, AnalysisResult):
                    self.symbol_results[result.symbol] = result
                    cycle_stats.symbols_analyzed += 1
                    cycle_stats.signals_count += result.signals_count
                    if not result.success:
                        cycle_stats.errors_count += 1
                elif isinstance(result, Exception):
                    logger.error(f"‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {result}")
                    cycle_stats.errors_count += 1
            
            cycle_stats.finalize()
            
            self.stats["total_cycles"] += 1
            self.stats["total_symbols_analyzed"] += cycle_stats.symbols_analyzed
            self.stats["total_signals_generated"] += cycle_stats.signals_count
            self.stats["total_errors"] += cycle_stats.errors_count
            self.stats["last_cycle_time"] = cycle_stats.start_time
            
            total_time = self.stats.get("total_cycle_time", 0) + cycle_stats.execution_time
            self.stats["total_cycle_time"] = total_time
            self.stats["average_cycle_time"] = total_time / self.stats["total_cycles"]
            
            self.stats["cycles_history"].append({
                "cycle": cycle_stats.cycle_number,
                "time": cycle_stats.start_time.isoformat(),
                "symbols": cycle_stats.symbols_analyzed,
                "signals": cycle_stats.signals_count,
                "errors": cycle_stats.errors_count,
                "duration": cycle_stats.execution_time
            })
            
            if len(self.stats["cycles_history"]) > 100:
                self.stats["cycles_history"].pop(0)
            
            self.last_cycle = cycle_stats
            
            logger.info("=" * 70)
            logger.info(f"‚úÖ –¶–ò–ö–õ #{cycle_stats.cycle_number} –ó–ê–í–ï–†–®–ï–ù")
            logger.info("=" * 70)
            logger.info(f"   ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {cycle_stats.symbols_analyzed}/{len(self.symbols)}")
            logger.info(f"   ‚Ä¢ –°–∏–≥–Ω–∞–ª–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {cycle_stats.signals_count}")
            logger.info(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {cycle_stats.errors_count}")
            logger.info(f"   ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {cycle_stats.execution_time:.2f}s")
            logger.info("=" * 70)
            
            self.status = OrchestratorStatus.RUNNING
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            import traceback
            logger.error(traceback.format_exc())
            self.stats["total_errors"] += 1
            self.status = OrchestratorStatus.ERROR
    
    async def _analyze_symbol(self, symbol: str) -> AnalysisResult:
        """
        –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤—Å–µ–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (BTCUSDT, ETHUSDT, MCL, MGC, etc)
            
        Returns:
            AnalysisResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        start_time = datetime.now(timezone.utc)
        signals_count = 0
        strategies_run = 0
        
        try:
            logger.debug(f"üìä –ê–Ω–∞–ª–∏–∑ {symbol}...")
            
            # –®–ê–ì 1: –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
            ta_context = await self.ta_context_manager.get_context(symbol=symbol)
            
            if not ta_context:
                logger.warning(f"‚ö†Ô∏è {symbol}: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –®–ê–ì 2: –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ —Å–≤–µ—á–∏ –∏–∑ –ë–î
            now = datetime.now(timezone.utc)
            
            # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï v3.1.1:
            # –£–±—Ä–∞–Ω end_time –¥–ª—è M1 –∏ M5 - –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π —á—Ç–æ –µ—Å—Ç—å
            # –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç–æ—Ä–≥—É—é—Ç—Å—è –Ω–æ—á—å—é!
            
            # –ú–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
            # –ë–ï–ó end_time - –≤–æ–∑—å–º—ë—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –≤—á–µ—Ä–∞—à–Ω–∏–µ
            candles_1m = await self.repository.get_candles(
                symbol=symbol,
                interval="1m",
                start_time=now - timedelta(days=1),  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                limit=self.MIN_CANDLES["1m"]
            )
            
            # 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
            # –ë–ï–ó end_time
            candles_5m = await self.repository.get_candles(
                symbol=symbol,
                interval="5m",
                start_time=now - timedelta(days=2),  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 48 —á–∞—Å–æ–≤
                limit=self.MIN_CANDLES["5m"]
            )
            
            # –ß–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24)
            # –ú–æ–∂–Ω–æ —Å end_time —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            candles_1h = await self.repository.get_candles(
                symbol=symbol,
                interval="1h",
                start_time=now - timedelta(days=2),
                limit=self.MIN_CANDLES["1h"]
            )
            
            # –î–Ω–µ–≤–Ω—ã–µ —Å–≤–µ—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 180)
            candles_1d = await self.repository.get_candles(
                symbol=symbol,
                interval="1d",
                start_time=now - timedelta(days=200),
                limit=self.MIN_CANDLES["1d"]
            )
            
            # ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            data_validation = self._validate_candles_data(
                symbol=symbol,
                candles_1m=candles_1m,
                candles_5m=candles_5m,
                candles_1h=candles_1h,
                candles_1d=candles_1d
            )
            
            if not data_validation["valid"]:
                logger.warning(f"‚ö†Ô∏è {symbol}: {data_validation['error']}")
                return AnalysisResult(
                    symbol=symbol,
                    success=False,
                    signals_count=0,
                    strategies_run=0,
                    execution_time=0,
                    error=data_validation['error']
                )
            
            # –®–ê–ì 3: –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            for strategy in self.strategies:
                try:
                    strategies_run += 1
                    
                    signal = await strategy.analyze_with_data(
                        symbol=symbol,
                        candles_1m=candles_1m,
                        candles_5m=candles_5m,
                        candles_1h=candles_1h,
                        candles_1d=candles_1d,
                        ta_context=ta_context
                    )
                    
                    if signal:
                        await self.signal_manager.process_signal(signal)
                        signals_count += 1
                        
                        logger.info(
                            f"üîî {symbol}: {strategy.__class__.__name__} ‚Üí "
                            f"{signal.signal_type.name} (—Å–∏–ª–∞: {signal.strength:.2f})"
                        )
                
                except Exception as e:
                    logger.error(f"‚ùå {symbol}: –æ—à–∏–±–∫–∞ –≤ {strategy.__class__.__name__}: {e}")
                    continue
            
            execution_time = (datetime.now(timezone.utc) - start_time).total_seconds()
            
            return AnalysisResult(
                symbol=symbol,
                success=True,
                signals_count=signals_count,
                strategies_run=strategies_run,
                execution_time=execution_time
            )
            
        except Exception as e:
            logger.error(f"‚ùå {symbol}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            execution_time = (datetime.now(timezone.utc) - start_time).total_seconds()
            
            return AnalysisResult(
                symbol=symbol,
                success=False,
                signals_count=0,
                strategies_run=strategies_run,
                execution_time=execution_time,
                error=str(e)
            )
    
    def _validate_candles_data(
        self,
        symbol: str,
        candles_1m: List,
        candles_5m: List,
        candles_1h: List,
        candles_1d: List
    ) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π"""
        details = {
            "1m": {
                "received": len(candles_1m) if candles_1m else 0,
                "required": self.MIN_CANDLES["1m"],
                "valid": False
            },
            "5m": {
                "received": len(candles_5m) if candles_5m else 0,
                "required": self.MIN_CANDLES["5m"],
                "valid": False
            },
            "1h": {
                "received": len(candles_1h) if candles_1h else 0,
                "required": self.MIN_CANDLES["1h"],
                "valid": False
            },
            "1d": {
                "received": len(candles_1d) if candles_1d else 0,
                "required": self.MIN_CANDLES["1d"],
                "valid": False
            }
        }
        
        errors = []
        
        for interval, data in details.items():
            if data["received"] >= data["required"]:
                data["valid"] = True
            else:
                errors.append(f"{interval}: {data['received']}/{data['required']}")
        
        if errors:
            return {
                "valid": False,
                "error": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {', '.join(errors)}",
                "details": details
            }
        
        return {
            "valid": True,
            "error": None,
            "details": details
        }
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        uptime = 0
        if self.start_time:
            uptime = (datetime.now(timezone.utc) - self.start_time).total_seconds()
        
        return {
            **self.stats,
            "status": self.status.value,
            "is_running": self.is_running,
            "uptime_seconds": uptime,
            "uptime_formatted": str(timedelta(seconds=int(uptime))),
            "symbols_count": len(self.symbols),
            "strategies_count": len(self.strategies),
            "analysis_interval": self.analysis_interval,
            "sync_start_second": self.SYNC_START_SECOND,
            "last_cycle": {
                "cycle_number": self.last_cycle.cycle_number if self.last_cycle else 0,
                "start_time": self.last_cycle.start_time.isoformat() if self.last_cycle else None,
                "symbols_analyzed": self.last_cycle.symbols_analyzed if self.last_cycle else 0,
                "signals_count": self.last_cycle.signals_count if self.last_cycle else 0,
                "errors_count": self.last_cycle.errors_count if self.last_cycle else 0,
                "execution_time": self.last_cycle.execution_time if self.last_cycle else 0
            } if self.last_cycle else None
        }
    
    def get_health_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        is_healthy = (
            self.is_running and
            self.status == OrchestratorStatus.RUNNING and
            self.stats["total_errors"] < 100
        )
        
        if self.stats["last_cycle_time"]:
            time_since_last_cycle = (
                datetime.now(timezone.utc) - self.stats["last_cycle_time"]
            ).total_seconds()
            
            if time_since_last_cycle > self.analysis_interval * 2:
                is_healthy = False
        
        return {
            "healthy": is_healthy,
            "status": self.status.value,
            "is_running": self.is_running,
            "total_cycles": self.stats["total_cycles"],
            "total_signals": self.stats["total_signals_generated"],
            "total_errors": self.stats["total_errors"],
            "last_cycle_time": self.stats["last_cycle_time"].isoformat() if self.stats["last_cycle_time"] else None,
            "average_cycle_time": self.stats["average_cycle_time"],
            "sync_second": self.SYNC_START_SECOND
        }
    
    def __repr__(self):
        return (
            f"StrategyOrchestrator("
            f"symbols={len(self.symbols)}, "
            f"strategies={len(self.strategies)}, "
            f"status={self.status.value}, "
            f"cycles={self.stats['total_cycles']})"
        )


__all__ = [
    "StrategyOrchestrator",
    "OrchestratorStatus",
    "AnalysisResult",
    "CycleStats"
]

logger.info("‚úÖ StrategyOrchestrator v3.1.1 module loaded successfully")
