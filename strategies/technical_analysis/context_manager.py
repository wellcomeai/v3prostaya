"""
Technical Analysis Context Manager

–£–ø—Ä–∞–≤–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:
- –£—Ä–æ–≤–Ω–∏ D1: –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
- ATR: –∫–∞–∂–¥—ã–π —á–∞—Å  
- –°–≤–µ—á–∏: –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
- –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç

Author: Trading Bot Team
Version: 2.0.1 (Production Ready - Fixed)
"""

import asyncio
import logging
import traceback
from datetime import datetime, timedelta, timezone
from typing import Dict, Optional, List, Any
from collections import defaultdict

from .context import (
    TechnicalAnalysisContext,
    SupportResistanceLevel,
    ATRData,
    MarketCondition,
    TrendDirection
)

from .level_analyzer import LevelAnalyzer
from .atr_calculator import ATRCalculator
from .pattern_detector import PatternDetector
from .breakout_analyzer import BreakoutAnalyzer
from .market_conditions import MarketConditionsAnalyzer

logger = logging.getLogger(__name__)


class TechnicalAnalysisContextManager:
    """
    üß† –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (PRODUCTION READY)
    
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤:
    - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    - –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    - –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–∫–æ–Ω—Ç–µ–∫—Å—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –ø–æ –∑–∞–ø—Ä–æ—Å—É)
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MarketDataRepository
    - –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    
    –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:
    - –£—Ä–æ–≤–Ω–∏ D1: —Ä–∞–∑ –≤ 24 —á–∞—Å–∞ (–≤ 00:00 UTC)
    - ATR: —Ä–∞–∑ –≤ —á–∞—Å
    - –°–≤–µ—á–∏: –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    - –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    
    Usage:
        manager = TechnicalAnalysisContextManager(repository)
        await manager.start()
        
        context = await manager.get_context("BTCUSDT")
        levels = context.levels_d1
        
        if context.is_suitable_for_breakout:
            # –¢–æ—Ä–≥–æ–≤–∞—Ç—å –ø—Ä–æ–±–æ–π
            pass
    """
    
    def __init__(
        self,
        repository,  # MarketDataRepository
        auto_start_background_updates: bool = True,
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
        level_analyzer_config: Optional[Dict] = None,
        atr_calculator_config: Optional[Dict] = None,
        pattern_detector_config: Optional[Dict] = None,
        breakout_analyzer_config: Optional[Dict] = None,
        market_conditions_config: Optional[Dict] = None,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        
        Args:
            repository: MarketDataRepository –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
            auto_start_background_updates: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            level_analyzer_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è LevelAnalyzer
            atr_calculator_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è ATRCalculator
            pattern_detector_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è PatternDetector
            breakout_analyzer_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è BreakoutAnalyzer
            market_conditions_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è MarketConditionsAnalyzer
        """
        self.repository = repository
        self.auto_start = auto_start_background_updates
        
        # ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê–¢–û–†–û–í ====================
        
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤...")
        
        # 1. Level Analyzer - –∞–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        self.level_analyzer = LevelAnalyzer(
            **(level_analyzer_config or {})
        )
        logger.info("‚úÖ LevelAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # 2. ATR Calculator - —Ä–∞—Å—á–µ—Ç –∑–∞–ø–∞—Å–∞ —Ö–æ–¥–∞
        self.atr_calculator = ATRCalculator(
            **(atr_calculator_config or {})
        )
        logger.info("‚úÖ ATRCalculator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # 3. Pattern Detector - –¥–µ—Ç–µ–∫—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–ë–°–£-–ë–ü–£, –ø–æ–¥–∂–∞—Ç–∏–µ, –ø—É—á–∫–∏)
        self.pattern_detector = PatternDetector(
            **(pattern_detector_config or {})
        )
        logger.info("‚úÖ PatternDetector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # 4. Breakout Analyzer - –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–æ–µ–≤ (–∏—Å—Ç–∏–Ω–Ω—ã–µ/–ª–æ–∂–Ω—ã–µ)
        self.breakout_analyzer = BreakoutAnalyzer(
            **(breakout_analyzer_config or {})
        )
        logger.info("‚úÖ BreakoutAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # 5. Market Conditions Analyzer - –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        self.market_conditions_analyzer = MarketConditionsAnalyzer(
            **(market_conditions_config or {})
        )
        logger.info("‚úÖ MarketConditionsAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ö—ç—à –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        self.contexts: Dict[str, TechnicalAnalysisContext] = {}
        
        # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self._update_tasks: List[asyncio.Task] = []
        self.is_running = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "start_time": None,
            "contexts_created": 0,
            "total_updates": 0,
            "successful_updates": 0,
            "failed_updates": 0,
            "levels_updates": 0,
            "atr_updates": 0,
            "candles_updates": 0,
            "market_conditions_updates": 0,
            "last_update_time": None,
            "update_times": defaultdict(list),  # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É
            "errors_by_type": defaultdict(int)
        }
        
        logger.info("=" * 70)
        logger.info("üèóÔ∏è TechnicalAnalysisContextManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   ‚Ä¢ Auto-start background updates: {self.auto_start}")
        logger.info(f"   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: 5")
        logger.info("=" * 70)
    
    # ==================== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ ====================
    
    async def get_context(
        self, 
        symbol: str, 
        force_update: bool = False,
        data_source: str = "bybit"
    ) -> TechnicalAnalysisContext:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        
        –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π.
        –ï—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª - –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (BTCUSDT, ETHUSDT, etc.)
            force_update: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            data_source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö (bybit, yfinance)
            
        Returns:
            TechnicalAnalysisContext —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            symbol = symbol.upper()
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if symbol not in self.contexts:
                logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è {symbol}")
                self.contexts[symbol] = TechnicalAnalysisContext(
                    symbol=symbol,
                    data_source=data_source
                )
                self.stats["contexts_created"] += 1
            
            context = self.contexts[symbol]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if force_update:
                logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ {symbol}")
                await self._full_update_context(context)
            else:
                await self._update_context_if_needed(context)
            
            return context
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è {symbol}: {e}")
            logger.error(traceback.format_exc())
            raise
    
    async def _update_context_if_needed(self, context: TechnicalAnalysisContext):
        """
        –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ.
        """
        try:
            updates_needed = []
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–Ω–∏ D1
            if not context.is_levels_cache_valid():
                updates_needed.append("levels")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º ATR
            if not context.is_atr_cache_valid():
                updates_needed.append("atr")
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ—á–∏
            if not context.is_candles_cache_valid():
                updates_needed.append("candles")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ
            if updates_needed:
                logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {context.symbol}: {', '.join(updates_needed)}")
                
                if "levels" in updates_needed:
                    await self._update_levels(context)
                
                if "atr" in updates_needed:
                    await self._update_atr(context)
                
                if "candles" in updates_needed:
                    await self._update_candles(context)
                
                # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –æ–±–Ω–æ–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
                await self._update_market_conditions(context)
                
                context.last_full_update = datetime.now(timezone.utc)
                context.update_count += 1
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ {context.symbol}: {e}")
            context.error_count += 1
            context.last_error = str(e)
            raise
    
    async def _full_update_context(self, context: TechnicalAnalysisContext):
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            logger.info(f"üîÑ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ {context.symbol}")
            start_time = datetime.now()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            await self._update_levels(context)
            await self._update_atr(context)
            await self._update_candles(context)
            await self._update_market_conditions(context)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            context.last_full_update = datetime.now(timezone.utc)
            context.update_count += 1
            
            duration = (datetime.now() - start_time).total_seconds()
            logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç {context.symbol} –æ–±–Ω–æ–≤–ª–µ–Ω –∑–∞ {duration:.2f}s")
            
            self.stats["total_updates"] += 1
            self.stats["successful_updates"] += 1
            self.stats["last_update_time"] = datetime.now()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {context.symbol}: {e}")
            context.error_count += 1
            context.last_error = str(e)
            self.stats["failed_updates"] += 1
            raise
    
    # ==================== –û–ë–ù–û–í–õ–ï–ù–ò–ï –£–†–û–í–ù–ï–ô ====================
    
    async def _update_levels(self, context: TechnicalAnalysisContext):
        """
        –û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è D1
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç LevelAnalyzer –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π.
        """
        try:
            update_start = datetime.now()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º 180 —Å–≤–µ—á–µ–π D1 (6 –º–µ—Å—è—Ü–µ–≤)
            candles_d1 = await self.repository.get_candles(
                symbol=context.symbol,
                interval="1d",
                limit=180
            )
            
            if not candles_d1:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö D1 –¥–ª—è {context.symbol}")
                return
            
            logger.debug(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(candles_d1)} —Å–≤–µ—á–µ–π D1 –¥–ª—è {context.symbol}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–µ—á–∏ D1 –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.recent_candles_d1 = candles_d1
            
            # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            current_price = float(candles_d1[-1]['close_price'])
            
            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–ï–ê–õ–¨–ù–´–ô LEVEL ANALYZER
            levels = self.level_analyzer.find_all_levels(
                candles=candles_d1,
                current_price=current_price
            )
            
            context.levels_d1 = levels
            context.levels_updated_at = datetime.now(timezone.utc)
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(levels)} —É—Ä–æ–≤–Ω–µ–π –¥–ª—è {context.symbol}")
            
            self.stats["levels_updates"] += 1
            update_duration = (datetime.now() - update_start).total_seconds()
            self.stats["update_times"]["levels"].append(update_duration)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π {context.symbol}: {e}")
            self.stats["errors_by_type"]["levels"] += 1
            raise
    
    # ==================== –û–ë–ù–û–í–õ–ï–ù–ò–ï ATR ====================
    
    async def _update_atr(self, context: TechnicalAnalysisContext):
        """
        –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ATR (Average True Range)
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ATRCalculator –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ATR.
        """
        try:
            update_start = datetime.now()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ D1 —Å–≤–µ—á–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if len(context.recent_candles_d1) >= 5:
                candles_for_atr = context.recent_candles_d1[-5:]
            else:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º 5 –¥–Ω–µ–π –¥–ª—è ATR
                candles_for_atr = await self.repository.get_candles(
                    symbol=context.symbol,
                    interval="1d",
                    limit=5
                )
            
            if not candles_for_atr or len(candles_for_atr) < 3:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ATR {context.symbol}")
                return
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º current_price –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
            current_price = float(candles_for_atr[-1]['close_price'])
            
            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–ï–ê–õ–¨–ù–´–ô ATR CALCULATOR
            atr_data = self.atr_calculator.calculate_atr(
                candles=candles_for_atr,
                levels=context.levels_d1,
                current_price=current_price
            )
            
            context.atr_data = atr_data
            
            logger.debug(f"‚úÖ ATR –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {context.symbol}: {atr_data.calculated_atr:.2f}")
            
            self.stats["atr_updates"] += 1
            update_duration = (datetime.now() - update_start).total_seconds()
            self.stats["update_times"]["atr"].append(update_duration)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ATR {context.symbol}: {e}")
            self.stats["errors_by_type"]["atr"] += 1
            raise
    
    # ==================== –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–í–ï–ß–ï–ô ====================
    
    async def _update_candles(self, context: TechnicalAnalysisContext):
        """
        –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è M5, M30, H1, H4.
        """
        try:
            update_start = datetime.now()
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            tasks = [
                self.repository.get_candles(context.symbol, "5m", limit=100),   # 8 —á–∞—Å–æ–≤
                self.repository.get_candles(context.symbol, "30m", limit=50),   # 25 —á–∞—Å–æ–≤
                self.repository.get_candles(context.symbol, "1h", limit=24),    # 1 –¥–µ–Ω—å
                self.repository.get_candles(context.symbol, "4h", limit=24),    # 4 –¥–Ω—è
            ]
            
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            context.recent_candles_m5 = results[0] if not isinstance(results[0], Exception) else []
            context.recent_candles_m30 = results[1] if not isinstance(results[1], Exception) else []
            context.recent_candles_h1 = results[2] if not isinstance(results[2], Exception) else []
            context.recent_candles_h4 = results[3] if not isinstance(results[3], Exception) else []
            
            context.candles_updated_at = datetime.now(timezone.utc)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            candle_counts = f"M5={len(context.recent_candles_m5)}, M30={len(context.recent_candles_m30)}, " \
                          f"H1={len(context.recent_candles_h1)}, H4={len(context.recent_candles_h4)}"
            logger.debug(f"‚úÖ –°–≤–µ—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {context.symbol}: {candle_counts}")
            
            self.stats["candles_updates"] += 1
            update_duration = (datetime.now() - update_start).total_seconds()
            self.stats["update_times"]["candles"].append(update_duration)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π {context.symbol}: {e}")
            self.stats["errors_by_type"]["candles"] += 1
            raise
    
    # ==================== –û–ë–ù–û–í–õ–ï–ù–ò–ï –†–´–ù–û–ß–ù–´–• –£–°–õ–û–í–ò–ô ====================
    
    async def _update_market_conditions(self, context: TechnicalAnalysisContext):
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞:
        - MarketConditionsAnalyzer - —Ç—Ä–µ–Ω–¥—ã, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è
        - PatternDetector - –ø–æ–¥–∂–∞—Ç–∏–µ, –ø—É—á–∫–∏, V-—Ñ–æ—Ä–º–∞—Ü–∏–∏
        - BreakoutAnalyzer - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–æ–µ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å —É—Ä–æ–≤–Ω–∏)
        """
        try:
            update_start = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
            if not context.recent_candles_h1 or not context.atr_data:
                logger.debug(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ª–æ–≤–∏–π {context.symbol}")
                return
            
            current_price = float(context.recent_candles_h1[-1]['close_price']) if context.recent_candles_h1 else None
            
            # 1. –ê–ù–ê–õ–ò–ó –†–´–ù–û–ß–ù–´–• –£–°–õ–û–í–ò–ô
            market_analysis = self.market_conditions_analyzer.analyze_conditions(
                candles_h1=context.recent_candles_h1,
                candles_d1=context.recent_candles_d1,
                atr=context.atr_data.calculated_atr if context.atr_data else None,
                current_price=current_price
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.market_condition = market_analysis.market_condition
            context.dominant_trend_h1 = market_analysis.trend_direction
            context.volatility_level = market_analysis.volatility_level.value
            context.consolidation_detected = market_analysis.has_consolidation
            context.consolidation_bars_count = market_analysis.consolidation_bars
            context.has_v_formation = market_analysis.has_v_formation
            
            logger.debug(f"üìä –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è {context.symbol}: {market_analysis.market_condition.value}, "
                        f"trend={market_analysis.trend_direction.value}, "
                        f"volatility={market_analysis.volatility_level.value}")
            
            # 2. –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–ê –ù–ê D1 (–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π)
            if context.recent_candles_d1 and len(context.recent_candles_d1) >= 10:
                d1_analysis = self.market_conditions_analyzer.analyze_conditions(
                    candles_d1=context.recent_candles_d1,
                    current_price=current_price
                )
                context.dominant_trend_d1 = d1_analysis.trend_direction
            
            # 3. –î–ï–¢–ï–ö–¶–ò–Ø –ü–ê–¢–¢–ï–†–ù–û–í
            
            # –ü–æ–¥–∂–∞—Ç–∏–µ (–¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–±–æ—è)
            if context.recent_candles_m5 and context.levels_d1:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∂–∞—Ç–∏–µ —É –±–ª–∏–∂–∞–π—à–∏—Ö —É—Ä–æ–≤–Ω–µ–π
                nearest_resistance = context.get_nearest_resistance(current_price) if current_price else None
                nearest_support = context.get_nearest_support(current_price) if current_price else None
                
                has_compression = False
                
                if nearest_resistance:
                    compression_up, _ = self.pattern_detector.detect_compression(
                        candles=context.recent_candles_m5,
                        level=nearest_resistance,
                        atr=context.atr_data.calculated_atr if context.atr_data else None
                    )
                    has_compression = has_compression or compression_up
                
                if nearest_support:
                    compression_down, _ = self.pattern_detector.detect_compression(
                        candles=context.recent_candles_m5,
                        level=nearest_support,
                        atr=context.atr_data.calculated_atr if context.atr_data else None
                    )
                    has_compression = has_compression or compression_down
                
                context.has_compression = has_compression
            
            # 4. –ü–†–û–í–ï–†–ö–ê –ù–ï–î–ê–í–ù–ò–• –ü–†–û–ë–û–ï–í
            if context.recent_candles_h1 and context.levels_d1 and current_price:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ –Ω–µ–¥–∞–≤–Ω–∏–π –ø—Ä–æ–±–æ–π –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ —É—Ä–æ–≤–Ω—è
                has_recent_breakout = False
                
                for level in context.levels_d1[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø-5 —É—Ä–æ–≤–Ω–µ–π
                    breakout_analysis = self.breakout_analyzer.analyze_breakout(
                        candles=context.recent_candles_h1[-20:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –±–∞—Ä–æ–≤
                        level=level,
                        atr=context.atr_data.calculated_atr if context.atr_data else None,
                        current_price=current_price,
                        has_compression=context.has_compression
                    )
                    
                    if breakout_analysis.is_true_breakout or breakout_analysis.is_false_breakout:
                        has_recent_breakout = True
                        break
                
                context.has_recent_breakout = has_recent_breakout
            
            self.stats["market_conditions_updates"] += 1
            update_duration = (datetime.now() - update_start).total_seconds()
            self.stats["update_times"]["market_conditions"].append(update_duration)
            
            logger.info(f"‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {context.symbol}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π {context.symbol}: {e}")
            logger.error(traceback.format_exc())
            self.stats["errors_by_type"]["market_conditions"] += 1
            # –ù–µ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
    
    # ==================== –§–û–ù–û–í–´–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø ====================
    
    async def start_background_updates(self):
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        
        –°–æ–∑–¥–∞–µ—Ç 4 —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∏:
        - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–µ–π (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
        - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ATR (–∫–∞–∂–¥—ã–π —á–∞—Å)
        - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π (—Ä–∞–∑ –≤ —Å—É—Ç–∫–∏)
        - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)
        """
        if self.is_running:
            logger.warning("‚ö†Ô∏è –§–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã")
            return
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        
        self.is_running = True
        self.stats["start_time"] = datetime.now()
        
        # –ó–∞–¥–∞—á–∞ 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–µ–π (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
        self._update_tasks.append(
            asyncio.create_task(self._candles_update_loop(), name="candles_update")
        )
        
        # –ó–∞–¥–∞—á–∞ 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ATR (–∫–∞–∂–¥—ã–π —á–∞—Å)
        self._update_tasks.append(
            asyncio.create_task(self._atr_update_loop(), name="atr_update")
        )
        
        # –ó–∞–¥–∞—á–∞ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π (—Ä–∞–∑ –≤ —Å—É—Ç–∫–∏)
        self._update_tasks.append(
            asyncio.create_task(self._levels_update_loop(), name="levels_update")
        )
        
        # –ó–∞–¥–∞—á–∞ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)
        self._update_tasks.append(
            asyncio.create_task(self._market_conditions_update_loop(), name="market_conditions_update")
        )
        
        logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(self._update_tasks)} —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á")
        logger.info("   ‚Ä¢ –°–≤–µ—á–∏: –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É")
        logger.info("   ‚Ä¢ ATR: –∫–∞–∂–¥—ã–π —á–∞—Å")
        logger.info("   ‚Ä¢ –£—Ä–æ–≤–Ω–∏: —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ (00:00 UTC)")
        logger.info("   ‚Ä¢ –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç")
    
    async def stop_background_updates(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏"""
        if not self.is_running:
            logger.warning("‚ö†Ô∏è –§–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return
        
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        self.is_running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task in self._update_tasks:
            if not task.done():
                task.cancel()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if self._update_tasks:
            await asyncio.gather(*self._update_tasks, return_exceptions=True)
        
        self._update_tasks.clear()
        
        logger.info("‚úÖ –§–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    async def _candles_update_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)"""
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π (1 –º–∏–Ω—É—Ç–∞)")
        
        while self.is_running:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–µ—á–∏ –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
                for symbol, context in self.contexts.items():
                    try:
                        await self._update_candles(context)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π {symbol}: {e}")
                
                # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(60)
                
            except asyncio.CancelledError:
                logger.info("üõë –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–≤–µ—á–µ–π: {e}")
                logger.error(traceback.format_exc())
                await asyncio.sleep(60)
    
    async def _atr_update_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ATR (–∫–∞–∂–¥—ã–π —á–∞—Å)"""
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ATR (1 —á–∞—Å)")
        
        while self.is_running:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º ATR –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
                for symbol, context in self.contexts.items():
                    try:
                        await self._update_atr(context)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ATR {symbol}: {e}")
                
                # –ñ–¥–µ–º 1 —á–∞—Å
                await asyncio.sleep(3600)
                
            except asyncio.CancelledError:
                logger.info("üõë –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ATR –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ ATR: {e}")
                logger.error(traceback.format_exc())
                await asyncio.sleep(3600)
    
    async def _levels_update_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π (—Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –≤ 00:00 UTC)"""
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π (24 —á–∞—Å–∞)")
        
        while self.is_running:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
                for symbol, context in self.contexts.items():
                    try:
                        await self._update_levels(context)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π {symbol}: {e}")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ 00:00 UTC
                now = datetime.now(timezone.utc)
                next_midnight = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
                sleep_seconds = (next_midnight - now).total_seconds()
                
                logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π: {next_midnight.strftime('%Y-%m-%d %H:%M UTC')}")
                
                await asyncio.sleep(sleep_seconds)
                
            except asyncio.CancelledError:
                logger.info("üõë –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —É—Ä–æ–≤–Ω–µ–π: {e}")
                logger.error(traceback.format_exc())
                await asyncio.sleep(86400)  # 24 —á–∞—Å–∞
    
    async def _market_conditions_update_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)"""
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π (15 –º–∏–Ω—É—Ç)")
        
        while self.is_running:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
                for symbol, context in self.contexts.items():
                    try:
                        await self._update_market_conditions(context)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π {symbol}: {e}")
                
                # –ñ–¥–µ–º 15 –º–∏–Ω—É—Ç
                await asyncio.sleep(900)
                
            except asyncio.CancelledError:
                logger.info("üõë –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π: {e}")
                logger.error(traceback.format_exc())
                await asyncio.sleep(900)
    
    # ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï ====================
    
    async def refresh_all_contexts(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã"""
        logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ ({len(self.contexts)})")
        
        for symbol, context in self.contexts.items():
            try:
                await self._full_update_context(context)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {symbol}: {e}")
        
        logger.info("‚úÖ –í—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    
    def clear_context(self, symbol: str):
        """–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        symbol = symbol.upper()
        if symbol in self.contexts:
            del self.contexts[symbol]
            logger.info(f"üóëÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç {symbol} —É–¥–∞–ª–µ–Ω")
    
    def clear_all_contexts(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã"""
        count = len(self.contexts)
        self.contexts.clear()
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {count} –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤")
    
    # ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        uptime = None
        if self.stats["start_time"]:
            uptime = (datetime.now() - self.stats["start_time"]).total_seconds()
        
        # –°—Ä–µ–¥–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        avg_times = {}
        for update_type, times in self.stats["update_times"].items():
            if times:
                avg_times[f"{update_type}_avg_seconds"] = sum(times) / len(times)
        
        return {
            **self.stats,
            "uptime_seconds": uptime,
            "is_running": self.is_running,
            "active_tasks": len([t for t in self._update_tasks if not t.done()]),
            "contexts_count": len(self.contexts),
            "contexts_symbols": list(self.contexts.keys()),
            "success_rate": (self.stats["successful_updates"] / self.stats["total_updates"] * 100) 
                           if self.stats["total_updates"] > 0 else 100,
            **avg_times,
            "analyzers_stats": {
                "level_analyzer": self.level_analyzer.get_stats(),
                "atr_calculator": self.atr_calculator.get_stats(),
                "pattern_detector": self.pattern_detector.get_stats(),
                "breakout_analyzer": self.breakout_analyzer.get_stats(),
                "market_conditions_analyzer": self.market_conditions_analyzer.get_stats()
            }
        }
    
    def get_health_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        stats = self.get_stats()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–∞–¥–∞—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
        all_tasks_alive = all(not task.done() for task in self._update_tasks) if self._update_tasks else False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        last_update_recent = False
        if self.stats["last_update_time"]:
            age = (datetime.now() - self.stats["last_update_time"]).total_seconds()
            last_update_recent = age < 300  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ < 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
        
        is_healthy = (
            self.is_running and
            all_tasks_alive and
            (last_update_recent or self.stats["total_updates"] == 0) and
            stats["success_rate"] > 80
        )
        
        return {
            "healthy": is_healthy,
            "is_running": self.is_running,
            "all_tasks_alive": all_tasks_alive,
            "last_update_recent": last_update_recent,
            "success_rate": stats["success_rate"],
            "contexts_count": len(self.contexts),
            "errors": sum(self.stats["errors_by_type"].values()),
            "uptime_seconds": stats["uptime_seconds"]
        }
    
    def get_analyzer_stats_summary(self) -> Dict[str, Any]:
        """–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤"""
        return {
            "level_analyzer": {
                "analyses": self.level_analyzer.stats["analyses_count"],
                "levels_found": self.level_analyzer.stats["total_levels_found"],
                "avg_strength": self.level_analyzer.stats["average_level_strength"]
            },
            "atr_calculator": {
                "calculations": self.atr_calculator.stats["calculations_count"],
                "avg_atr": self.atr_calculator.stats["average_atr"],
                "paranormal_filtered": self.atr_calculator.stats["paranormal_bars_filtered"]
            },
            "pattern_detector": {
                "total_patterns": self.pattern_detector.stats["total_patterns"],
                "compressions": self.pattern_detector.stats["compressions_detected"],
                "bsu_found": self.pattern_detector.stats["bsu_found"],
                "bpu_found": self.pattern_detector.stats["bpu_found"]
            },
            "breakout_analyzer": {
                "analyses": self.breakout_analyzer.stats["analyses_count"],
                "true_breakouts": self.breakout_analyzer.stats["true_breakouts"],
                "false_breakouts_total": (
                    self.breakout_analyzer.stats["false_breakouts_simple"] +
                    self.breakout_analyzer.stats["false_breakouts_strong"] +
                    self.breakout_analyzer.stats["false_breakouts_complex"]
                )
            },
            "market_conditions": {
                "analyses": self.market_conditions_analyzer.stats["analyses_count"],
                "consolidations": self.market_conditions_analyzer.stats["consolidations_detected"],
                "trends": self.market_conditions_analyzer.stats["trends_detected"],
                "v_formations": self.market_conditions_analyzer.stats["v_formations_detected"]
            }
        }
    
    def __repr__(self) -> str:
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return (f"TechnicalAnalysisContextManager(contexts={len(self.contexts)}, "
                f"running={self.is_running}, "
                f"updates={self.stats['total_updates']})")
    
    def __str__(self) -> str:
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
        stats = self.get_stats()
        return (f"Technical Analysis Context Manager:\n"
                f"  Status: {'üü¢ Running' if self.is_running else 'üî¥ Stopped'}\n"
                f"  Contexts: {len(self.contexts)} active\n"
                f"  Updates: {stats['total_updates']} total, {stats['successful_updates']} successful\n"
                f"  Success rate: {stats['success_rate']:.1f}%\n"
                f"  Tasks: {stats['active_tasks']}/{len(self._update_tasks)} active\n"
                f"  Analyzers: 5 integrated")


# Export
__all__ = ["TechnicalAnalysisContextManager"]

logger.info("‚úÖ Technical Analysis Context Manager module loaded (PRODUCTION READY v2.0.1)")
