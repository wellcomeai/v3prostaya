"""
Technical Analysis Context

–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
–•—Ä–∞–Ω–∏—Ç —É—Ä–æ–≤–Ω–∏, ATR, —Å–≤–µ—á–∏ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫—ç—à–∞.

Author: Trading Bot Team
Version: 1.0.0
"""

import logging
from dataclasses import dataclass, field
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Optional, Any
from enum import Enum

logger = logging.getLogger(__name__)


class MarketCondition(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞"""
    CONSOLIDATION = "consolidation"  # –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è
    TRENDING = "trending"            # –¢—Ä–µ–Ω–¥–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
    VOLATILE = "volatile"            # –í–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π
    NEUTRAL = "neutral"              # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π
    UNKNOWN = "unknown"              # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ


class TrendDirection(Enum):
    """–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞"""
    BULLISH = "bullish"    # –ë—ã—á–∏–π
    BEARISH = "bearish"    # –ú–µ–¥–≤–µ–∂–∏–π
    NEUTRAL = "neutral"    # –ë–æ–∫–æ–≤–∏–∫
    UNKNOWN = "unknown"    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ


@dataclass
class SupportResistanceLevel:
    """
    –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
    
    Attributes:
        price: –¶–µ–Ω–∞ —É—Ä–æ–≤–Ω—è
        level_type: –¢–∏–ø —É—Ä–æ–≤–Ω—è (support/resistance)
        strength: –°–∏–ª–∞ —É—Ä–æ–≤–Ω—è (0.0-1.0)
        touches: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Å–∞–Ω–∏–π
        last_touch: –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞—Å–∞–Ω–∏—è
        created_at: –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è (–ë–°–£)
        distance_from_current: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã (%)
        metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    price: float
    level_type: str  # "support" –∏–ª–∏ "resistance"
    strength: float  # 0.0 - 1.0
    touches: int = 0
    last_touch: Optional[datetime] = None
    created_at: Optional[datetime] = None
    distance_from_current: float = 0.0
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        if self.price <= 0:
            raise ValueError(f"Invalid price: {self.price}")
        if not 0 <= self.strength <= 1:
            raise ValueError(f"Invalid strength: {self.strength}")
        if self.level_type not in ["support", "resistance"]:
            raise ValueError(f"Invalid level_type: {self.level_type}")
    
    @property
    def is_strong(self) -> bool:
        """–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–∏–ª—å–Ω—ã–º (>0.7)"""
        return self.strength >= 0.7
    
    @property
    def is_recent(self, hours: int = 168) -> bool:
        """–ë—ã–ª–æ –ª–∏ –∫–∞—Å–∞–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –Ω–µ–¥–µ–ª—è)"""
        if not self.last_touch:
            return False
        age = datetime.now(timezone.utc) - self.last_touch
        return age < timedelta(hours=hours)
    
    def to_dict(self) -> Dict[str, Any]:
        """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "price": self.price,
            "level_type": self.level_type,
            "strength": self.strength,
            "touches": self.touches,
            "last_touch": self.last_touch.isoformat() if self.last_touch else None,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "distance_from_current": self.distance_from_current,
            "is_strong": self.is_strong,
            "is_recent": self.is_recent,
            "metadata": self.metadata
        }


@dataclass
class ATRData:
    """
    –î–∞–Ω–Ω—ã–µ Average True Range
    
    Attributes:
        calculated_atr: –†–∞—Å—á–µ—Ç–Ω—ã–π ATR (—Å—Ä–µ–¥–Ω–µ–µ High-Low)
        technical_atr: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π ATR (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏)
        atr_percent: ATR –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç —Ü–µ–Ω—ã
        current_range_used: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è (%)
        is_exhausted: –ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏ –∑–∞–ø–∞—Å —Ö–æ–¥–∞ (>75%)
        last_5_ranges: –î–∏–∞–ø–∞–∑–æ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –¥–Ω–µ–π
        updated_at: –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    calculated_atr: float
    technical_atr: float
    atr_percent: float
    current_range_used: float = 0.0
    is_exhausted: bool = False
    last_5_ranges: List[float] = field(default_factory=list)
    updated_at: Optional[datetime] = None
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è"""
        if self.calculated_atr < 0:
            raise ValueError(f"Invalid calculated_atr: {self.calculated_atr}")
        if self.technical_atr < 0:
            raise ValueError(f"Invalid technical_atr: {self.technical_atr}")
    
    @property
    def is_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        return self.calculated_atr > 0 and self.technical_atr > 0
    
    def to_dict(self) -> Dict[str, Any]:
        """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        return {
            "calculated_atr": self.calculated_atr,
            "technical_atr": self.technical_atr,
            "atr_percent": self.atr_percent,
            "current_range_used": self.current_range_used,
            "is_exhausted": self.is_exhausted,
            "last_5_ranges": self.last_5_ranges,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None
        }


@dataclass
class TechnicalAnalysisContext:
    """
    üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
    - –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (D1)
    - ATR –∏ –∑–∞–ø–∞—Å —Ö–æ–¥–∞
    - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    - –ü—Ä–µ–¥—Ä–∞—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    - –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    
    –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ:
    - levels_d1: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ 24 —á–∞—Å–∞
    - atr_data: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ —á–∞—Å
    - candles: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    Usage:
        context = await ta_manager.get_context("BTCUSDT")
        levels = context.levels_d1
        atr = context.atr_data.calculated_atr
        candles = context.recent_candles_m5
    """
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    symbol: str
    data_source: str = "bybit"  # bybit, yfinance, etc.
    
    # ==================== –£–†–û–í–ù–ò D1 ====================
    levels_d1: List[SupportResistanceLevel] = field(default_factory=list)
    levels_updated_at: Optional[datetime] = None
    levels_cache_ttl_hours: int = 24
    
    # ==================== ATR ====================
    atr_data: Optional[ATRData] = None
    atr_cache_ttl_hours: int = 1
    
    # ==================== –°–í–ï–ß–ò ====================
    recent_candles_m5: List = field(default_factory=list)   # 100 —Å–≤–µ—á–µ–π (8 —á–∞—Å–æ–≤)
    recent_candles_m30: List = field(default_factory=list)  # 50 —Å–≤–µ—á–µ–π (25 —á–∞—Å–æ–≤)
    recent_candles_h1: List = field(default_factory=list)   # 24 —Å–≤–µ—á–∏ (1 –¥–µ–Ω—å)
    recent_candles_h4: List = field(default_factory=list)   # 24 —Å–≤–µ—á–∏ (4 –¥–Ω—è)
    recent_candles_d1: List = field(default_factory=list)   # 180 —Å–≤–µ—á–µ–π (6 –º–µ—Å—è—Ü–µ–≤)
    candles_updated_at: Optional[datetime] = None
    candles_cache_ttl_minutes: int = 1
    
    # ==================== –ü–†–ï–î–†–ê–°–ß–ò–¢–ê–ù–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ ====================
    market_condition: MarketCondition = MarketCondition.UNKNOWN
    dominant_trend_h1: TrendDirection = TrendDirection.UNKNOWN
    dominant_trend_d1: TrendDirection = TrendDirection.UNKNOWN
    
    volatility_level: str = "normal"  # low, normal, high, extreme
    consolidation_detected: bool = False
    consolidation_bars_count: int = 0
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏
    has_recent_breakout: bool = False
    has_compression: bool = False  # –ü–æ–¥–∂–∞—Ç–∏–µ
    has_v_formation: bool = False  # V-–æ–±—Ä–∞–∑–Ω–∞—è —Ñ–æ—Ä–º–∞—Ü–∏—è
    
    # ==================== –ú–ï–¢–ê–î–ê–ù–ù–´–ï ====================
    context_created_at: datetime = field(default_factory=lambda: datetime.now(timezone.utc))
    last_full_update: Optional[datetime] = None
    update_count: int = 0
    error_count: int = 0
    last_error: Optional[str] = None
    
    # ==================== –ö–≠–®–ò–†–û–í–ê–ù–ò–ï ====================
    
    def is_levels_cache_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞ —É—Ä–æ–≤–Ω–µ–π"""
        if not self.levels_updated_at:
            return False
        age = datetime.now(timezone.utc) - self.levels_updated_at
        return age < timedelta(hours=self.levels_cache_ttl_hours)
    
    def is_atr_cache_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞ ATR"""
        if not self.atr_data or not self.atr_data.updated_at:
            return False
        age = datetime.now(timezone.utc) - self.atr_data.updated_at
        return age < timedelta(hours=self.atr_cache_ttl_hours)
    
    def is_candles_cache_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞ —Å–≤–µ—á–µ–π"""
        if not self.candles_updated_at:
            return False
        age = datetime.now(timezone.utc) - self.candles_updated_at
        return age < timedelta(minutes=self.candles_cache_ttl_minutes)
    
    def is_fully_initialized(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        return (
            len(self.levels_d1) > 0 and
            self.atr_data is not None and
            len(self.recent_candles_d1) > 0 and
            len(self.recent_candles_h1) > 0 and
            len(self.recent_candles_m5) > 0
        )
    
    # ==================== –ü–û–ò–°–ö –£–†–û–í–ù–ï–ô ====================
    
    def get_nearest_support(self, current_price: float, max_distance_percent: float = 5.0) -> Optional[SupportResistanceLevel]:
        """
        –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        
        Args:
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            max_distance_percent: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ %
            
        Returns:
            –ë–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ None
        """
        supports = [
            level for level in self.levels_d1
            if level.level_type == "support" and level.price < current_price
        ]
        
        if not supports:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        supports.sort(key=lambda l: abs(l.price - current_price))
        
        nearest = supports[0]
        distance_percent = abs(nearest.price - current_price) / current_price * 100
        
        if distance_percent <= max_distance_percent:
            return nearest
        
        return None
    
    def get_nearest_resistance(self, current_price: float, max_distance_percent: float = 5.0) -> Optional[SupportResistanceLevel]:
        """
        –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        
        Args:
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            max_distance_percent: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ %
            
        Returns:
            –ë–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∏–ª–∏ None
        """
        resistances = [
            level for level in self.levels_d1
            if level.level_type == "resistance" and level.price > current_price
        ]
        
        if not resistances:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        resistances.sort(key=lambda l: abs(l.price - current_price))
        
        nearest = resistances[0]
        distance_percent = abs(nearest.price - current_price) / current_price * 100
        
        if distance_percent <= max_distance_percent:
            return nearest
        
        return None
    
    def get_strong_levels(self, min_strength: float = 0.7) -> List[SupportResistanceLevel]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∏–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏"""
        return [level for level in self.levels_d1 if level.strength >= min_strength]
    
    def is_near_level(self, current_price: float, tolerance_percent: float = 0.5) -> Optional[SupportResistanceLevel]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ü–µ–Ω–∞ —Ä—è–¥–æ–º —Å –∫–∞–∫–∏–º-–ª–∏–±–æ —É—Ä–æ–≤–Ω–µ–º
        
        Args:
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            tolerance_percent: –î–æ–ø—É—Å–∫ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0.5% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            
        Returns:
            –£—Ä–æ–≤–µ–Ω—å –µ—Å–ª–∏ —Ä—è–¥–æ–º, –∏–Ω–∞—á–µ None
        """
        for level in self.levels_d1:
            distance_percent = abs(level.price - current_price) / current_price * 100
            if distance_percent <= tolerance_percent:
                return level
        return None
    
    # ==================== ATR –ü–†–û–í–ï–†–ö–ò ====================
    
    def is_atr_exhausted(self, threshold: float = 0.75) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å—á–µ—Ä–ø–∞–Ω –ª–∏ –∑–∞–ø–∞—Å —Ö–æ–¥–∞ (>75% ATR)
        
        Args:
            threshold: –ü–æ—Ä–æ–≥ –≤ –¥–æ–ª—è—Ö (0.75 = 75%)
        """
        if not self.atr_data:
            return False
        return self.atr_data.current_range_used >= threshold
    
    def get_remaining_atr_percent(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–π—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç ATR"""
        if not self.atr_data:
            return 0.0
        return max(0.0, 100.0 - self.atr_data.current_range_used)
    
    # ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================
    
    def get_cache_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫—ç—à–µ–π"""
        return {
            "levels_valid": self.is_levels_cache_valid(),
            "levels_age_hours": (datetime.now(timezone.utc) - self.levels_updated_at).total_seconds() / 3600 if self.levels_updated_at else None,
            "atr_valid": self.is_atr_cache_valid(),
            "atr_age_hours": (datetime.now(timezone.utc) - self.atr_data.updated_at).total_seconds() / 3600 if self.atr_data and self.atr_data.updated_at else None,
            "candles_valid": self.is_candles_cache_valid(),
            "candles_age_minutes": (datetime.now(timezone.utc) - self.candles_updated_at).total_seconds() / 60 if self.candles_updated_at else None,
            "fully_initialized": self.is_fully_initialized()
        }
    
    def get_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        return {
            "symbol": self.symbol,
            "data_source": self.data_source,
            "levels_count": len(self.levels_d1),
            "strong_levels_count": len(self.get_strong_levels()),
            "atr_calculated": self.atr_data.calculated_atr if self.atr_data else 0.0,
            "atr_exhausted": self.is_atr_exhausted(),
            "market_condition": self.market_condition.value,
            "trend_h1": self.dominant_trend_h1.value,
            "trend_d1": self.dominant_trend_d1.value,
            "has_compression": self.has_compression,
            "consolidation_detected": self.consolidation_detected,
            "update_count": self.update_count,
            "error_count": self.error_count,
            "cache_status": self.get_cache_status()
        }
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü–æ–ª–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "symbol": self.symbol,
            "data_source": self.data_source,
            "levels_d1": [level.to_dict() for level in self.levels_d1],
            "levels_updated_at": self.levels_updated_at.isoformat() if self.levels_updated_at else None,
            "atr_data": self.atr_data.to_dict() if self.atr_data else None,
            "candles_count": {
                "m5": len(self.recent_candles_m5),
                "m30": len(self.recent_candles_m30),
                "h1": len(self.recent_candles_h1),
                "h4": len(self.recent_candles_h4),
                "d1": len(self.recent_candles_d1)
            },
            "candles_updated_at": self.candles_updated_at.isoformat() if self.candles_updated_at else None,
            "market_condition": self.market_condition.value,
            "dominant_trend_h1": self.dominant_trend_h1.value,
            "dominant_trend_d1": self.dominant_trend_d1.value,
            "volatility_level": self.volatility_level,
            "consolidation_detected": self.consolidation_detected,
            "has_compression": self.has_compression,
            "has_v_formation": self.has_v_formation,
            "context_created_at": self.context_created_at.isoformat(),
            "last_full_update": self.last_full_update.isoformat() if self.last_full_update else None,
            "update_count": self.update_count,
            "error_count": self.error_count,
            "cache_status": self.get_cache_status()
        }
    
    def __repr__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        status = "‚úÖ initialized" if self.is_fully_initialized() else "‚ö†Ô∏è partial"
        return (f"TechnicalAnalysisContext(symbol='{self.symbol}', "
                f"levels={len(self.levels_d1)}, "
                f"atr={self.atr_data.calculated_atr if self.atr_data else 0:.2f}, "
                f"status={status})")
    
    def __str__(self) -> str:
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
        summary = self.get_summary()
        return (f"Technical Analysis Context for {self.symbol}:\n"
                f"  Levels: {summary['levels_count']} total, {summary['strong_levels_count']} strong\n"
                f"  ATR: {summary['atr_calculated']:.2f} (exhausted: {summary['atr_exhausted']})\n"
                f"  Market: {summary['market_condition']}\n"
                f"  Trend H1: {summary['trend_h1']}, D1: {summary['trend_d1']}\n"
                f"  Updates: {summary['update_count']}, Errors: {summary['error_count']}")


# Export
__all__ = [
    "TechnicalAnalysisContext",
    "SupportResistanceLevel",
    "ATRData",
    "MarketCondition",
    "TrendDirection"
]

logger.info("‚úÖ Technical Analysis Context module loaded")
