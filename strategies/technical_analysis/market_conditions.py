"""
Market Conditions Analyzer - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π

–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
1. –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è - –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –ø—Ä–æ–±–æ—è
2. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - —É—Ä–æ–≤–µ–Ω—å –∫–æ–ª–µ–±–∞–Ω–∏–π —Ü–µ–Ω—ã
3. –¢—Ä–µ–Ω–¥ - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–∏–ª–∞ –¥–≤–∏–∂–µ–Ω–∏—è
4. –≠–Ω–µ—Ä–≥–∏—è - –Ω–∞–∫–æ–ø–ª–µ–Ω–∞ –ª–∏ —ç–Ω–µ—Ä–≥–∏—è –¥–ª—è –ø—Ä–æ–±–æ—è
5. V-—Ñ–æ—Ä–º–∞—Ü–∏—è - —Ä–µ–∑–∫–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç –±–µ–∑ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
6. –†—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º - trending/consolidation/volatile

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
- –í—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–ø—Ä–æ–±–æ–π vs –æ—Ç–±–æ–π)
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —É—Å–ª–æ–≤–∏—è–º —Ä—ã–Ω–∫–∞
- –ê–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥ —Ç–µ–∫—É—â–∏–µ —É—Å–ª–æ–≤–∏—è

Author: Trading Bot Team
Version: 1.0.0
"""

import logging
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime, timedelta, timezone
from dataclasses import dataclass, field
from enum import Enum
from statistics import mean, stdev

from .context import MarketCondition, TrendDirection

logger = logging.getLogger(__name__)


class VolatilityLevel(Enum):
    """–£—Ä–æ–≤–µ–Ω—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
    VERY_LOW = "very_low"      # < 0.5% –¥–∏–∞–ø–∞–∑–æ–Ω
    LOW = "low"                # 0.5% - 1%
    NORMAL = "normal"          # 1% - 2%
    HIGH = "high"              # 2% - 4%
    EXTREME = "extreme"        # > 4%


class EnergyLevel(Enum):
    """–£—Ä–æ–≤–µ–Ω—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏"""
    DEPLETED = "depleted"      # –≠–Ω–µ—Ä–≥–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω–∞
    LOW = "low"                # –ù–∏–∑–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è
    MODERATE = "moderate"      # –£–º–µ—Ä–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è
    HIGH = "high"              # –í—ã—Å–æ–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è (–≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–±–æ—é)
    EXPLOSIVE = "explosive"    # –í–∑—Ä—ã–≤–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è


class TrendStrength(Enum):
    """–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞"""
    VERY_WEAK = "very_weak"    # < 0.5%
    WEAK = "weak"              # 0.5% - 1%
    MODERATE = "moderate"      # 1% - 2%
    STRONG = "strong"          # 2% - 5%
    VERY_STRONG = "very_strong"  # > 5%


@dataclass
class MarketConditionsAnalysis:
    """
    –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    
    Attributes:
        market_condition: –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞
        trend_direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
        trend_strength: –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞
        volatility_level: –£—Ä–æ–≤–µ–Ω—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        energy_level: –£—Ä–æ–≤–µ–Ω—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
        has_consolidation: –ù–∞–ª–∏—á–∏–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
        consolidation_bars: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
        has_v_formation: –ù–∞–ª–∏—á–∏–µ V-—Ñ–æ—Ä–º–∞—Ü–∏–∏
        is_suitable_for_breakout: –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–±–æ—è
        is_suitable_for_bounce: –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Ç–±–æ—è
        is_suitable_for_false_breakout: –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –õ–ü —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    market_condition: MarketCondition
    trend_direction: TrendDirection
    trend_strength: TrendStrength
    volatility_level: VolatilityLevel
    energy_level: EnergyLevel
    
    has_consolidation: bool = False
    consolidation_bars: int = 0
    consolidation_range_percent: float = 0.0
    
    has_v_formation: bool = False
    v_formation_type: Optional[str] = None
    
    is_suitable_for_breakout: bool = False
    is_suitable_for_bounce: bool = False
    is_suitable_for_false_breakout: bool = False
    
    confidence: float = 0.0
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def to_dict(self) -> Dict[str, Any]:
        """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        return {
            "market_condition": self.market_condition.value,
            "trend_direction": self.trend_direction.value,
            "trend_strength": self.trend_strength.value,
            "volatility_level": self.volatility_level.value,
            "energy_level": self.energy_level.value,
            "has_consolidation": self.has_consolidation,
            "consolidation_bars": self.consolidation_bars,
            "consolidation_range_percent": self.consolidation_range_percent,
            "has_v_formation": self.has_v_formation,
            "v_formation_type": self.v_formation_type,
            "is_suitable_for_breakout": self.is_suitable_for_breakout,
            "is_suitable_for_bounce": self.is_suitable_for_bounce,
            "is_suitable_for_false_breakout": self.is_suitable_for_false_breakout,
            "confidence": self.confidence,
            "metadata": self.metadata
        }


class MarketConditionsAnalyzer:
    """
    üå°Ô∏è –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
    - –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è vs –¢—Ä–µ–Ω–¥
    - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    - –ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è
    - –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    
    Usage:
        analyzer = MarketConditionsAnalyzer()
        
        # –ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–∞ H1 –∏ D1
        conditions = analyzer.analyze_conditions(
            candles_h1=candles_h1,
            candles_d1=candles_d1,
            atr=atr_data.calculated_atr
        )
        
        # –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if conditions.is_suitable_for_breakout:
            strategy = BreakoutStrategy()
        elif conditions.is_suitable_for_bounce:
            strategy = BounceStrategy()
    """
    
    def __init__(
        self,
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
        consolidation_min_bars: int = 10,
        consolidation_max_range_percent: float = 2.0,
        consolidation_energy_threshold: int = 15,  # –ë–∞—Ä–æ–≤ –¥–ª—è –≤—ã—Å–æ–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        volatility_very_low: float = 0.5,
        volatility_low: float = 1.0,
        volatility_normal: float = 2.0,
        volatility_high: float = 4.0,
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–Ω–¥–∞
        trend_weak: float = 0.5,
        trend_moderate: float = 1.0,
        trend_strong: float = 2.0,
        trend_very_strong: float = 5.0,
        
        # V-—Ñ–æ—Ä–º–∞—Ü–∏—è
        v_formation_min_move: float = 3.0,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        
        Args:
            consolidation_min_bars: –ú–∏–Ω–∏–º—É–º –±–∞—Ä–æ–≤ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
            consolidation_max_range_percent: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
            consolidation_energy_threshold: –ë–∞—Ä–æ–≤ –¥–ª—è –≤—ã—Å–æ–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏
            volatility_very_low: –ü–æ—Ä–æ–≥ –æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility_low: –ü–æ—Ä–æ–≥ –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility_normal: –ü–æ—Ä–æ–≥ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility_high: –ü–æ—Ä–æ–≥ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            trend_weak: –ü–æ—Ä–æ–≥ —Å–ª–∞–±–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
            trend_moderate: –ü–æ—Ä–æ–≥ —É–º–µ—Ä–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
            trend_strong: –ü–æ—Ä–æ–≥ —Å–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
            trend_very_strong: –ü–æ—Ä–æ–≥ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
            v_formation_min_move: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–ª—è V-—Ñ–æ—Ä–º–∞—Ü–∏–∏
        """
        self.consolidation_min_bars = consolidation_min_bars
        self.consolidation_max_range = consolidation_max_range_percent / 100.0
        self.consolidation_energy_threshold = consolidation_energy_threshold
        
        self.vol_very_low = volatility_very_low / 100.0
        self.vol_low = volatility_low / 100.0
        self.vol_normal = volatility_normal / 100.0
        self.vol_high = volatility_high / 100.0
        
        self.trend_weak = trend_weak / 100.0
        self.trend_moderate = trend_moderate / 100.0
        self.trend_strong = trend_strong / 100.0
        self.trend_very_strong = trend_very_strong / 100.0
        
        self.v_min_move = v_formation_min_move / 100.0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "analyses_count": 0,
            "consolidations_detected": 0,
            "trends_detected": 0,
            "v_formations_detected": 0,
            "high_energy_detected": 0,
            "high_volatility_detected": 0
        }
        
        logger.info("üå°Ô∏è MarketConditionsAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   ‚Ä¢ Consolidation: min_bars={consolidation_min_bars}, "
                   f"max_range={consolidation_max_range_percent}%")
        logger.info(f"   ‚Ä¢ Energy threshold: {consolidation_energy_threshold} bars")
    
    # ==================== –û–°–ù–û–í–ù–û–ô –ê–ù–ê–õ–ò–ó ====================
    
    def analyze_conditions(
        self,
        candles_h1: Optional[List] = None,
        candles_d1: Optional[List] = None,
        atr: Optional[float] = None,
        current_price: Optional[float] = None
    ) -> MarketConditionsAnalysis:
        """
        üéØ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç:
        1. –¢—Ä–µ–Ω–¥ (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–∏–ª–∞)
        2. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        3. –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—é
        4. –≠–Ω–µ—Ä–≥–∏—é
        5. V-—Ñ–æ—Ä–º–∞—Ü–∏—é
        6. –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            candles_h1: –°–≤–µ—á–∏ H1 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            candles_d1: –°–≤–µ—á–∏ D1 –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            atr: ATR –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            MarketConditionsAnalysis —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        try:
            self.stats["analyses_count"] += 1
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º H1 –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
            primary_candles = candles_h1 or candles_d1
            
            if not primary_candles or len(primary_candles) < 10:
                return self._create_default_analysis()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            if current_price is None:
                current_price = float(primary_candles[-1]['close_price'])
            
            # 1. –¢–†–ï–ù–î (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–∏–ª–∞)
            trend_direction, trend_strength = self._analyze_trend(primary_candles)
            
            # 2. –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨
            volatility_level = self._analyze_volatility(primary_candles, atr)
            
            # 3. –ö–û–ù–°–û–õ–ò–î–ê–¶–ò–Ø
            has_consolidation, consol_bars, consol_range = self._analyze_consolidation(primary_candles)
            
            # 4. –≠–ù–ï–†–ì–ò–Ø (–Ω–∞–∫–æ–ø–ª–µ–Ω–∞ –ª–∏ –¥–ª—è –ø—Ä–æ–±–æ—è)
            energy_level = self._analyze_energy(
                candles=primary_candles,
                has_consolidation=has_consolidation,
                consolidation_bars=consol_bars
            )
            
            # 5. V-–§–û–†–ú–ê–¶–ò–Ø
            has_v, v_type = self._analyze_v_formation(primary_candles)
            
            # 6. –û–ë–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –†–´–ù–ö–ê
            market_condition = self._determine_market_condition(
                has_consolidation=has_consolidation,
                trend_strength=trend_strength,
                volatility_level=volatility_level
            )
            
            # 7. –ü–û–î–•–û–î–Ø–©–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ò
            suitable_breakout = self._is_suitable_for_breakout(
                has_consolidation=has_consolidation,
                energy_level=energy_level,
                trend_strength=trend_strength
            )
            
            suitable_bounce = self._is_suitable_for_bounce(
                has_consolidation=has_consolidation,
                volatility_level=volatility_level,
                trend_strength=trend_strength
            )
            
            suitable_false_breakout = self._is_suitable_for_false_breakout(
                volatility_level=volatility_level,
                trend_strength=trend_strength,
                has_v=has_v
            )
            
            # 8. –£–í–ï–†–ï–ù–ù–û–°–¢–¨
            confidence = self._calculate_confidence(
                market_condition=market_condition,
                data_quality=len(primary_candles)
            )
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = {
                "candles_h1_count": len(candles_h1) if candles_h1 else 0,
                "candles_d1_count": len(candles_d1) if candles_d1 else 0,
                "atr": atr,
                "current_price": current_price,
                "analyzed_at": datetime.now(timezone.utc).isoformat()
            }
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            analysis = MarketConditionsAnalysis(
                market_condition=market_condition,
                trend_direction=trend_direction,
                trend_strength=trend_strength,
                volatility_level=volatility_level,
                energy_level=energy_level,
                has_consolidation=has_consolidation,
                consolidation_bars=consol_bars,
                consolidation_range_percent=consol_range * 100,
                has_v_formation=has_v,
                v_formation_type=v_type,
                is_suitable_for_breakout=suitable_breakout,
                is_suitable_for_bounce=suitable_bounce,
                is_suitable_for_false_breakout=suitable_false_breakout,
                confidence=confidence,
                metadata=metadata
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_stats(analysis)
            
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω: {market_condition.value}, "
                       f"trend={trend_direction.value}/{trend_strength.value}, "
                       f"energy={energy_level.value}")
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ª–æ–≤–∏–π: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return self._create_default_analysis()
    
    # ==================== –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–ê ====================
    
    def _analyze_trend(self, candles: List) -> Tuple[TrendDirection, TrendStrength]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–∏–ª–∞)
        
        –ú–µ—Ç–æ–¥–∏–∫–∞:
        1. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—É —Å–≤–µ—á–µ–π
        2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
        3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–∏–ª—É
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            
        Returns:
            Tuple[–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞]
        """
        try:
            if len(candles) < 10:
                return TrendDirection.NEUTRAL, TrendStrength.VERY_WEAK
            
            # –î–µ–ª–∏–º –Ω–∞ –¥–≤–µ –ø–æ–ª–æ–≤–∏–Ω—ã
            mid = len(candles) // 2
            first_half = candles[:mid]
            second_half = candles[mid:]
            
            # –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
            first_avg = mean([float(c['close_price']) for c in first_half])
            second_avg = mean([float(c['close_price']) for c in second_half])
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
            change_percent = (second_avg - first_avg) / first_avg
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            if change_percent > 0.005:  # > 0.5%
                direction = TrendDirection.BULLISH
            elif change_percent < -0.005:  # < -0.5%
                direction = TrendDirection.BEARISH
            else:
                direction = TrendDirection.NEUTRAL
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É
            abs_change = abs(change_percent)
            
            if abs_change >= self.trend_very_strong:
                strength = TrendStrength.VERY_STRONG
            elif abs_change >= self.trend_strong:
                strength = TrendStrength.STRONG
            elif abs_change >= self.trend_moderate:
                strength = TrendStrength.MODERATE
            elif abs_change >= self.trend_weak:
                strength = TrendStrength.WEAK
            else:
                strength = TrendStrength.VERY_WEAK
            
            logger.debug(f"üìà –¢—Ä–µ–Ω–¥: {direction.value}, —Å–∏–ª–∞: {strength.value} ({change_percent*100:.2f}%)")
            
            return direction, strength
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞: {e}")
            return TrendDirection.UNKNOWN, TrendStrength.VERY_WEAK
    
    # ==================== –ê–ù–ê–õ–ò–ó –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–ò ====================
    
    def _analyze_volatility(self, candles: List, atr: Optional[float] = None) -> VolatilityLevel:
        """
        –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç:
        1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è
        2. –°—Ä–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω High-Low
        3. ATR (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            atr: ATR (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –£—Ä–æ–≤–µ–Ω—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        """
        try:
            if len(candles) < 5:
                return VolatilityLevel.NORMAL
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–≤–µ—á–µ–π
            recent = candles[-20:] if len(candles) > 20 else candles
            
            closes = [float(c['close_price']) for c in recent]
            avg_close = mean(closes)
            
            # –ú–µ—Ç–æ–¥ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            if len(closes) >= 5:
                std_dev = stdev(closes)
                volatility_percent = (std_dev / avg_close) if avg_close > 0 else 0
            else:
                volatility_percent = 0
            
            # –ú–µ—Ç–æ–¥ 2: –°—Ä–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
            ranges = [float(c['high_price'] - c['low_price']) for c in recent]
            avg_range = mean(ranges)
            range_percent = (avg_range / avg_close) if avg_close > 0 else 0
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞
            combined_volatility = (volatility_percent + range_percent) / 2
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
            if combined_volatility < self.vol_very_low:
                level = VolatilityLevel.VERY_LOW
            elif combined_volatility < self.vol_low:
                level = VolatilityLevel.LOW
            elif combined_volatility < self.vol_normal:
                level = VolatilityLevel.NORMAL
            elif combined_volatility < self.vol_high:
                level = VolatilityLevel.HIGH
            else:
                level = VolatilityLevel.EXTREME
            
            logger.debug(f"üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {level.value} ({combined_volatility*100:.2f}%)")
            
            return level
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return VolatilityLevel.NORMAL
    
    # ==================== –ê–ù–ê–õ–ò–ó –ö–û–ù–°–û–õ–ò–î–ê–¶–ò–ò ====================
    
    def _analyze_consolidation(self, candles: List) -> Tuple[bool, int, float]:
        """
        –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ (–±–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)
        
        –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è = –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ —É–∑–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            
        Returns:
            Tuple[–µ—Å—Ç—å –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è?, –∫–æ–ª-–≤–æ –±–∞—Ä–æ–≤, –¥–∏–∞–ø–∞–∑–æ–Ω –≤ %]
        """
        try:
            if len(candles) < self.consolidation_min_bars:
                return False, 0, 0.0
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π
            lookback = min(30, len(candles))
            recent = candles[-lookback:]
            
            # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
            max_consol_bars = 0
            max_consol_range = 0.0
            
            for start_idx in range(len(recent) - self.consolidation_min_bars + 1):
                for end_idx in range(start_idx + self.consolidation_min_bars, len(recent) + 1):
                    subset = recent[start_idx:end_idx]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
                    highs = [float(c['high_price']) for c in subset]
                    lows = [float(c['low_price']) for c in subset]
                    closes = [float(c['close_price']) for c in subset]
                    
                    max_high = max(highs)
                    min_low = min(lows)
                    avg_close = mean(closes)
                    
                    range_percent = (max_high - min_low) / avg_close if avg_close > 0 else 0
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞
                    if range_percent <= self.consolidation_max_range:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
                        first_half_avg = mean(closes[:len(closes)//2])
                        second_half_avg = mean(closes[len(closes)//2:])
                        trend = abs(second_half_avg - first_half_avg) / first_half_avg
                        
                        if trend < 0.015:  # –¢—Ä–µ–Ω–¥ < 1.5%
                            bars_count = end_idx - start_idx
                            if bars_count > max_consol_bars:
                                max_consol_bars = bars_count
                                max_consol_range = range_percent
            
            has_consolidation = max_consol_bars >= self.consolidation_min_bars
            
            if has_consolidation:
                logger.info(f"‚úÖ –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: {max_consol_bars} –±–∞—Ä–æ–≤, "
                          f"–¥–∏–∞–ø–∞–∑–æ–Ω {max_consol_range*100:.2f}%")
            
            return has_consolidation, max_consol_bars, max_consol_range
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False, 0, 0.0
    
    # ==================== –ê–ù–ê–õ–ò–ó –≠–ù–ï–†–ì–ò–ò ====================
    
    def _analyze_energy(
        self,
        candles: List,
        has_consolidation: bool,
        consolidation_bars: int
    ) -> EnergyLevel:
        """
        –ê–Ω–∞–ª–∏–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –ø—Ä–æ–±–æ—è
        
        –≠–Ω–µ—Ä–≥–∏—è –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏.
        –ß–µ–º –¥–æ–ª—å—à–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è - —Ç–µ–º –±–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏.
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            has_consolidation: –ï—Å—Ç—å –ª–∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è
            consolidation_bars: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            –£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏
        """
        try:
            if not has_consolidation:
                return EnergyLevel.LOW
            
            # –≠–Ω–µ—Ä–≥–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
            if consolidation_bars >= self.consolidation_energy_threshold * 2:
                level = EnergyLevel.EXPLOSIVE
            elif consolidation_bars >= self.consolidation_energy_threshold:
                level = EnergyLevel.HIGH
            elif consolidation_bars >= self.consolidation_min_bars * 1.5:
                level = EnergyLevel.MODERATE
            else:
                level = EnergyLevel.LOW
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å–∂–∞—Ç–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            if len(candles) >= 20:
                recent = candles[-20:]
                ranges = [float(c['high_price'] - c['low_price']) for c in recent]
                
                # –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —É–º–µ–Ω—å—à–∞—é—Ç—Å—è - —ç–Ω–µ—Ä–≥–∏—è —Ä–∞—Å—Ç–µ—Ç
                first_half_avg = mean(ranges[:10])
                second_half_avg = mean(ranges[10:])
                
                if second_half_avg < first_half_avg * 0.8:  # –°–∂–∞—Ç–∏–µ –Ω–∞ 20%+
                    # –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏
                    if level == EnergyLevel.MODERATE:
                        level = EnergyLevel.HIGH
                    elif level == EnergyLevel.LOW:
                        level = EnergyLevel.MODERATE
            
            logger.debug(f"‚ö° –≠–Ω–µ—Ä–≥–∏—è: {level.value} (–∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è {consolidation_bars} –±–∞—Ä–æ–≤)")
            
            return level
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–Ω–µ—Ä–≥–∏–∏: {e}")
            return EnergyLevel.LOW
    
    # ==================== –ê–ù–ê–õ–ò–ó V-–§–û–†–ú–ê–¶–ò–ò ====================
    
    def _analyze_v_formation(self, candles: List) -> Tuple[bool, Optional[str]]:
        """
        –ê–Ω–∞–ª–∏–∑ V-—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Ä–µ–∑–∫–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç –±–µ–∑ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏)
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            
        Returns:
            Tuple[–µ—Å—Ç—å V-—Ñ–æ—Ä–º–∞—Ü–∏—è?, —Ç–∏–ø (bullish/bearish)]
        """
        try:
            if len(candles) < 5:
                return False, None
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π
            recent = candles[-10:] if len(candles) > 10 else candles
            
            closes = [float(c['close_price']) for c in recent]
            highs = [float(c['high_price']) for c in recent]
            lows = [float(c['low_price']) for c in recent]
            
            # –ò—â–µ–º —ç–∫—Å—Ç—Ä–µ–º—É–º (–¥–Ω–æ –∏–ª–∏ –≤–µ—Ä—à–∏–Ω—É V)
            max_high = max(highs)
            min_low = min(lows)
            max_idx = highs.index(max_high)
            min_idx = lows.index(min_low)
            
            # V-—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–Ω–∏–∑-–≤–≤–µ—Ä—Ö (–±—ã—á—å—è)
            if min_idx > 0 and min_idx < len(recent) - 2:
                before = closes[:min_idx+1]
                after = closes[min_idx:]
                
                if before and after and len(after) >= 2:
                    down_move = (before[0] - min_low) / before[0]
                    up_move = (after[-1] - min_low) / min_low
                    
                    if down_move >= self.v_min_move and up_move >= self.v_min_move * 0.7:
                        logger.info(f"‚úÖ V-—Ñ–æ—Ä–º–∞—Ü–∏—è (–±—ã—á—å—è): down={down_move*100:.1f}%, up={up_move*100:.1f}%")
                        return True, "bullish"
            
            # V-—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–≤–µ—Ä—Ö-–≤–Ω–∏–∑ (–º–µ–¥–≤–µ–∂—å—è)
            if max_idx > 0 and max_idx < len(recent) - 2:
                before = closes[:max_idx+1]
                after = closes[max_idx:]
                
                if before and after and len(after) >= 2:
                    up_move = (max_high - before[0]) / before[0]
                    down_move = (max_high - after[-1]) / max_high
                    
                    if up_move >= self.v_min_move and down_move >= self.v_min_move * 0.7:
                        logger.info(f"‚úÖ V-—Ñ–æ—Ä–º–∞—Ü–∏—è (–º–µ–¥–≤–µ–∂—å—è): up={up_move*100:.1f}%, down={down_move*100:.1f}%")
                        return True, "bearish"
            
            return False, None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ V-—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return False, None
    
    # ==================== –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø –†–´–ù–ö–ê ====================
    
    def _determine_market_condition(
        self,
        has_consolidation: bool,
        trend_strength: TrendStrength,
        volatility_level: VolatilityLevel
    ) -> MarketCondition:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞
        
        Args:
            has_consolidation: –ï—Å—Ç—å –ª–∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è
            trend_strength: –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞
            volatility_level: –£—Ä–æ–≤–µ–Ω—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            
        Returns:
            –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞
        """
        try:
            # –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è (–±–æ–∫–æ–≤–∏–∫)
            if has_consolidation:
                return MarketCondition.CONSOLIDATION
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫
            if volatility_level in [VolatilityLevel.HIGH, VolatilityLevel.EXTREME]:
                return MarketCondition.VOLATILE
            
            # –¢—Ä–µ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫
            if trend_strength in [TrendStrength.STRONG, TrendStrength.VERY_STRONG]:
                return MarketCondition.TRENDING
            
            # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫
            return MarketCondition.NEUTRAL
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return MarketCondition.UNKNOWN
    
    # ==================== –ü–û–î–•–û–î–Ø–©–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ò ====================
    
    def _is_suitable_for_breakout(
        self,
        has_consolidation: bool,
        energy_level: EnergyLevel,
        trend_strength: TrendStrength
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–±–æ—è
        
        –ü–æ–¥—Ö–æ–¥–∏—Ç –µ—Å–ª–∏:
        - –ï—Å—Ç—å –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è (—ç–Ω–µ—Ä–≥–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∞)
        - –í—ã—Å–æ–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è
        - –ù–µ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
        """
        return (
            has_consolidation and
            energy_level in [EnergyLevel.HIGH, EnergyLevel.EXPLOSIVE] and
            trend_strength not in [TrendStrength.VERY_STRONG]
        )
    
    def _is_suitable_for_bounce(
        self,
        has_consolidation: bool,
        volatility_level: VolatilityLevel,
        trend_strength: TrendStrength
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Ç–±–æ—è
        
        –ü–æ–¥—Ö–æ–¥–∏—Ç –µ—Å–ª–∏:
        - –ù–ï–¢ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ (—É—Ä–æ–≤–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç)
        - –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∏–ª–∏ –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        - –ï—Å—Ç—å —Ç—Ä–µ–Ω–¥
        """
        return (
            not has_consolidation and
            volatility_level not in [VolatilityLevel.EXTREME] and
            trend_strength in [TrendStrength.MODERATE, TrendStrength.STRONG]
        )
    
    def _is_suitable_for_false_breakout(
        self,
        volatility_level: VolatilityLevel,
        trend_strength: TrendStrength,
        has_v: bool
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–±–æ—è
        
        –ü–æ–¥—Ö–æ–¥–∏—Ç –µ—Å–ª–∏:
        - –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–ª–æ–≤—É—à–∫–∏ –∫—Ä—É–ø–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞)
        - –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ (–æ—Ç–∫–∞—Ç—ã –∏ –ª–æ–∂–Ω—ã–µ –ø—Ä–æ–±–æ–∏)
        - V-—Ñ–æ—Ä–º–∞—Ü–∏—è
        """
        return (
            volatility_level in [VolatilityLevel.HIGH, VolatilityLevel.EXTREME] or
            trend_strength in [TrendStrength.STRONG, TrendStrength.VERY_STRONG] or
            has_v
        )
    
    # ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================
    
    def _calculate_confidence(
        self,
        market_condition: MarketCondition,
        data_quality: int
    ) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∞–Ω–∞–ª–∏–∑–µ"""
        confidence = 0.5
        
        # –ë–æ–Ω—É—Å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        if data_quality >= 50:
            confidence += 0.3
        elif data_quality >= 20:
            confidence += 0.2
        elif data_quality >= 10:
            confidence += 0.1
        
        # –ë–æ–Ω—É—Å –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if market_condition not in [MarketCondition.UNKNOWN, MarketCondition.NEUTRAL]:
            confidence += 0.2
        
        return min(1.0, confidence)
    
    def _create_default_analysis(self) -> MarketConditionsAnalysis:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        return MarketConditionsAnalysis(
            market_condition=MarketCondition.UNKNOWN,
            trend_direction=TrendDirection.UNKNOWN,
            trend_strength=TrendStrength.VERY_WEAK,
            volatility_level=VolatilityLevel.NORMAL,
            energy_level=EnergyLevel.LOW,
            confidence=0.0
        )
    
    # ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================
    
    def _update_stats(self, analysis: MarketConditionsAnalysis):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if analysis.has_consolidation:
            self.stats["consolidations_detected"] += 1
        
        if analysis.trend_strength in [TrendStrength.STRONG, TrendStrength.VERY_STRONG]:
            self.stats["trends_detected"] += 1
        
        if analysis.has_v_formation:
            self.stats["v_formations_detected"] += 1
        
        if analysis.energy_level in [EnergyLevel.HIGH, EnergyLevel.EXPLOSIVE]:
            self.stats["high_energy_detected"] += 1
        
        if analysis.volatility_level in [VolatilityLevel.HIGH, VolatilityLevel.EXTREME]:
            self.stats["high_volatility_detected"] += 1
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        return {
            **self.stats,
            "config": {
                "consolidation_min_bars": self.consolidation_min_bars,
                "consolidation_energy_threshold": self.consolidation_energy_threshold,
                "volatility_thresholds": {
                    "very_low": self.vol_very_low * 100,
                    "low": self.vol_low * 100,
                    "normal": self.vol_normal * 100,
                    "high": self.vol_high * 100
                },
                "trend_thresholds": {
                    "weak": self.trend_weak * 100,
                    "moderate": self.trend_moderate * 100,
                    "strong": self.trend_strong * 100,
                    "very_strong": self.trend_very_strong * 100
                }
            }
        }
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats = {
            "analyses_count": 0,
            "consolidations_detected": 0,
            "trends_detected": 0,
            "v_formations_detected": 0,
            "high_energy_detected": 0,
            "high_volatility_detected": 0
        }
        logger.info("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ MarketConditionsAnalyzer —Å–±—Ä–æ—à–µ–Ω–∞")
    
    def __repr__(self) -> str:
        return (f"MarketConditionsAnalyzer(analyses={self.stats['analyses_count']}, "
                f"consolidations={self.stats['consolidations_detected']}, "
                f"trends={self.stats['trends_detected']})")
    
    def __str__(self) -> str:
        stats = self.get_stats()
        return (f"Market Conditions Analyzer:\n"
                f"  Analyses: {stats['analyses_count']}\n"
                f"  Consolidations: {stats['consolidations_detected']}\n"
                f"  Trends: {stats['trends_detected']}\n"
                f"  V-formations: {stats['v_formations_detected']}\n"
                f"  High energy: {stats['high_energy_detected']}\n"
                f"  High volatility: {stats['high_volatility_detected']}")


# Export
__all__ = [
    "MarketConditionsAnalyzer",
    "MarketConditionsAnalysis",
    "VolatilityLevel",
    "EnergyLevel",
    "TrendStrength"
]

logger.info("‚úÖ Market Conditions Analyzer module loaded")
