"""
Level Analyzer - Support and Resistance Level Detection

–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
1. –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤ (–º–∞–∫—Å–∏–º—É–º—ã/–º–∏–Ω–∏–º—É–º—ã)
2. –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –±–ª–∏–∑–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
3. –ü–æ–¥—Å—á–µ—Ç –∫–∞—Å–∞–Ω–∏–π (touches) –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
4. –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —É—Ä–æ–≤–Ω—è (strength)
5. –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ë–°–£ (–ë–∞—Ä –°–æ–∑–¥–∞–≤—à–∏–π –£—Ä–æ–≤–µ–Ω—å)
6. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞—Å–∞–Ω–∏—è (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—Ç–µ—Å—Ç–∞)

–¢–∏–ø—ã —É—Ä–æ–≤–Ω–µ–π:
- Support: —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã)
- Resistance: —É—Ä–æ–≤–Ω–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã)

Author: Trading Bot Team
Version: 1.0.0
"""

import logging
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime, timedelta, timezone
from dataclasses import dataclass
from collections import defaultdict

from .context import SupportResistanceLevel

logger = logging.getLogger(__name__)


@dataclass
class LevelCandidate:
    """
    –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å (–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ SupportResistanceLevel
    """
    price: float
    level_type: str  # "support" –∏–ª–∏ "resistance"
    touches: List[datetime] = None  # –í—Ä–µ–º–µ–Ω–∞ –∫–∞—Å–∞–Ω–∏–π
    touch_prices: List[float] = None  # –¢–æ—á–Ω—ã–µ —Ü–µ–Ω—ã –∫–∞—Å–∞–Ω–∏–π
    created_at: Optional[datetime] = None  # –ë–°–£ - –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞–Ω —É—Ä–æ–≤–µ–Ω—å
    
    def __post_init__(self):
        if self.touches is None:
            self.touches = []
        if self.touch_prices is None:
            self.touch_prices = []
    
    @property
    def touch_count(self) -> int:
        return len(self.touches)
    
    @property
    def last_touch(self) -> Optional[datetime]:
        return self.touches[-1] if self.touches else None


class LevelAnalyzer:
    """
    üéØ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
    
    –ù–∞—Ö–æ–¥–∏—Ç –∑–Ω–∞—á–∏–º—ã–µ —É—Ä–æ–≤–Ω–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.
    
    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤ (–º–∞–∫—Å–∏–º—É–º—ã/–º–∏–Ω–∏–º—É–º—ã)
    2. –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –±–ª–∏–∑–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞)
    3. –ü–æ–¥—Å—á–µ—Ç –∫–∞—Å–∞–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
    4. –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —É—Ä–æ–≤–Ω—è
    5. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–∞–±—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    
    Usage:
        analyzer = LevelAnalyzer()
        levels = analyzer.find_all_levels(candles_d1, min_touches=2)
        
        for level in levels:
            print(f"{level.level_type}: {level.price:.2f}, strength={level.strength:.2f}")
    """
    
    def __init__(
        self,
        min_touches: int = 2,              # –ú–∏–Ω–∏–º—É–º –∫–∞—Å–∞–Ω–∏–π –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        min_strength: float = 0.3,          # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —É—Ä–æ–≤–Ω—è (0.0-1.0)
        touch_tolerance_percent: float = 0.5,  # –î–æ–ø—É—Å–∫ –∫–∞—Å–∞–Ω–∏—è –≤ % (0.5% = 50 –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–∏ —Ü–µ–Ω–µ 10000)
        cluster_tolerance_percent: float = 1.0,  # –î–æ–ø—É—Å–∫ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –≤ %
        lookback_window: int = 10,          # –û–∫–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
        max_levels_per_type: int = 10,      # –ú–∞–∫—Å–∏–º—É–º —É—Ä–æ–≤–Ω–µ–π –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        min_level_distance_percent: float = 2.0,  # –ú–∏–Ω. —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ (%)
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        
        Args:
            min_touches: –ú–∏–Ω–∏–º—É–º –∫–∞—Å–∞–Ω–∏–π –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
            min_strength: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —É—Ä–æ–≤–Ω—è
            touch_tolerance_percent: –î–æ–ø—É—Å–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Å–∞–Ω–∏—è
            cluster_tolerance_percent: –î–æ–ø—É—Å–∫ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω–µ–π
            lookback_window: –û–∫–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
            max_levels_per_type: –ú–∞–∫—Å–∏–º—É–º —É—Ä–æ–≤–Ω–µ–π –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            min_level_distance_percent: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
        """
        self.min_touches = min_touches
        self.min_strength = min_strength
        self.touch_tolerance = touch_tolerance_percent / 100.0
        self.cluster_tolerance = cluster_tolerance_percent / 100.0
        self.lookback_window = lookback_window
        self.max_levels_per_type = max_levels_per_type
        self.min_level_distance = min_level_distance_percent / 100.0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "analyses_count": 0,
            "total_levels_found": 0,
            "support_levels_found": 0,
            "resistance_levels_found": 0,
            "average_level_strength": 0.0,
            "strong_levels_count": 0,
            "candidates_clustered": 0
        }
        
        logger.info("üéØ LevelAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   ‚Ä¢ Min touches: {min_touches}")
        logger.info(f"   ‚Ä¢ Min strength: {min_strength}")
        logger.info(f"   ‚Ä¢ Touch tolerance: {touch_tolerance_percent}%")
        logger.info(f"   ‚Ä¢ Cluster tolerance: {cluster_tolerance_percent}%")
        logger.info(f"   ‚Ä¢ Lookback window: {lookback_window}")
    
    # ==================== –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î ====================
    
    def find_all_levels(
        self,
        candles: List,
        min_touches: Optional[int] = None,
        min_strength: Optional[float] = None,
        current_price: Optional[float] = None
    ) -> List[SupportResistanceLevel]:
        """
        üîç –ù–∞–π—Ç–∏ –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª:
        1. –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
        2. –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –±–ª–∏–∑–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        3. –ü–æ–¥—Å—á–µ—Ç –∫–∞—Å–∞–Ω–∏–π
        4. –†–∞—Å—á–µ—Ç —Å–∏–ª—ã
        5. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π D1 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 60-180 —Å–≤–µ—á–µ–π)
            min_touches: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∏–Ω–∏–º—É–º –∫–∞—Å–∞–Ω–∏–π
            min_strength: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å–∏–ª—É
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (–¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π SupportResistanceLevel
        """
        try:
            self.stats["analyses_count"] += 1
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not candles or len(candles) < 20:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(candles)}")
                return []
            
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –Ω–∞ {len(candles)} —Å–≤–µ—á–∞—Ö D1")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
            min_touches = min_touches or self.min_touches
            min_strength = min_strength or self.min_strength
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
            if current_price is None:
                current_price = float(candles[-1]['close_price'])
            
            # –®–ê–ì 1: –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
            support_candidates = self._find_local_minima(candles)
            resistance_candidates = self._find_local_maxima(candles)
            
            logger.debug(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: support={len(support_candidates)}, resistance={len(resistance_candidates)}")
            
            # –®–ê–ì 2: –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –±–ª–∏–∑–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
            support_clusters = self._cluster_levels(support_candidates, candles)
            resistance_clusters = self._cluster_levels(resistance_candidates, candles)
            
            logger.debug(f"üìä –ü–æ—Å–ª–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: support={len(support_clusters)}, resistance={len(resistance_clusters)}")
            self.stats["candidates_clustered"] += (len(support_candidates) - len(support_clusters)) + \
                                                   (len(resistance_candidates) - len(resistance_clusters))
            
            # –®–ê–ì 3: –ü–æ–¥—Å—á–µ—Ç –∫–∞—Å–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
            support_levels = []
            for cluster in support_clusters:
                touches = self._count_touches(cluster, candles, "support")
                cluster.touches = touches
            
            resistance_levels = []
            for cluster in resistance_clusters:
                touches = self._count_touches(cluster, candles, "resistance")
                cluster.touches = touches
            
            # –®–ê–ì 4: –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —É—Ä–æ–≤–Ω–µ–π
            for level in support_clusters:
                strength = self._calculate_level_strength(level, candles)
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
                sr_level = self._create_support_resistance_level(
                    candidate=level,
                    strength=strength,
                    current_price=current_price
                )
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
                if sr_level.touches >= min_touches and sr_level.strength >= min_strength:
                    support_levels.append(sr_level)
            
            for level in resistance_clusters:
                strength = self._calculate_level_strength(level, candles)
                
                sr_level = self._create_support_resistance_level(
                    candidate=level,
                    strength=strength,
                    current_price=current_price
                )
                
                if sr_level.touches >= min_touches and sr_level.strength >= min_strength:
                    resistance_levels.append(sr_level)
            
            # –®–ê–ì 5: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            support_levels = self._filter_overlapping_levels(support_levels)
            resistance_levels = self._filter_overlapping_levels(resistance_levels)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∏–ª–µ –∏ –±–µ—Ä–µ–º —Ç–æ–ø-N
            support_levels.sort(key=lambda l: l.strength, reverse=True)
            resistance_levels.sort(key=lambda l: l.strength, reverse=True)
            
            support_levels = support_levels[:self.max_levels_per_type]
            resistance_levels = resistance_levels[:self.max_levels_per_type]
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏
            all_levels = support_levels + resistance_levels
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_stats(support_levels, resistance_levels)
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_levels)} —É—Ä–æ–≤–Ω–µ–π: "
                       f"support={len(support_levels)}, resistance={len(resistance_levels)}")
            
            return all_levels
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return []
    
    # ==================== –ü–û–ò–°–ö –≠–ö–°–¢–†–ï–ú–£–ú–û–í ====================
    
    def _find_local_minima(self, candles: List) -> List[LevelCandidate]:
        """
        –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤ (—É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏)
        
        –õ–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º = —Å–≤–µ—á–∞, —É –∫–æ—Ç–æ—Ä–æ–π Low –º–µ–Ω—å—à–µ —á–µ–º —É N —Å–≤–µ—á–µ–π —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        """
        candidates = []
        window = self.lookback_window
        
        for i in range(window, len(candles) - window):
            current_candle = candles[i]
            current_low = float(current_candle['low_price'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
            is_local_min = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–µ–≤–æ–µ –æ–∫–Ω–æ
            for j in range(i - window, i):
                if float(candles[j]['low_price']) < current_low:
                    is_local_min = False
                    break
            
            if not is_local_min:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–æ–µ –æ–∫–Ω–æ
            for j in range(i + 1, min(i + window + 1, len(candles))):
                if float(candles[j]['low_price']) < current_low:
                    is_local_min = False
                    break
            
            if is_local_min:
                candidate = LevelCandidate(
                    price=current_low,
                    level_type="support",
                    created_at=current_candle.open_time
                )
                candidates.append(candidate)
                
                logger.debug(f"üîπ –õ–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º: {current_low:.2f} @ {current_candle.open_time.date()}")
        
        return candidates
    
    def _find_local_maxima(self, candles: List) -> List[LevelCandidate]:
        """
        –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∞–∫—Å–∏–º—É–º–æ–≤ (—É—Ä–æ–≤–Ω–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è)
        
        –õ–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º = —Å–≤–µ—á–∞, —É –∫–æ—Ç–æ—Ä–æ–π High –±–æ–ª—å—à–µ —á–µ–º —É N —Å–≤–µ—á–µ–π —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        """
        candidates = []
        window = self.lookback_window
        
        for i in range(window, len(candles) - window):
            current_candle = candles[i]
            current_high = float(current_candle['high_price'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
            is_local_max = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–µ–≤–æ–µ –æ–∫–Ω–æ
            for j in range(i - window, i):
                if float(candles[j]['high_price']) > current_high:
                    is_local_max = False
                    break
            
            if not is_local_max:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–æ–µ –æ–∫–Ω–æ
            for j in range(i + 1, min(i + window + 1, len(candles))):
                if float(candles[j]['high_price']) > current_high:
                    is_local_max = False
                    break
            
            if is_local_max:
                candidate = LevelCandidate(
                    price=current_high,
                    level_type="resistance",
                    created_at=current_candle.open_time
                )
                candidates.append(candidate)
                
                logger.debug(f"üî∏ –õ–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º: {current_high:.2f} @ {current_candle.open_time.date()}")
        
        return candidates
    
    # ==================== –ö–õ–ê–°–¢–ï–†–ò–ó–ê–¶–ò–Ø ====================
    
    def _cluster_levels(self, candidates: List[LevelCandidate], candles: List) -> List[LevelCandidate]:
        """
        –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –±–ª–∏–∑–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        
        –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —É—Ä–æ–≤–Ω–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –±–ª–∏–∑–∫–æ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö tolerance).
        –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞ –≤—ã–±–∏—Ä–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.
        
        Args:
            candidates: –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
            
        Returns:
            –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π –ø–æ—Å–ª–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        """
        if not candidates:
            return []
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
        sorted_candidates = sorted(candidates, key=lambda c: c.price)
        
        clusters = []
        current_cluster = [sorted_candidates[0]]
        
        for i in range(1, len(sorted_candidates)):
            current = sorted_candidates[i]
            prev = current_cluster[-1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
            distance_percent = abs(current.price - prev.price) / prev.price
            
            if distance_percent <= self.cluster_tolerance:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–∏–π –∫–ª–∞—Å—Ç–µ—Ä
                current_cluster.append(current)
            else:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
                clusters.append(current_cluster)
                current_cluster = [current]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∞—Å—Ç–µ—Ä
        if current_cluster:
            clusters.append(current_cluster)
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞ –≤—ã–±–∏—Ä–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        clustered_levels = []
        
        for cluster in clusters:
            if len(cluster) == 1:
                clustered_levels.append(cluster[0])
            else:
                # –í—ã–±–∏—Ä–∞–µ–º –º–µ–¥–∏–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
                cluster_prices = [c.price for c in cluster]
                median_price = sorted(cluster_prices)[len(cluster_prices) // 2]
                
                # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –∫ –º–µ–¥–∏–∞–Ω–µ
                closest = min(cluster, key=lambda c: abs(c.price - median_price))
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è (–≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º–æ–µ —Ä–∞–Ω–Ω–µ–µ)
                earliest_time = min(c.created_at for c in cluster if c.created_at)
                closest.created_at = earliest_time
                
                clustered_levels.append(closest)
                
                logger.debug(f"üìç –ö–ª–∞—Å—Ç–µ—Ä –∏–∑ {len(cluster)} —É—Ä–æ–≤–Ω–µ–π ‚Üí {closest.price:.2f}")
        
        return clustered_levels
    
    # ==================== –ü–û–î–°–ß–ï–¢ –ö–ê–°–ê–ù–ò–ô ====================
    
    def _count_touches(
        self,
        level: LevelCandidate,
        candles: List,
        level_type: str
    ) -> List[datetime]:
        """
        –ü–æ–¥—Å—á–µ—Ç –∫–∞—Å–∞–Ω–∏–π —É—Ä–æ–≤–Ω—è
        
        –ö–∞—Å–∞–Ω–∏–µ = –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ —É—Ä–æ–≤–Ω—é –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö tolerance
        
        Args:
            level: –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            level_type: "support" –∏–ª–∏ "resistance"
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω –∫–∞—Å–∞–Ω–∏–π
        """
        touches = []
        tolerance = level.price * self.touch_tolerance
        
        for candle in candles:
            if level_type == "support":
                # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–º–æ—Ç—Ä–∏–º –Ω–∞ Low
                price = float(candle['low_price'])
            else:
                # –î–ª—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Å–º–æ—Ç—Ä–∏–º –Ω–∞ High
                price = float(candle['high_price'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å–∞–Ω–∏–µ
            distance = abs(price - level.price)
            
            if distance <= tolerance:
                touches.append(candle.open_time)
                logger.debug(f"üëâ –ö–∞—Å–∞–Ω–∏–µ {level_type} {level.price:.2f} @ {candle.open_time.date()}")
        
        return touches
    
    # ==================== –†–ê–°–ß–ï–¢ –°–ò–õ–´ –£–†–û–í–ù–Ø ====================
    
    def _calculate_level_strength(self, level: LevelCandidate, candles: List) -> float:
        """
        –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —É—Ä–æ–≤–Ω—è (0.0 - 1.0)
        
        –§–∞–∫—Ç–æ—Ä—ã —Å–∏–ª—ã:
        1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Å–∞–Ω–∏–π (–±–æ–ª—å—à–µ = —Å–∏–ª—å–Ω–µ–µ)
        2. –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (—á–µ–º –¥–æ–ª—å—à–µ –¥–µ—Ä–∂–∏—Ç—Å—è = —Å–∏–ª—å–Ω–µ–µ)
        3. –ù–µ–¥–∞–≤–Ω–æ—Å—Ç—å –∫–∞—Å–∞–Ω–∏–π (–Ω–µ–¥–∞–≤–Ω–∏–µ = —Å–∏–ª—å–Ω–µ–µ)
        4. –ß–µ—Ç–∫–æ—Å—Ç—å –∫–∞—Å–∞–Ω–∏–π (—Ç–æ—á–Ω—ã–µ –∫–∞—Å–∞–Ω–∏—è = —Å–∏–ª—å–Ω–µ–µ)
        
        Args:
            level: –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            
        Returns:
            –°–∏–ª–∞ —É—Ä–æ–≤–Ω—è (0.0 - 1.0)
        """
        if not level.touches:
            return 0.0
        
        # –ë–∞–∑–æ–≤–∞—è —Å–∏–ª–∞ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Å–∞–Ω–∏–π (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
        # 2 –∫–∞—Å–∞–Ω–∏—è = 0.3, 3 = 0.5, 5 = 0.7, 10+ = 1.0
        touch_score = min(level.touch_count / 10.0, 1.0)
        
        # –ë–æ–Ω—É—Å –∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞—Å–∞–Ω–∏—è
        if level.touch_count >= 5:
            touch_score = min(touch_score + 0.2, 1.0)
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (—á–µ–º –¥–æ–ª—å—à–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å = —Å–∏–ª—å–Ω–µ–µ)
        if len(level.touches) >= 2:
            first_touch = level.touches[0]
            last_touch = level.touches[-1]
            time_span_days = (last_touch - first_touch).days
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º: 7 –¥–Ω–µ–π = 0.1, 30 –¥–Ω–µ–π = 0.5, 90+ –¥–Ω–µ–π = 1.0
            time_score = min(time_span_days / 90.0, 1.0) * 0.3
        else:
            time_score = 0.0
        
        # –ù–µ–¥–∞–≤–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞—Å–∞–Ω–∏—è
        if level.touches:
            days_since_last = (datetime.now(timezone.utc) - level.touches[-1]).days
            
            # –ù–µ–¥–∞–≤–Ω–∏–µ –∫–∞—Å–∞–Ω–∏—è —Ü–µ–Ω–Ω–µ–µ: <7 –¥–Ω–µ–π = 0.2, <30 –¥–Ω–µ–π = 0.1, >30 –¥–Ω–µ–π = 0
            if days_since_last < 7:
                recency_score = 0.2
            elif days_since_last < 30:
                recency_score = 0.1
            else:
                recency_score = 0.0
        else:
            recency_score = 0.0
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å–∏–ª–∞
        total_strength = touch_score * 0.6 + time_score + recency_score
        total_strength = max(0.0, min(1.0, total_strength))
        
        logger.debug(f"üí™ –°–∏–ª–∞ —É—Ä–æ–≤–Ω—è {level.price:.2f}: {total_strength:.2f} "
                    f"(touches={touch_score:.2f}, time={time_score:.2f}, recency={recency_score:.2f})")
        
        return total_strength
    
    # ==================== –°–û–ó–î–ê–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–û–ì–û –£–†–û–í–ù–Ø ====================
    
    def _create_support_resistance_level(
        self,
        candidate: LevelCandidate,
        strength: float,
        current_price: float
    ) -> SupportResistanceLevel:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ SupportResistanceLevel –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        
        Args:
            candidate: –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å
            strength: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å–∏–ª–∞
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            –§–∏–Ω–∞–ª—å–Ω—ã–π SupportResistanceLevel
        """
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        distance_percent = abs(candidate.price - current_price) / current_price * 100
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            "touches_dates": [t.isoformat() for t in candidate.touches] if candidate.touches else [],
            "first_touch": candidate.touches[0].isoformat() if candidate.touches else None,
            "time_span_days": (candidate.touches[-1] - candidate.touches[0]).days if len(candidate.touches) >= 2 else 0
        }
        
        level = SupportResistanceLevel(
            price=candidate.price,
            level_type=candidate.level_type,
            strength=strength,
            touches=candidate.touch_count,
            last_touch=candidate.last_touch,
            created_at=candidate.created_at,
            distance_from_current=distance_percent,
            metadata=metadata
        )
        
        return level
    
    # ==================== –§–ò–õ–¨–¢–†–ê–¶–ò–Ø ====================
    
    def _filter_overlapping_levels(self, levels: List[SupportResistanceLevel]) -> List[SupportResistanceLevel]:
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        
        –ï—Å–ª–∏ –¥–≤–∞ —É—Ä–æ–≤–Ω—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ - –æ—Å—Ç–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã–π
        
        Args:
            levels: –°–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π
            
        Returns:
            –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        """
        if len(levels) <= 1:
            return levels
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
        sorted_levels = sorted(levels, key=lambda l: l.price)
        
        filtered = [sorted_levels[0]]
        
        for level in sorted_levels[1:]:
            prev = filtered[-1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            distance_percent = abs(level.price - prev.price) / prev.price
            
            if distance_percent < self.min_level_distance:
                # –°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ - –≤—ã–±–∏—Ä–∞–µ–º –±–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã–π
                if level.strength > prev.strength:
                    filtered[-1] = level
                    logger.debug(f"üîÑ –ó–∞–º–µ–Ω–µ–Ω –±–ª–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: {prev.price:.2f} ‚Üí {level.price:.2f}")
            else:
                filtered.append(level)
        
        return filtered
    
    # ==================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================
    
    def find_nearest_support(
        self,
        candles: List,
        current_price: float,
        max_distance_percent: float = 5.0
    ) -> Optional[SupportResistanceLevel]:
        """
        –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            max_distance_percent: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ %
            
        Returns:
            –ë–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ None
        """
        all_levels = self.find_all_levels(candles, current_price=current_price)
        
        supports = [
            level for level in all_levels
            if level.level_type == "support" and level.price < current_price
        ]
        
        if not supports:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        supports.sort(key=lambda l: abs(l.price - current_price))
        
        nearest = supports[0]
        
        if nearest.distance_from_current <= max_distance_percent:
            return nearest
        
        return None
    
    def find_nearest_resistance(
        self,
        candles: List,
        current_price: float,
        max_distance_percent: float = 5.0
    ) -> Optional[SupportResistanceLevel]:
        """
        –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            max_distance_percent: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ %
            
        Returns:
            –ë–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∏–ª–∏ None
        """
        all_levels = self.find_all_levels(candles, current_price=current_price)
        
        resistances = [
            level for level in all_levels
            if level.level_type == "resistance" and level.price > current_price
        ]
        
        if not resistances:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        resistances.sort(key=lambda l: abs(l.price - current_price))
        
        nearest = resistances[0]
        
        if nearest.distance_from_current <= max_distance_percent:
            return nearest
        
        return None
    
    def find_strong_levels(
        self,
        candles: List,
        min_strength: float = 0.7
    ) -> List[SupportResistanceLevel]:
        """
        –ù–∞–π—Ç–∏ –≤—Å–µ —Å–∏–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ (strength >= min_strength)
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            min_strength: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ (0.7 = strong)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–∏–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
        """
        all_levels = self.find_all_levels(candles)
        strong = [level for level in all_levels if level.strength >= min_strength]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∏–ª–µ
        strong.sort(key=lambda l: l.strength, reverse=True)
        
        return strong
    
    # ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================
    
    def _update_stats(self, support_levels: List, resistance_levels: List):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        total = len(support_levels) + len(resistance_levels)
        
        self.stats["total_levels_found"] += total
        self.stats["support_levels_found"] += len(support_levels)
        self.stats["resistance_levels_found"] += len(resistance_levels)
        
        # –°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ —É—Ä–æ–≤–Ω–µ–π
        if total > 0:
            all_levels = support_levels + resistance_levels
            avg_strength = sum(l.strength for l in all_levels) / total
            
            # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
            count = self.stats["analyses_count"]
            prev_avg = self.stats["average_level_strength"]
            self.stats["average_level_strength"] = (prev_avg * (count - 1) + avg_strength) / count
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
            strong_count = sum(1 for l in all_levels if l.is_strong)
            self.stats["strong_levels_count"] += strong_count
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        return {
            **self.stats,
            "config": {
                "min_touches": self.min_touches,
                "min_strength": self.min_strength,
                "touch_tolerance_percent": self.touch_tolerance * 100,
                "cluster_tolerance_percent": self.cluster_tolerance * 100,
                "lookback_window": self.lookback_window,
                "max_levels_per_type": self.max_levels_per_type
            }
        }
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats = {
            "analyses_count": 0,
            "total_levels_found": 0,
            "support_levels_found": 0,
            "resistance_levels_found": 0,
            "average_level_strength": 0.0,
            "strong_levels_count": 0,
            "candidates_clustered": 0
        }
        logger.info("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ LevelAnalyzer —Å–±—Ä–æ—à–µ–Ω–∞")
    
    def __repr__(self) -> str:
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return (f"LevelAnalyzer(analyses={self.stats['analyses_count']}, "
                f"total_levels={self.stats['total_levels_found']}, "
                f"avg_strength={self.stats['average_level_strength']:.2f})")
    
    def __str__(self) -> str:
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
        stats = self.get_stats()
        return (f"Level Analyzer:\n"
                f"  Analyses: {stats['analyses_count']}\n"
                f"  Total levels found: {stats['total_levels_found']}\n"
                f"  Support levels: {stats['support_levels_found']}\n"
                f"  Resistance levels: {stats['resistance_levels_found']}\n"
                f"  Average strength: {stats['average_level_strength']:.2f}\n"
                f"  Strong levels: {stats['strong_levels_count']}\n"
                f"  Config: touches‚â•{self.min_touches}, strength‚â•{self.min_strength}")


# Export
__all__ = ["LevelAnalyzer", "LevelCandidate"]

logger.info("‚úÖ Level Analyzer module loaded")
