"""
Pattern Detector - –î–µ—Ç–µ–∫—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:
1. –ë–°–£ (–ë–∞—Ä –°–æ–∑–¥–∞–≤—à–∏–π –£—Ä–æ–≤–µ–Ω—å) - –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –±–∞—Ä, —Å–æ–∑–¥–∞–≤—à–∏–π —É—Ä–æ–≤–µ–Ω—å
2. –ë–ü–£ (–ë–∞—Ä –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏–π –£—Ä–æ–≤–µ–Ω—å) - –∫–∞—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è "—Ç–æ—á–∫–∞ –≤ —Ç–æ—á–∫—É"
3. –ü—É—á–∫–∏ —Å–≤–µ—á–µ–π - –≥—Ä—É–ø–ø–∞ —Å–≤–µ—á–µ–π —Å –±–ª–∏–∑–∫–∏–º–∏ High/Low
4. –ü–æ–¥–∂–∞—Ç–∏–µ - –º–∞–ª–µ–Ω—å–∫–∏–µ –±–∞—Ä—ã —É —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–±–æ–µ–º
5. –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è - –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –±–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
6. V-—Ñ–æ—Ä–º–∞—Ü–∏—è - —Ä–µ–∑–∫–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç –±–µ–∑ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏

Author: Trading Bot Team
Version: 1.0.0
"""

import logging
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime, timedelta, timezone
from dataclasses import dataclass, field
from statistics import mean, stdev

from .context import SupportResistanceLevel

logger = logging.getLogger(__name__)


@dataclass
class PatternMatch:
    """
    –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    
    Attributes:
        pattern_type: –¢–∏–ø –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        confidence: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (0.0-1.0)
        candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–µ
        metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        detected_at: –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
    """
    pattern_type: str
    confidence: float
    candles: List = field(default_factory=list)
    metadata: Dict[str, Any] = field(default_factory=dict)
    detected_at: datetime = field(default_factory=lambda: datetime.now(timezone.utc))
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            "pattern_type": self.pattern_type,
            "confidence": self.confidence,
            "candles_count": len(self.candles),
            "metadata": self.metadata,
            "detected_at": self.detected_at.isoformat()
        }


@dataclass
class BSUPattern:
    """
    –ë–°–£ - –ë–∞—Ä –°–æ–∑–¥–∞–≤—à–∏–π –£—Ä–æ–≤–µ–Ω—å
    
    –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –±–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
    """
    candle: Any  # MarketDataCandle
    level_price: float
    level_type: str  # "support" –∏–ª–∏ "resistance"
    created_at: datetime
    is_strong: bool = False
    
    @property
    def age_days(self) -> int:
        """–í–æ–∑—Ä–∞—Å—Ç –ë–°–£ –≤ –¥–Ω—è—Ö"""
        return (datetime.now(timezone.utc) - self.created_at).days


@dataclass
class BPUPattern:
    """
    –ë–ü–£ - –ë–∞—Ä –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏–π –£—Ä–æ–≤–µ–Ω—å
    
    –ö–∞—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è "—Ç–æ—á–∫–∞ –≤ —Ç–æ—á–∫—É" –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ë–°–£
    """
    candle: Any
    level_price: float
    level_type: str
    touch_accuracy: float  # –¢–æ—á–Ω–æ—Å—Ç—å –∫–∞—Å–∞–Ω–∏—è (0.0-1.0)
    is_bpu1: bool = False  # –ü–µ—Ä–≤–æ–µ –∫–∞—Å–∞–Ω–∏–µ
    is_bpu2: bool = False  # –í—Ç–æ—Ä–æ–µ –∫–∞—Å–∞–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—á–∫–æ–º —Å –ë–ü–£-1)
    forms_cluster_with: Optional['BPUPattern'] = None


class PatternDetector:
    """
    üîç –î–µ—Ç–µ–∫—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–µ—á–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:
    - –ë–°–£/–ë–ü–£ –º–æ–¥–µ–ª—å –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Ç–±–æ—è
    - –ü–æ–¥–∂–∞—Ç–∏–µ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–±–æ—è
    - –ü—É—á–∫–∏, –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è, V-—Ñ–æ—Ä–º–∞—Ü–∏–∏
    
    Usage:
        detector = PatternDetector()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∂–∞—Ç–∏—è
        has_compression = detector.detect_compression(candles_m5, level)
        
        # –ü–æ–∏—Å–∫ –ë–°–£-–ë–ü–£
        bsu = detector.find_bsu(candles_d1, level)
        bpu_patterns = detector.find_bpu(candles_m30, bsu)
    """
    
    def __init__(
        self,
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∂–∞—Ç–∏—è
        compression_bar_threshold: float = 0.3,  # –ë–∞—Ä < 30% –æ—Ç ATR = –º–∞–ª–µ–Ω—å–∫–∏–π
        compression_min_bars: int = 3,           # –ú–∏–Ω–∏–º—É–º –±–∞—Ä–æ–≤ –¥–ª—è –ø–æ–¥–∂–∞—Ç–∏—è
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—É—á–∫–∞
        cluster_tolerance_percent: float = 0.5,  # –î–æ–ø—É—Å–∫ –¥–ª—è –ø—É—á–∫–∞ (0.5%)
        cluster_min_bars: int = 2,               # –ú–∏–Ω–∏–º—É–º –±–∞—Ä–æ–≤ –≤ –ø—É—á–∫–µ
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–ü–£
        bpu_touch_tolerance_percent: float = 0.2,  # –î–æ–ø—É—Å–∫ –∫–∞—Å–∞–Ω–∏—è –ë–ü–£ (0.2%)
        bpu_max_gap_percent: float = 0.3,        # –ú–∞–∫—Å –ª—é—Ñ—Ç –¥–ª—è –ë–ü–£-2
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
        consolidation_min_bars: int = 10,        # –ú–∏–Ω–∏–º—É–º –±–∞—Ä–æ–≤
        consolidation_max_range_percent: float = 2.0,  # –ú–∞–∫—Å –¥–∏–∞–ø–∞–∑–æ–Ω 2%
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã V-—Ñ–æ—Ä–º–∞—Ü–∏–∏
        v_formation_min_move_percent: float = 3.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ 3%
        v_formation_max_correction_percent: float = 30.0,  # –ú–∞–∫—Å –æ—Ç–∫–∞—Ç 30%
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        
        Args:
            compression_bar_threshold: –ü–æ—Ä–æ–≥ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –±–∞—Ä–∞ –¥–ª—è –ø–æ–¥–∂–∞—Ç–∏—è
            compression_min_bars: –ú–∏–Ω–∏–º—É–º –±–∞—Ä–æ–≤ –¥–ª—è –ø–æ–¥–∂–∞—Ç–∏—è
            cluster_tolerance_percent: –î–æ–ø—É—Å–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—á–∫–∞
            cluster_min_bars: –ú–∏–Ω–∏–º—É–º –±–∞—Ä–æ–≤ –≤ –ø—É—á–∫–µ
            bpu_touch_tolerance_percent: –î–æ–ø—É—Å–∫ –∫–∞—Å–∞–Ω–∏—è –¥–ª—è –ë–ü–£
            bpu_max_gap_percent: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª—é—Ñ—Ç –¥–ª—è –ë–ü–£-2
            consolidation_min_bars: –ú–∏–Ω–∏–º—É–º –±–∞—Ä–æ–≤ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
            consolidation_max_range_percent: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
            v_formation_min_move_percent: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–ª—è V-—Ñ–æ—Ä–º–∞—Ü–∏–∏
            v_formation_max_correction_percent: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–∫–∞—Ç V-—Ñ–æ—Ä–º–∞—Ü–∏–∏
        """
        self.compression_threshold = compression_bar_threshold
        self.compression_min_bars = compression_min_bars
        
        self.cluster_tolerance = cluster_tolerance_percent / 100.0
        self.cluster_min_bars = cluster_min_bars
        
        self.bpu_touch_tolerance = bpu_touch_tolerance_percent / 100.0
        self.bpu_max_gap = bpu_max_gap_percent / 100.0
        
        self.consolidation_min_bars = consolidation_min_bars
        self.consolidation_max_range = consolidation_max_range_percent / 100.0
        
        self.v_min_move = v_formation_min_move_percent / 100.0
        self.v_max_correction = v_formation_max_correction_percent / 100.0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "compressions_detected": 0,
            "clusters_detected": 0,
            "bsu_found": 0,
            "bpu_found": 0,
            "consolidations_detected": 0,
            "v_formations_detected": 0,
            "total_patterns": 0
        }
        
        logger.info("üîç PatternDetector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   ‚Ä¢ Compression threshold: {compression_bar_threshold}")
        logger.info(f"   ‚Ä¢ Cluster tolerance: {cluster_tolerance_percent}%")
        logger.info(f"   ‚Ä¢ BPU touch tolerance: {bpu_touch_tolerance_percent}%")
    
    # ==================== –ü–û–î–ñ–ê–¢–ò–ï ====================
    
    def detect_compression(
        self,
        candles: List,
        level: Optional[SupportResistanceLevel] = None,
        atr: Optional[float] = None,
        lookback: int = 20
    ) -> Tuple[bool, Dict[str, Any]]:
        """
        –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–∂–∞—Ç–∏—è (compression) - –º–∞–ª–µ–Ω—å–∫–∏–µ –±–∞—Ä—ã —É —É—Ä–æ–≤–Ω—è
        
        –ü–æ–¥–∂–∞—Ç–∏–µ = —Å–µ—Ä–∏—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Å–≤–µ—á–µ–π (< 30% ATR) –ø–µ—Ä–µ–¥ –ø—Ä–æ–±–æ–µ–º —É—Ä–æ–≤–Ω—è
        
        –£—Å–ª–æ–≤–∏—è:
        1. –ú–∏–Ω–∏–º—É–º 3+ –º–∞–ª–µ–Ω—å–∫–∏—Ö –±–∞—Ä–∞ –ø–æ–¥—Ä—è–¥
        2. –†–∞–∑–º–µ—Ä –±–∞—Ä–∞ < 30% –æ—Ç ATR
        3. –ë–∞—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –±–ª–∏–∑–∫–æ –∫ —É—Ä–æ–≤–Ω—é
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π (M5, M30, H1)
            level: –£—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–∏–∑–æ—Å—Ç–∏
            atr: ATR –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –±–∞—Ä–æ–≤
            lookback: –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            
        Returns:
            Tuple[has_compression, details]
        """
        try:
            if not candles or len(candles) < self.compression_min_bars:
                return False, {}
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π
            recent_candles = candles[-lookback:] if len(candles) > lookback else candles
            
            # –ï—Å–ª–∏ –Ω–µ—Ç ATR - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
            if atr is None:
                ranges = [float(c.high_price - c.low_price) for c in recent_candles]
                atr = mean(ranges) if ranges else 0
            
            if atr <= 0:
                return False, {}
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞–ª–µ–Ω—å–∫–∏—Ö –±–∞—Ä–æ–≤
            small_bars_streak = 0
            max_streak = 0
            small_bars_indices = []
            
            for i, candle in enumerate(recent_candles):
                bar_range = float(candle.high_price - candle.low_price)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∞—Ä –º–∞–ª–µ–Ω—å–∫–∏–π
                if bar_range < (atr * self.compression_threshold):
                    small_bars_streak += 1
                    small_bars_indices.append(i)
                    max_streak = max(max_streak, small_bars_streak)
                else:
                    small_bars_streak = 0
            
            has_compression = max_streak >= self.compression_min_bars
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –±–∞—Ä—ã —É —É—Ä–æ–≤–Ω—è
            near_level = False
            if level and has_compression:
                last_candles = recent_candles[-self.compression_min_bars:]
                prices = [float(c.close_price) for c in last_candles]
                avg_price = mean(prices)
                
                distance_percent = abs(avg_price - level.price) / level.price
                near_level = distance_percent < 0.01  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 1%
            
            details = {
                "max_streak": max_streak,
                "small_bars_count": len(small_bars_indices),
                "near_level": near_level,
                "atr": atr,
                "threshold_used": atr * self.compression_threshold
            }
            
            if has_compression:
                self.stats["compressions_detected"] += 1
                self.stats["total_patterns"] += 1
                logger.info(f"‚úÖ –ü–æ–¥–∂–∞—Ç–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {max_streak} –º–∞–ª–µ–Ω—å–∫–∏—Ö –±–∞—Ä–æ–≤ (ATR={atr:.2f})")
            
            return has_compression, details
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ–¥–∂–∞—Ç–∏—è: {e}")
            return False, {}
    
    # ==================== –ü–£–ß–ö–ò ====================
    
    def detect_cluster(
        self,
        candles: List,
        lookback: int = 10
    ) -> Tuple[bool, Dict[str, Any]]:
        """
        –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—É—á–∫–∞ —Å–≤–µ—á–µ–π - –≥—Ä—É–ø–ø–∞ –±–∞—Ä–æ–≤ —Å –±–ª–∏–∑–∫–∏–º–∏ High/Low
        
        –ü—É—á–æ–∫ = —Å–≤–µ—á–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö High –∏ Low –Ω–∞—Ö–æ–¥—è—Ç—Å—è –±–ª–∏–∑–∫–æ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            lookback: –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            
        Returns:
            Tuple[has_cluster, details]
        """
        try:
            if not candles or len(candles) < self.cluster_min_bars:
                return False, {}
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π
            recent_candles = candles[-lookback:] if len(candles) > lookback else candles
            
            if len(recent_candles) < self.cluster_min_bars:
                return False, {}
            
            # –°–æ–±–∏—Ä–∞–µ–º High –∏ Low
            highs = [float(c.high_price) for c in recent_candles]
            lows = [float(c.low_price) for c in recent_candles]
            
            # –î–∏–∞–ø–∞–∑–æ–Ω High
            max_high = max(highs)
            min_high = min(highs)
            high_range_percent = (max_high - min_high) / min_high
            
            # –î–∏–∞–ø–∞–∑–æ–Ω Low
            max_low = max(lows)
            min_low = min(lows)
            low_range_percent = (max_low - min_low) / min_low
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ High –∏ Low —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã
            has_cluster = (
                high_range_percent <= self.cluster_tolerance and
                low_range_percent <= self.cluster_tolerance
            )
            
            details = {
                "high_range_percent": high_range_percent * 100,
                "low_range_percent": low_range_percent * 100,
                "max_high": max_high,
                "min_high": min_high,
                "max_low": max_low,
                "min_low": min_low,
                "candles_in_cluster": len(recent_candles)
            }
            
            if has_cluster:
                self.stats["clusters_detected"] += 1
                self.stats["total_patterns"] += 1
                logger.info(f"‚úÖ –ü—É—á–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {len(recent_candles)} —Å–≤–µ—á–µ–π "
                          f"(High: {high_range_percent*100:.2f}%, Low: {low_range_percent*100:.2f}%)")
            
            return has_cluster, details
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø—É—á–∫–∞: {e}")
            return False, {}
    
    # ==================== –ë–°–£ (–ë–ê–† –°–û–ó–î–ê–í–®–ò–ô –£–†–û–í–ï–ù–¨) ====================
    
    def find_bsu(
        self,
        candles: List,
        level: SupportResistanceLevel,
        max_age_days: int = 180
    ) -> Optional[BSUPattern]:
        """
        –ù–∞–π—Ç–∏ –ë–°–£ (–ë–∞—Ä –°–æ–∑–¥–∞–≤—à–∏–π –£—Ä–æ–≤–µ–Ω—å)
        
        –ë–°–£ = –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –±–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª —É—Ä–æ–≤–µ–Ω—å (–ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å—Ç—Ä–µ–º—É–º)
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π D1
            level: –£—Ä–æ–≤–µ–Ω—å –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∏—â–µ–º –ë–°–£
            max_age_days: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ë–°–£
            
        Returns:
            BSUPattern –∏–ª–∏ None
        """
        try:
            if not candles or not level:
                return None
            
            # –î–æ–ø—É—Å–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ë–°–£
            tolerance = level.price * 0.005  # 0.5%
            
            # –ò—â–µ–º —Å–≤–µ—á—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–ª–∞ —É—Ä–æ–≤–µ–Ω—å
            for candle in candles:
                if level.level_type == "support":
                    # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–º–æ—Ç—Ä–∏–º –Ω–∞ Low
                    candle_price = float(candle.low_price)
                else:
                    # –î–ª—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Å–º–æ—Ç—Ä–∏–º –Ω–∞ High
                    candle_price = float(candle.high_price)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —É—Ä–æ–≤–Ω–µ–º
                if abs(candle_price - level.price) <= tolerance:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
                    age_days = (datetime.now(timezone.utc) - candle.open_time).days
                    
                    if age_days <= max_age_days:
                        bsu = BSUPattern(
                            candle=candle,
                            level_price=level.price,
                            level_type=level.level_type,
                            created_at=candle.open_time,
                            is_strong=level.is_strong
                        )
                        
                        self.stats["bsu_found"] += 1
                        self.stats["total_patterns"] += 1
                        
                        logger.info(f"‚úÖ –ë–°–£ –Ω–∞–π–¥–µ–Ω: {level.level_type} @ {level.price:.2f}, "
                                  f"age={age_days} –¥–Ω–µ–π")
                        
                        return bsu
            
            logger.debug(f"‚ö†Ô∏è –ë–°–£ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É—Ä–æ–≤–Ω—è {level.price:.2f}")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ë–°–£: {e}")
            return None
    
    # ==================== –ë–ü–£ (–ë–ê–† –ü–û–î–¢–í–ï–†–î–ò–í–®–ò–ô –£–†–û–í–ï–ù–¨) ====================
    
    def find_bpu(
        self,
        candles: List,
        level: SupportResistanceLevel,
        lookback: int = 50
    ) -> List[BPUPattern]:
        """
        –ù–∞–π—Ç–∏ –ë–ü–£ (–ë–∞—Ä –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏–π –£—Ä–æ–≤–µ–Ω—å)
        
        –ë–ü–£ = –∫–∞—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è "—Ç–æ—á–∫–∞ –≤ —Ç–æ—á–∫—É" –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ë–°–£
        –ë–ü–£-1 = –ø–µ—Ä–≤–æ–µ –∫–∞—Å–∞–Ω–∏–µ
        –ë–ü–£-2 = –≤—Ç–æ—Ä–æ–µ –∫–∞—Å–∞–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—á–∫–æ–º —Å –ë–ü–£-1
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π (M30, H1)
            level: –£—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            lookback: –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ë–ü–£
        """
        try:
            if not candles or not level:
                return []
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π
            recent_candles = candles[-lookback:] if len(candles) > lookback else candles
            
            if len(recent_candles) < 2:
                return []
            
            # –î–æ–ø—É—Å–∫ –¥–ª—è –∫–∞—Å–∞–Ω–∏—è
            tolerance = level.price * self.bpu_touch_tolerance
            
            bpu_list = []
            
            for i, candle in enumerate(recent_candles):
                if level.level_type == "support":
                    # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–º–æ—Ç—Ä–∏–º –Ω–∞ Low
                    candle_price = float(candle.low_price)
                else:
                    # –î–ª—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Å–º–æ—Ç—Ä–∏–º –Ω–∞ High
                    candle_price = float(candle.high_price)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å–∞–Ω–∏–µ
                distance = abs(candle_price - level.price)
                
                if distance <= tolerance:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –∫–∞—Å–∞–Ω–∏—è
                    touch_accuracy = 1.0 - (distance / tolerance)
                    
                    bpu = BPUPattern(
                        candle=candle,
                        level_price=level.price,
                        level_type=level.level_type,
                        touch_accuracy=touch_accuracy
                    )
                    
                    bpu_list.append(bpu)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ë–ü–£-1 –∏ –ë–ü–£-2
            if len(bpu_list) >= 1:
                bpu_list[0].is_bpu1 = True
            
            if len(bpu_list) >= 2:
                bpu_list[1].is_bpu2 = True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ë–ü–£-2 —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—É—á–æ–∫ —Å –ë–ü–£-1
                forms_cluster = self._check_bpu_cluster(bpu_list[0], bpu_list[1])
                
                if forms_cluster:
                    bpu_list[1].forms_cluster_with = bpu_list[0]
                    logger.info(f"‚úÖ –ë–ü–£-2 —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—É—á–æ–∫ —Å –ë–ü–£-1")
            
            if bpu_list:
                self.stats["bpu_found"] += len(bpu_list)
                self.stats["total_patterns"] += len(bpu_list)
                
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(bpu_list)} –ë–ü–£ –¥–ª—è —É—Ä–æ–≤–Ω—è {level.price:.2f}")
            
            return bpu_list
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ë–ü–£: {e}")
            return []
    
    def _check_bpu_cluster(self, bpu1: BPUPattern, bpu2: BPUPattern) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ë–ü–£-2 —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—É—á–æ–∫ —Å –ë–ü–£-1
        
        –ü—É—á–æ–∫ = High –∏ Low –æ–±–æ–∏—Ö –±–∞—Ä–æ–≤ –±–ª–∏–∑–∫–∏ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å–∫–∞)
        
        Args:
            bpu1: –ü–µ—Ä–≤—ã–π –ë–ü–£
            bpu2: –í—Ç–æ—Ä–æ–π –ë–ü–£
            
        Returns:
            True –µ—Å–ª–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç –ø—É—á–æ–∫
        """
        try:
            candle1 = bpu1.candle
            candle2 = bpu2.candle
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º High
            high1 = float(candle1.high_price)
            high2 = float(candle2.high_price)
            high_diff_percent = abs(high1 - high2) / high1
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º Low
            low1 = float(candle1.low_price)
            low2 = float(candle2.low_price)
            low_diff_percent = abs(low1 - low2) / low1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å–∫–∞
            # –ë–ü–£-2 –º–æ–∂–µ—Ç –Ω–µ –¥–æ–±–∏–≤–∞—Ç—å –Ω–∞ –ª—é—Ñ—Ç (–¥–æ 0.3%)
            forms_cluster = (
                high_diff_percent <= self.bpu_max_gap and
                low_diff_percent <= self.bpu_max_gap
            )
            
            logger.debug(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—á–∫–∞ –ë–ü–£: high_diff={high_diff_percent*100:.2f}%, "
                        f"low_diff={low_diff_percent*100:.2f}%, cluster={forms_cluster}")
            
            return forms_cluster
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É—á–∫–∞ –ë–ü–£: {e}")
            return False
    
    # ==================== –ö–û–ù–°–û–õ–ò–î–ê–¶–ò–Ø ====================
    
    def detect_consolidation(
        self,
        candles: List,
        lookback: int = 20
    ) -> Tuple[bool, Dict[str, Any]]:
        """
        –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ - –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –±–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        
        –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è = —Ü–µ–Ω–∞ –¥–≤–∏–∂–µ—Ç—Å—è –≤ —É–∑–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        
        –£—Å–ª–æ–≤–∏—è:
        1. –ú–∏–Ω–∏–º—É–º 10+ –±–∞—Ä–æ–≤
        2. –î–∏–∞–ø–∞–∑–æ–Ω –¥–≤–∏–∂–µ–Ω–∏—è < 2% –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
        3. –ù–µ—Ç —è–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π (H1, D1)
            lookback: –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            
        Returns:
            Tuple[has_consolidation, details]
        """
        try:
            if not candles or len(candles) < self.consolidation_min_bars:
                return False, {}
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π
            recent_candles = candles[-lookback:] if len(candles) > lookback else candles
            
            if len(recent_candles) < self.consolidation_min_bars:
                return False, {}
            
            # –°–æ–±–∏—Ä–∞–µ–º High –∏ Low
            highs = [float(c.high_price) for c in recent_candles]
            lows = [float(c.low_price) for c in recent_candles]
            
            max_high = max(highs)
            min_low = min(lows)
            
            # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
            closes = [float(c.close_price) for c in recent_candles]
            avg_close = mean(closes)
            
            # –î–∏–∞–ø–∞–∑–æ–Ω –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
            consolidation_range = max_high - min_low
            range_percent = consolidation_range / avg_close
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
            has_consolidation = (
                len(recent_candles) >= self.consolidation_min_bars and
                range_percent <= self.consolidation_max_range
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–µ—Ç —è–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
            if has_consolidation:
                first_half = closes[:len(closes)//2]
                second_half = closes[len(closes)//2:]
                
                avg_first = mean(first_half)
                avg_second = mean(second_half)
                
                trend_percent = abs(avg_second - avg_first) / avg_first
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ (>1.5%) - —ç—Ç–æ –Ω–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è
                if trend_percent > 0.015:
                    has_consolidation = False
            
            details = {
                "bars_count": len(recent_candles),
                "range_percent": range_percent * 100,
                "max_high": max_high,
                "min_low": min_low,
                "avg_close": avg_close
            }
            
            if has_consolidation:
                self.stats["consolidations_detected"] += 1
                self.stats["total_patterns"] += 1
                
                logger.info(f"‚úÖ –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: {len(recent_candles)} –±–∞—Ä–æ–≤, "
                          f"–¥–∏–∞–ø–∞–∑–æ–Ω {range_percent*100:.2f}%")
            
            return has_consolidation, details
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False, {}
    
    # ==================== V-–§–û–†–ú–ê–¶–ò–Ø ====================
    
    def detect_v_formation(
        self,
        candles: List,
        lookback: int = 10
    ) -> Tuple[bool, Dict[str, Any]]:
        """
        –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ V-—Ñ–æ—Ä–º–∞—Ü–∏–∏ - —Ä–µ–∑–∫–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç –±–µ–∑ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
        
        V-—Ñ–æ—Ä–º–∞—Ü–∏—è = –±—ã—Å—Ç—Ä–æ–µ –ø–∞–¥–µ–Ω–∏–µ/—Ä–æ—Å—Ç —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∑–∫–∏–º —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–º
        
        –£—Å–ª–æ–≤–∏—è:
        1. –°–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É (>3%)
        2. –†–µ–∑–∫–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç –±–µ–∑ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
        3. –î–≤–∏–∂–µ–Ω–∏–µ –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É (>70% –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è)
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π (M30, H1)
            lookback: –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            
        Returns:
            Tuple[has_v_formation, details]
        """
        try:
            if not candles or len(candles) < 5:
                return False, {}
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π
            recent_candles = candles[-lookback:] if len(candles) > lookback else candles
            
            if len(recent_candles) < 5:
                return False, {}
            
            closes = [float(c.close_price) for c in recent_candles]
            
            # –ò—â–µ–º —ç–∫—Å—Ç—Ä–µ–º—É–º (–¥–Ω–æ –∏–ª–∏ –≤–µ—Ä—à–∏–Ω—É V)
            highs = [float(c.high_price) for c in recent_candles]
            lows = [float(c.low_price) for c in recent_candles]
            
            max_high = max(highs)
            min_low = min(lows)
            max_high_idx = highs.index(max_high)
            min_low_idx = lows.index(min_low)
            
            has_v_formation = False
            v_type = None
            details = {}
            
            # V-—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–Ω–∏–∑-–≤–≤–µ—Ä—Ö (–¥–Ω–æ)
            if min_low_idx > 0 and min_low_idx < len(recent_candles) - 2:
                # –î–≤–∏–∂–µ–Ω–∏–µ –¥–æ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞
                before = closes[:min_low_idx+1]
                # –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞
                after = closes[min_low_idx:]
                
                if before and after:
                    down_move_percent = (before[0] - min_low) / before[0]
                    up_move_percent = (after[-1] - min_low) / min_low
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è V-—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    if (down_move_percent >= self.v_min_move and
                        up_move_percent >= self.v_min_move * 0.7):
                        
                        has_v_formation = True
                        v_type = "bullish_v"
                        
                        details = {
                            "v_type": v_type,
                            "down_move_percent": down_move_percent * 100,
                            "up_move_percent": up_move_percent * 100,
                            "bottom_price": min_low,
                            "bottom_index": min_low_idx
                        }
            
            # V-—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–≤–µ—Ä—Ö-–≤–Ω–∏–∑ (–≤–µ—Ä—à–∏–Ω–∞)
            if not has_v_formation and max_high_idx > 0 and max_high_idx < len(recent_candles) - 2:
                # –î–≤–∏–∂–µ–Ω–∏–µ –¥–æ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞
                before = closes[:max_high_idx+1]
                # –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞
                after = closes[max_high_idx:]
                
                if before and after:
                    up_move_percent = (max_high - before[0]) / before[0]
                    down_move_percent = (max_high - after[-1]) / max_high
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è V-—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    if (up_move_percent >= self.v_min_move and
                        down_move_percent >= self.v_min_move * 0.7):
                        
                        has_v_formation = True
                        v_type = "bearish_v"
                        
                        details = {
                            "v_type": v_type,
                            "up_move_percent": up_move_percent * 100,
                            "down_move_percent": down_move_percent * 100,
                            "top_price": max_high,
                            "top_index": max_high_idx
                        }
            
            if has_v_formation:
                self.stats["v_formations_detected"] += 1
                self.stats["total_patterns"] += 1
                
                logger.info(f"‚úÖ V-—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: {v_type}")
            
            return has_v_formation, details
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ V-—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return False, {}
    
    # ==================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò ====================
    
    def check_close_near_level(
        self,
        candle: Any,
        level: SupportResistanceLevel,
        tolerance_percent: float = 0.5
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å –≤–±–ª–∏–∑–∏ —É—Ä–æ–≤–Ω—è
        
        Args:
            candle: –°–≤–µ—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            level: –£—Ä–æ–≤–µ–Ω—å
            tolerance_percent: –î–æ–ø—É—Å–∫ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            
        Returns:
            True –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —É —É—Ä–æ–≤–Ω—è
        """
        try:
            close_price = float(candle.close_price)
            distance_percent = abs(close_price - level.price) / level.price * 100
            
            is_near = distance_percent <= tolerance_percent
            
            if is_near:
                logger.debug(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ —É —É—Ä–æ–≤–Ω—è: {close_price:.2f} vs {level.price:.2f} "
                           f"(distance={distance_percent:.2f}%)")
            
            return is_near
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
            return False
    
    def check_close_near_extreme(
        self,
        candle: Any,
        max_pullback_percent: float = 10.0
    ) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å –ø–æ–¥ —Å–∞–º—ã–π Hi/Low –±–µ–∑ –æ—Ç–∫–∞—Ç–∞
        
        –î–ª—è –ø—Ä–æ–±–æ—è –≤–∞–∂–Ω–æ —á—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏–µ –±–ª–∏–∑–∫–æ –∫ —ç–∫—Å—Ç—Ä–µ–º—É–º—É (–æ—Ç–∫–∞—Ç < 10%)
        
        Args:
            candle: –°–≤–µ—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            max_pullback_percent: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–∫–∞—Ç –≤ %
            
        Returns:
            Tuple[is_near_extreme, extreme_type ("high" –∏–ª–∏ "low")]
        """
        try:
            high = float(candle.high_price)
            low = float(candle.low_price)
            close = float(candle.close_price)
            
            candle_range = high - low
            
            if candle_range == 0:
                return False, "none"
            
            # –û—Ç–∫–∞—Ç –æ—Ç High
            pullback_from_high = (high - close) / candle_range * 100
            
            # –û—Ç–∫–∞—Ç –æ—Ç Low
            pullback_from_low = (close - low) / candle_range * 100
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ —É High
            if pullback_from_high <= max_pullback_percent:
                logger.debug(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ —É High: –æ—Ç–∫–∞—Ç {pullback_from_high:.1f}%")
                return True, "high"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ —É Low
            if pullback_from_low <= max_pullback_percent:
                logger.debug(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ —É Low: –æ—Ç–∫–∞—Ç {pullback_from_low:.1f}%")
                return True, "low"
            
            return False, "none"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —É —ç–∫—Å—Ç—Ä–µ–º—É–º–∞: {e}")
            return False, "none"
    
    # ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        return {
            **self.stats,
            "config": {
                "compression_threshold": self.compression_threshold,
                "compression_min_bars": self.compression_min_bars,
                "cluster_tolerance_percent": self.cluster_tolerance * 100,
                "bpu_touch_tolerance_percent": self.bpu_touch_tolerance * 100,
                "consolidation_min_bars": self.consolidation_min_bars,
                "v_formation_min_move_percent": self.v_min_move * 100
            }
        }
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats = {
            "compressions_detected": 0,
            "clusters_detected": 0,
            "bsu_found": 0,
            "bpu_found": 0,
            "consolidations_detected": 0,
            "v_formations_detected": 0,
            "total_patterns": 0
        }
        logger.info("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ PatternDetector —Å–±—Ä–æ—à–µ–Ω–∞")
    
    def __repr__(self) -> str:
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return (f"PatternDetector(total_patterns={self.stats['total_patterns']}, "
                f"compressions={self.stats['compressions_detected']}, "
                f"clusters={self.stats['clusters_detected']})")
    
    def __str__(self) -> str:
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
        stats = self.get_stats()
        return (f"Pattern Detector:\n"
                f"  Total patterns: {stats['total_patterns']}\n"
                f"  Compressions: {stats['compressions_detected']}\n"
                f"  Clusters: {stats['clusters_detected']}\n"
                f"  BSU found: {stats['bsu_found']}\n"
                f"  BPU found: {stats['bpu_found']}\n"
                f"  Consolidations: {stats['consolidations_detected']}\n"
                f"  V-formations: {stats['v_formations_detected']}")


# Export
__all__ = [
    "PatternDetector",
    "PatternMatch",
    "BSUPattern",
    "BPUPattern"
]

logger.info("‚úÖ Pattern Detector module loaded")
