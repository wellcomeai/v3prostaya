"""
Technical Analysis Module

–ú–æ–¥—É–ª—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω–µ–π, ATR, –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.

Components:
- TechnicalAnalysisContext: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
- TechnicalAnalysisContextManager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
- LevelAnalyzer: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
- ATRCalculator: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ATR (Average True Range)
- PatternDetector: –î–µ—Ç–µ–∫—Ç–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ë–°–£-–ë–ü–£
- BreakoutAnalyzer: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–±–æ–µ–≤ (–∏—Å—Ç–∏–Ω–Ω—ã—Ö –∏ –ª–æ–∂–Ω—ã—Ö)
- MarketConditionsAnalyzer: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π

Author: Trading Bot Team
Version: 2.0.0
"""

import logging

# ==================== CONTEXT ====================
from .context import (
    TechnicalAnalysisContext,
    SupportResistanceLevel,
    ATRData,
    MarketCondition,
    TrendDirection
)

from .context_manager import TechnicalAnalysisContextManager

# ==================== ANALYZERS ====================
from .level_analyzer import LevelAnalyzer, LevelCandidate

from .atr_calculator import ATRCalculator

from .pattern_detector import (
    PatternDetector,
    PatternMatch,
    BSUPattern,
    BPUPattern
)

from .breakout_analyzer import (
    BreakoutAnalyzer,
    BreakoutAnalysis,
    BreakoutType,
    BreakoutDirection
)

from .market_conditions import (
    MarketConditionsAnalyzer,
    MarketConditionsAnalysis,
    VolatilityLevel,
    EnergyLevel,
    TrendStrength
)

logger = logging.getLogger(__name__)

# ==================== EXPORTS ====================

__all__ = [
    # Context & Manager
    "TechnicalAnalysisContext",
    "TechnicalAnalysisContextManager",
    "SupportResistanceLevel",
    "ATRData",
    "MarketCondition",
    "TrendDirection",
    
    # Level Analyzer
    "LevelAnalyzer",
    "LevelCandidate",
    
    # ATR Calculator
    "ATRCalculator",
    
    # Pattern Detector
    "PatternDetector",
    "PatternMatch",
    "BSUPattern",
    "BPUPattern",
    
    # Breakout Analyzer
    "BreakoutAnalyzer",
    "BreakoutAnalysis",
    "BreakoutType",
    "BreakoutDirection",
    
    # Market Conditions Analyzer
    "MarketConditionsAnalyzer",
    "MarketConditionsAnalysis",
    "VolatilityLevel",
    "EnergyLevel",
    "TrendStrength",
    
    # Utilities
    "get_module_status",
    "is_fully_ready",
    "print_module_status"
]

__version__ = "2.0.0"

# ==================== MODULE STATUS ====================

MODULE_STATUS = {
    "context": "‚úÖ Ready",
    "context_manager": "‚úÖ Ready",
    "level_analyzer": "‚úÖ Ready",
    "atr_calculator": "‚úÖ Ready",
    "pattern_detector": "‚úÖ Ready",
    "breakout_analyzer": "‚úÖ Ready",
    "market_conditions": "‚úÖ Ready"
}

# ==================== UTILITIES ====================

def get_module_status():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    
    Returns:
        Dict[str, str]: –°–ª–æ–≤–∞—Ä—å –º–æ–¥—É–ª—å -> —Å—Ç–∞—Ç—É—Å
    """
    return MODULE_STATUS.copy()


def is_fully_ready():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    
    Returns:
        bool: True –µ—Å–ª–∏ –≤—Å–µ –º–æ–¥—É–ª–∏ –≥–æ—Ç–æ–≤—ã
    """
    return all(status == "‚úÖ Ready" for status in MODULE_STATUS.values())


def print_module_status():
    """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    logger.info("=" * 70)
    logger.info("üìä TECHNICAL ANALYSIS MODULE STATUS")
    logger.info("=" * 70)
    
    for module, status in MODULE_STATUS.items():
        logger.info(f"  {status} {module}")
    
    if is_fully_ready():
        logger.info("\n‚úÖ All technical analysis modules are ready and operational!")
    else:
        ready_count = sum(1 for s in MODULE_STATUS.values() if s == "‚úÖ Ready")
        total_count = len(MODULE_STATUS)
        logger.info(f"\n‚è≥ {ready_count}/{total_count} modules ready")
    
    logger.info("=" * 70)


def get_available_analyzers():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
    
    Returns:
        Dict[str, type]: –°–ª–æ–≤–∞—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ -> –∫–ª–∞—Å—Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    """
    return {
        "level": LevelAnalyzer,
        "atr": ATRCalculator,
        "pattern": PatternDetector,
        "breakout": BreakoutAnalyzer,
        "market_conditions": MarketConditionsAnalyzer
    }


def create_full_analyzer_suite():
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö
    
    Returns:
        Dict[str, object]: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞–º–∏
        
    Example:
        >>> analyzers = create_full_analyzer_suite()
        >>> level_analyzer = analyzers['level']
        >>> atr_calculator = analyzers['atr']
    """
    try:
        suite = {
            "level": LevelAnalyzer(),
            "atr": ATRCalculator(),
            "pattern": PatternDetector(),
            "breakout": BreakoutAnalyzer(),
            "market_conditions": MarketConditionsAnalyzer()
        }
        
        logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤")
        return suite
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤: {e}")
        raise


# ==================== INITIALIZATION ====================

# –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
logger.info("=" * 70)
logger.info("üìä Technical Analysis Module Loading...")
logger.info(f"   Version: {__version__}")
logger.info("=" * 70)

for module, status in MODULE_STATUS.items():
    logger.info(f"  {status} {module}")

if is_fully_ready():
    logger.info("\n‚úÖ All technical analysis modules ready and operational!")
    logger.info("\nAvailable components:")
    logger.info("  ‚Ä¢ TechnicalAnalysisContext - –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞")
    logger.info("  ‚Ä¢ TechnicalAnalysisContextManager - –º–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    logger.info("  ‚Ä¢ LevelAnalyzer - –∞–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π S/R")
    logger.info("  ‚Ä¢ ATRCalculator - —Ä–∞—Å—á–µ—Ç –∑–∞–ø–∞—Å–∞ —Ö–æ–¥–∞")
    logger.info("  ‚Ä¢ PatternDetector - –¥–µ—Ç–µ–∫—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–ë–°–£-–ë–ü–£, –ø–æ–¥–∂–∞—Ç–∏–µ)")
    logger.info("  ‚Ä¢ BreakoutAnalyzer - –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–æ–µ–≤ (–∏—Å—Ç–∏–Ω–Ω—ã–µ/–ª–æ–∂–Ω—ã–µ)")
    logger.info("  ‚Ä¢ MarketConditionsAnalyzer - –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π")
else:
    ready_count = sum(1 for s in MODULE_STATUS.values() if s == "‚úÖ Ready")
    total_count = len(MODULE_STATUS)
    logger.info(f"\n‚è≥ {ready_count}/{total_count} modules ready")

logger.info("=" * 70)
