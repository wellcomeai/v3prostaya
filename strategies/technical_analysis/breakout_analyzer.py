"""
Breakout Analyzer - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–±–æ–µ–≤ —É—Ä–æ–≤–Ω–µ–π

–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø—Ä–æ–±–æ—è (–Ω–∞—Å—Ç–æ—è—â–∏–π vs –ª–æ–∂–Ω—ã–π) –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.

–¢–∏–ø—ã –ø—Ä–æ–±–æ–µ–≤:
1. –ù–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ–±–æ–π (True Breakout) - –∏–º–ø—É–ª—å—Å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
2. –õ–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π (False Breakout) - –æ–±–º–∞–Ω–Ω—ã–π –ø—Ä–æ–±–æ–π —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–º
   - –ü—Ä–æ—Å—Ç–æ–π –õ–ü (1 –±–∞—Ä)
   - –°–∏–ª—å–Ω—ã–π –õ–ü (2 –±–∞—Ä–∞)
   - –°–ª–æ–∂–Ω—ã–π –õ–ü (3+ –±–∞—Ä–∞)

–ö—Ä–∏—Ç–µ—Ä–∏–∏ –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
- –ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ–±–æ—è ‚â§ 1/3 ATR –¥–ª—è –ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–±–æ—è
- –ü–æ–¥–∂–∞—Ç–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç–æ—è—â–∏–º –ø—Ä–æ–±–æ–µ–º
- –ë–ª–∏–∂–Ω–∏–π/–¥–∞–ª—å–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç
- –ó–∞–∫—Ä—ã—Ç–∏–µ —É —É—Ä–æ–≤–Ω—è
- –†–µ–∞–∫—Ü–∏—è –Ω–∞ –õ–ü

Author: Trading Bot Team
Version: 1.0.0
"""

import logging
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime, timedelta, timezone
from dataclasses import dataclass, field
from enum import Enum

from .context import SupportResistanceLevel

logger = logging.getLogger(__name__)


class BreakoutType(Enum):
    """–¢–∏–ø—ã –ø—Ä–æ–±–æ–µ–≤"""
    TRUE_BREAKOUT = "true_breakout"          # –ù–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ–±–æ–π
    FALSE_BREAKOUT_SIMPLE = "false_simple"   # –ü—Ä–æ—Å—Ç–æ–π –õ–ü (1 –±–∞—Ä)
    FALSE_BREAKOUT_STRONG = "false_strong"   # –°–∏–ª—å–Ω—ã–π –õ–ü (2 –±–∞—Ä–∞)
    FALSE_BREAKOUT_COMPLEX = "false_complex" # –°–ª–æ–∂–Ω—ã–π –õ–ü (3+ –±–∞—Ä–∞)
    NO_BREAKOUT = "no_breakout"              # –ü—Ä–æ–±–æ—è –Ω–µ—Ç
    UNKNOWN = "unknown"                      # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π


class BreakoutDirection(Enum):
    """–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–æ—è"""
    UPWARD = "upward"      # –ü—Ä–æ–±–æ–π –≤–≤–µ—Ä—Ö (—á–µ—Ä–µ–∑ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ)
    DOWNWARD = "downward"  # –ü—Ä–æ–±–æ–π –≤–Ω–∏–∑ (—á–µ—Ä–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫—É)
    NONE = "none"


@dataclass
class BreakoutAnalysis:
    """
    –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–æ—è
    
    Attributes:
        breakout_type: –¢–∏–ø –ø—Ä–æ–±–æ—è
        direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–æ—è
        strength: –°–∏–ª–∞ –ø—Ä–æ–±–æ—è (0.0-1.0)
        confidence: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (0.0-1.0)
        level: –£—Ä–æ–≤–µ–Ω—å –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø—Ä–æ–±–∏—Ç
        breakout_candle: –°–≤–µ—á–∞ –ø—Ä–æ–±–æ—è
        breakout_depth: –ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ–±–æ—è –≤ –ø—É–Ω–∫—Ç–∞—Ö
        breakout_depth_atr_ratio: –ì–ª—É–±–∏–Ω–∞ / ATR
        has_compression: –ë—ã–ª–æ –ª–∏ –ø–æ–¥–∂–∞—Ç–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–±–æ–µ–º
        retest_type: –¢–∏–ø —Ä–µ—Ç–µ—Å—Ç–∞ (near/far)
        close_near_level: –ó–∞–∫—Ä—ã—Ç–∏–µ –≤–±–ª–∏–∑–∏ —É—Ä–æ–≤–Ω—è
        metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    breakout_type: BreakoutType
    direction: BreakoutDirection
    strength: float
    confidence: float
    level: Optional[SupportResistanceLevel] = None
    breakout_candle: Any = None
    breakout_depth: float = 0.0
    breakout_depth_atr_ratio: float = 0.0
    has_compression: bool = False
    retest_type: str = "unknown"  # near, far, first
    close_near_level: bool = False
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    @property
    def is_true_breakout(self) -> bool:
        """–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–º –ø—Ä–æ–±–æ–µ–º"""
        return self.breakout_type == BreakoutType.TRUE_BREAKOUT
    
    @property
    def is_false_breakout(self) -> bool:
        """–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ª–æ–∂–Ω—ã–º –ø—Ä–æ–±–æ–µ–º"""
        return self.breakout_type in [
            BreakoutType.FALSE_BREAKOUT_SIMPLE,
            BreakoutType.FALSE_BREAKOUT_STRONG,
            BreakoutType.FALSE_BREAKOUT_COMPLEX
        ]
    
    def to_dict(self) -> Dict[str, Any]:
        """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        return {
            "breakout_type": self.breakout_type.value,
            "direction": self.direction.value,
            "strength": self.strength,
            "confidence": self.confidence,
            "breakout_depth": self.breakout_depth,
            "breakout_depth_atr_ratio": self.breakout_depth_atr_ratio,
            "has_compression": self.has_compression,
            "retest_type": self.retest_type,
            "close_near_level": self.close_near_level,
            "is_true_breakout": self.is_true_breakout,
            "is_false_breakout": self.is_false_breakout,
            "metadata": self.metadata
        }


class BreakoutAnalyzer:
    """
    üí• –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–±–æ–µ–≤ —É—Ä–æ–≤–Ω–µ–π
    
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø—Ä–æ–±–æ—è (–Ω–∞—Å—Ç–æ—è—â–∏–π vs –ª–æ–∂–Ω—ã–π) –Ω–∞ –æ—Å–Ω–æ–≤–µ:
    - –ì–ª—É–±–∏–Ω—ã –ø—Ä–æ–±–æ—è
    - –ü–æ–≤–µ–¥–µ–Ω–∏—è —Ü–µ–Ω—ã –ø–æ—Å–ª–µ –ø—Ä–æ–±–æ—è
    - –ü—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Å–ª–æ–≤–∏–π (–ø–æ–¥–∂–∞—Ç–∏–µ, —Ä–µ—Ç–µ—Å—Ç)
    - –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ª–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π
    
    Usage:
        analyzer = BreakoutAnalyzer()
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        analysis = analyzer.analyze_breakout(
            candles=candles_m5,
            level=resistance,
            atr=atr_data.calculated_atr
        )
        
        if analysis.is_true_breakout:
            print(f"–ù–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ–±–æ–π! Strength: {analysis.strength}")
        elif analysis.is_false_breakout:
            print(f"–õ–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π: {analysis.breakout_type.value}")
    """
    
    def __init__(
        self,
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–±–æ—è
        false_breakout_max_depth_atr: float = 0.33,  # –ú–∞–∫—Å–∏–º—É–º 1/3 ATR
        false_breakout_tolerance_percent: float = 0.5,  # –î–æ–ø—É—Å–∫ –¥–ª—è –∑–æ–Ω—ã –ø—Ä–æ–±–æ—è
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ø—Ä–æ–±–æ—è
        true_breakout_min_depth_atr: float = 0.1,    # –ú–∏–Ω–∏–º—É–º 10% ATR
        true_breakout_impulse_threshold: float = 0.5,  # –ò–º–ø—É–ª—å—Å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ >0.5% ATR
        
        # –†–µ—Ç–µ—Å—Ç
        near_retest_days: int = 7,                   # –ë–ª–∏–∂–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç < 7 –¥–Ω–µ–π
        far_retest_days: int = 30,                   # –î–∞–ª—å–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç > 30 –¥–Ω–µ–π
        
        # –ü–æ–¥–∂–∞—Ç–∏–µ
        compression_required: bool = True,            # –¢—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–¥–∂–∞—Ç–∏–µ –¥–ª—è true breakout
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø—Ä–æ–±–æ–µ–≤
        
        Args:
            false_breakout_max_depth_atr: –ú–∞–∫—Å –≥–ª—É–±–∏–Ω–∞ –õ–ü (–¥–æ–ª–∏ ATR)
            false_breakout_tolerance_percent: –î–æ–ø—É—Å–∫ –∑–æ–Ω—ã –ø—Ä–æ–±–æ—è
            true_breakout_min_depth_atr: –ú–∏–Ω –≥–ª—É–±–∏–Ω–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ø—Ä–æ–±–æ—è
            true_breakout_impulse_threshold: –ü–æ—Ä–æ–≥ –∏–º–ø—É–ª—å—Å–∞
            near_retest_days: –î–Ω–∏ –¥–ª—è –±–ª–∏–∂–Ω–µ–≥–æ —Ä–µ—Ç–µ—Å—Ç–∞
            far_retest_days: –î–Ω–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–≥–æ —Ä–µ—Ç–µ—Å—Ç–∞
            compression_required: –¢—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–¥–∂–∞—Ç–∏–µ
        """
        self.false_max_depth_atr = false_breakout_max_depth_atr
        self.false_tolerance = false_breakout_tolerance_percent / 100.0
        
        self.true_min_depth_atr = true_breakout_min_depth_atr
        self.true_impulse = true_breakout_impulse_threshold
        
        self.near_retest_days = near_retest_days
        self.far_retest_days = far_retest_days
        
        self.compression_required = compression_required
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "analyses_count": 0,
            "true_breakouts": 0,
            "false_breakouts_simple": 0,
            "false_breakouts_strong": 0,
            "false_breakouts_complex": 0,
            "no_breakouts": 0,
            "average_breakout_strength": 0.0
        }
        
        logger.info("üí• BreakoutAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   ‚Ä¢ False breakout max depth: {false_breakout_max_depth_atr} ATR")
        logger.info(f"   ‚Ä¢ True breakout min depth: {true_breakout_min_depth_atr} ATR")
        logger.info(f"   ‚Ä¢ Compression required: {compression_required}")
    
    # ==================== –û–°–ù–û–í–ù–û–ô –ê–ù–ê–õ–ò–ó ====================
    
    def analyze_breakout(
        self,
        candles: List,
        level: SupportResistanceLevel,
        atr: Optional[float] = None,
        current_price: Optional[float] = None,
        has_compression: bool = False,
        lookback: int = 10
    ) -> BreakoutAnalysis:
        """
        üéØ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–æ—è
        
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–æ—è —É—Ä–æ–≤–Ω—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–≥–æ —Ç–∏–ø.
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π (M5, M30, H1)
            level: –£—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–±–æ—è
            atr: ATR –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≥–ª—É–±–∏–Ω—ã –ø—Ä–æ–±–æ—è
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            has_compression: –ë—ã–ª–æ –ª–∏ –ø–æ–¥–∂–∞—Ç–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–±–æ–µ–º
            lookback: –°–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            
        Returns:
            BreakoutAnalysis —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        try:
            self.stats["analyses_count"] += 1
            
            if not candles or not level:
                return self._create_no_breakout_result()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            if current_price is None:
                current_price = float(candles[-1].close_price)
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π
            recent_candles = candles[-lookback:] if len(candles) > lookback else candles
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–æ—è
            breakout_detected, direction = self._detect_breakout(recent_candles, level, current_price)
            
            if not breakout_detected:
                self.stats["no_breakouts"] += 1
                return self._create_no_breakout_result()
            
            logger.info(f"üí• –ü—Ä–æ–±–æ–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {direction.value} —á–µ—Ä–µ–∑ {level.price:.2f}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–±–æ—è
            breakout_type = self._classify_breakout_type(
                candles=recent_candles,
                level=level,
                direction=direction,
                atr=atr
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–±–æ—è
            breakout_candle = self._find_breakout_candle(recent_candles, level, direction)
            breakout_depth = self._calculate_breakout_depth(breakout_candle, level, direction) if breakout_candle else 0.0
            
            depth_atr_ratio = 0.0
            if atr and atr > 0:
                depth_atr_ratio = breakout_depth / atr
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ—Ç–µ—Å—Ç–∞
            retest_type = self._determine_retest_type(level)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ —É —É—Ä–æ–≤–Ω—è
            close_near_level = False
            if breakout_candle:
                close_near_level = self._check_close_near_level(breakout_candle, level)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–ª—É –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            strength = self._calculate_breakout_strength(
                breakout_type=breakout_type,
                depth_atr_ratio=depth_atr_ratio,
                has_compression=has_compression,
                retest_type=retest_type,
                close_near_level=close_near_level
            )
            
            confidence = self._calculate_confidence(
                breakout_type=breakout_type,
                candles=recent_candles,
                level=level,
                direction=direction
            )
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = {
                "lookback_candles": len(recent_candles),
                "level_strength": level.strength,
                "level_touches": level.touches,
                "analyzed_at": datetime.now(timezone.utc).isoformat()
            }
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            analysis = BreakoutAnalysis(
                breakout_type=breakout_type,
                direction=direction,
                strength=strength,
                confidence=confidence,
                level=level,
                breakout_candle=breakout_candle,
                breakout_depth=breakout_depth,
                breakout_depth_atr_ratio=depth_atr_ratio,
                has_compression=has_compression,
                retest_type=retest_type,
                close_near_level=close_near_level,
                metadata=metadata
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_stats(analysis)
            
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–æ—è –∑–∞–≤–µ—Ä—à–µ–Ω: type={breakout_type.value}, "
                       f"strength={strength:.2f}, confidence={confidence:.2f}")
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–æ—è: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return self._create_no_breakout_result()
    
    # ==================== –î–ï–¢–ï–ö–¶–ò–Ø –ü–†–û–ë–û–Ø ====================
    
    def _detect_breakout(
        self,
        candles: List,
        level: SupportResistanceLevel,
        current_price: float
    ) -> Tuple[bool, BreakoutDirection]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–±–æ—è —É—Ä–æ–≤–Ω—è
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            level: –£—Ä–æ–≤–µ–Ω—å
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            Tuple[–ø—Ä–æ–±–æ–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω?, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ]
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å–≤–µ—á–∞ –ø—Ä–æ–±–∏–ª–∞ —É—Ä–æ–≤–µ–Ω—å
            for candle in candles:
                high = float(candle.high_price)
                low = float(candle.low_price)
                
                # –ü—Ä–æ–±–æ–π –≤–≤–µ—Ä—Ö (—á–µ—Ä–µ–∑ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ)
                if level.level_type == "resistance" and high > level.price:
                    logger.debug(f"üí• –ü—Ä–æ–±–æ–π –≤–≤–µ—Ä—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω: High={high:.2f} > Level={level.price:.2f}")
                    return True, BreakoutDirection.UPWARD
                
                # –ü—Ä–æ–±–æ–π –≤–Ω–∏–∑ (—á–µ—Ä–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫—É)
                if level.level_type == "support" and low < level.price:
                    logger.debug(f"üí• –ü—Ä–æ–±–æ–π –≤–Ω–∏–∑ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: Low={low:.2f} < Level={level.price:.2f}")
                    return True, BreakoutDirection.DOWNWARD
            
            return False, BreakoutDirection.NONE
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø—Ä–æ–±–æ—è: {e}")
            return False, BreakoutDirection.NONE
    
    def _find_breakout_candle(
        self,
        candles: List,
        level: SupportResistanceLevel,
        direction: BreakoutDirection
    ) -> Optional[Any]:
        """
        –ù–∞–π—Ç–∏ —Å–≤–µ—á—É –ø—Ä–æ–±–æ—è
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            level: –£—Ä–æ–≤–µ–Ω—å
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–æ—è
            
        Returns:
            –°–≤–µ—á–∞ –ø—Ä–æ–±–æ—è –∏–ª–∏ None
        """
        try:
            for candle in reversed(candles):
                high = float(candle.high_price)
                low = float(candle.low_price)
                
                if direction == BreakoutDirection.UPWARD and high > level.price:
                    return candle
                
                if direction == BreakoutDirection.DOWNWARD and low < level.price:
                    return candle
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–≤–µ—á–∏ –ø—Ä–æ–±–æ—è: {e}")
            return None
    
    # ==================== –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –¢–ò–ü–ê –ü–†–û–ë–û–Ø ====================
    
    def _classify_breakout_type(
        self,
        candles: List,
        level: SupportResistanceLevel,
        direction: BreakoutDirection,
        atr: Optional[float] = None
    ) -> BreakoutType:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –ø—Ä–æ–±–æ—è
        
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç: –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ–±–æ–π –∏–ª–∏ –ª–æ–∂–Ω—ã–π (–ø—Ä–æ—Å—Ç–æ–π/—Å–∏–ª—å–Ω—ã–π/—Å–ª–æ–∂–Ω—ã–π)
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            level: –£—Ä–æ–≤–µ–Ω—å
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–æ—è
            atr: ATR
            
        Returns:
            –¢–∏–ø –ø—Ä–æ–±–æ—è
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            
            # 1. –ü—Ä–æ—Å—Ç–æ–π –õ–ü (1 –±–∞—Ä)
            simple_false = self._check_simple_false_breakout(candles, level, direction, atr)
            if simple_false:
                logger.info("üî¥ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π –õ–ü (1 –±–∞—Ä)")
                return BreakoutType.FALSE_BREAKOUT_SIMPLE
            
            # 2. –°–∏–ª—å–Ω—ã–π –õ–ü (2 –±–∞—Ä–∞)
            strong_false = self._check_strong_false_breakout(candles, level, direction, atr)
            if strong_false:
                logger.info("üî¥ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–∏–ª—å–Ω—ã–π –õ–ü (2 –±–∞—Ä–∞)")
                return BreakoutType.FALSE_BREAKOUT_STRONG
            
            # 3. –°–ª–æ–∂–Ω—ã–π –õ–ü (3+ –±–∞—Ä–∞)
            complex_false = self._check_complex_false_breakout(candles, level, direction, atr)
            if complex_false:
                logger.info("üî¥ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–ª–æ–∂–Ω—ã–π –õ–ü (3+ –±–∞—Ä–∞)")
                return BreakoutType.FALSE_BREAKOUT_COMPLEX
            
            # 4. –ï—Å–ª–∏ –Ω–µ –õ–ü - –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ø—Ä–æ–±–æ—è
            is_true = self._check_true_breakout(candles, level, direction, atr)
            if is_true:
                logger.info("üü¢ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ–±–æ–π")
                return BreakoutType.TRUE_BREAKOUT
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å
            logger.warning("‚ö†Ô∏è –¢–∏–ø –ø—Ä–æ–±–æ—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
            return BreakoutType.UNKNOWN
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–±–æ—è: {e}")
            return BreakoutType.UNKNOWN
    
    def _check_simple_false_breakout(
        self,
        candles: List,
        level: SupportResistanceLevel,
        direction: BreakoutDirection,
        atr: Optional[float]
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –õ–ü (1 –±–∞—Ä)
        
        –£—Å–ª–æ–≤–∏—è:
        1. –ë–∞—Ä –ø—Ä–æ–±–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å
        2. –ë–∞—Ä –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –∑–æ–Ω–µ –ø—Ä–æ–±–æ—è (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ)
        3. –ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ–±–æ—è ‚â§ 1/3 ATR
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            level: –£—Ä–æ–≤–µ–Ω—å
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            atr: ATR
            
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ–π –õ–ü
        """
        try:
            if not candles:
                return False
            
            last_candle = candles[-1]
            high = float(last_candle.high_price)
            low = float(last_candle.low_price)
            close = float(last_candle.close_price)
            
            # –î–æ–ø—É—Å–∫ –¥–ª—è –∑–æ–Ω—ã –ø—Ä–æ–±–æ—è
            tolerance = level.price * self.false_tolerance
            
            # –ü—Ä–æ–±–æ–π –≤–≤–µ—Ä—Ö
            if direction == BreakoutDirection.UPWARD:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ High –ø—Ä–æ–±–∏–ª —É—Ä–æ–≤–µ–Ω—å
                if high <= level.price:
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Close –≤–µ—Ä–Ω—É–ª—Å—è –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å
                if close >= (level.price - tolerance):
                    return False  # –ó–∞–∫—Ä—ã–ª—Å—è –≤ –∑–æ–Ω–µ –ø—Ä–æ–±–æ—è
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª—É–±–∏–Ω—É –ø—Ä–æ–±–æ—è
                breakout_depth = high - level.price
                
                if atr and atr > 0:
                    depth_ratio = breakout_depth / atr
                    if depth_ratio > self.false_max_depth_atr:
                        return False  # –°–ª–∏—à–∫–æ–º –≥–ª—É–±–æ–∫–∏–π –ø—Ä–æ–±–æ–π
                
                logger.debug(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π –õ–ü (–≤–≤–µ—Ä—Ö): –ø—Ä–æ–±–æ–π {breakout_depth:.2f}, close={close:.2f}")
                return True
            
            # –ü—Ä–æ–±–æ–π –≤–Ω–∏–∑
            elif direction == BreakoutDirection.DOWNWARD:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Low –ø—Ä–æ–±–∏–ª —É—Ä–æ–≤–µ–Ω—å
                if low >= level.price:
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Close –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞–¥ —É—Ä–æ–≤–µ–Ω—å
                if close <= (level.price + tolerance):
                    return False  # –ó–∞–∫—Ä—ã–ª—Å—è –≤ –∑–æ–Ω–µ –ø—Ä–æ–±–æ—è
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª—É–±–∏–Ω—É –ø—Ä–æ–±–æ—è
                breakout_depth = level.price - low
                
                if atr and atr > 0:
                    depth_ratio = breakout_depth / atr
                    if depth_ratio > self.false_max_depth_atr:
                        return False  # –°–ª–∏—à–∫–æ–º –≥–ª—É–±–æ–∫–∏–π –ø—Ä–æ–±–æ–π
                
                logger.debug(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π –õ–ü (–≤–Ω–∏–∑): –ø—Ä–æ–±–æ–π {breakout_depth:.2f}, close={close:.2f}")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –õ–ü: {e}")
            return False
    
    def _check_strong_false_breakout(
        self,
        candles: List,
        level: SupportResistanceLevel,
        direction: BreakoutDirection,
        atr: Optional[float]
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—å–Ω–æ–≥–æ –õ–ü (2 –±–∞—Ä–∞)
        
        –£—Å–ª–æ–≤–∏—è:
        1. –ü–µ—Ä–≤—ã–π –±–∞—Ä –ø—Ä–æ–±–∏–≤–∞–µ—Ç –ò –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –∑–æ–Ω–µ –ø—Ä–æ–±–æ—è
        2. –í—Ç–æ—Ä–æ–π –±–∞—Ä –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –∑–æ–Ω–µ –ø—Ä–æ–±–æ—è
        3. –í—Ç–æ—Ä–æ–π –±–∞—Ä –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ó–ê —É—Ä–æ–≤–Ω–µ–º (—Ä–∞–∑–≤–æ—Ä–æ—Ç)
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            level: –£—Ä–æ–≤–µ–Ω—å
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            atr: ATR
            
        Returns:
            True –µ—Å–ª–∏ —Å–∏–ª—å–Ω—ã–π –õ–ü
        """
        try:
            if len(candles) < 2:
                return False
            
            first_candle = candles[-2]
            second_candle = candles[-1]
            
            tolerance = level.price * self.false_tolerance
            
            # –ü—Ä–æ–±–æ–π –≤–≤–µ—Ä—Ö
            if direction == BreakoutDirection.UPWARD:
                # –ü–µ—Ä–≤—ã–π –±–∞—Ä: –ø—Ä–æ–±–∏–ª –∏ –∑–∞–∫—Ä—ã–ª—Å—è –≤ –∑–æ–Ω–µ –ø—Ä–æ–±–æ—è
                first_high = float(first_candle.high_price)
                first_close = float(first_candle.close_price)
                
                if first_high <= level.price:
                    return False
                
                if first_close < level.price:
                    return False  # –ù–µ –∑–∞–∫—Ä—ã–ª—Å—è –≤ –∑–æ–Ω–µ –ø—Ä–æ–±–æ—è
                
                # –í—Ç–æ—Ä–æ–π –±–∞—Ä: –æ—Ç–∫—Ä—ã–ª—Å—è –≤ –∑–æ–Ω–µ –ø—Ä–æ–±–æ—è, –∑–∞–∫—Ä—ã–ª—Å—è –ø–æ–¥ —É—Ä–æ–≤–Ω–µ–º
                second_open = float(second_candle.open_price)
                second_close = float(second_candle.close_price)
                
                if second_open < level.price:
                    return False  # –ù–µ –æ—Ç–∫—Ä—ã–ª—Å—è –≤ –∑–æ–Ω–µ –ø—Ä–æ–±–æ—è
                
                if second_close >= (level.price - tolerance):
                    return False  # –ù–µ –≤–µ—Ä–Ω—É–ª—Å—è –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å
                
                logger.debug(f"‚úÖ –°–∏–ª—å–Ω—ã–π –õ–ü (–≤–≤–µ—Ä—Ö): 2 –±–∞—Ä–∞ —Å —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–º")
                return True
            
            # –ü—Ä–æ–±–æ–π –≤–Ω–∏–∑
            elif direction == BreakoutDirection.DOWNWARD:
                # –ü–µ—Ä–≤—ã–π –±–∞—Ä: –ø—Ä–æ–±–∏–ª –∏ –∑–∞–∫—Ä—ã–ª—Å—è –≤ –∑–æ–Ω–µ –ø—Ä–æ–±–æ—è
                first_low = float(first_candle.low_price)
                first_close = float(first_candle.close_price)
                
                if first_low >= level.price:
                    return False
                
                if first_close > level.price:
                    return False  # –ù–µ –∑–∞–∫—Ä—ã–ª—Å—è –≤ –∑–æ–Ω–µ –ø—Ä–æ–±–æ—è
                
                # –í—Ç–æ—Ä–æ–π –±–∞—Ä: –æ—Ç–∫—Ä—ã–ª—Å—è –≤ –∑–æ–Ω–µ –ø—Ä–æ–±–æ—è, –∑–∞–∫—Ä—ã–ª—Å—è –Ω–∞–¥ —É—Ä–æ–≤–Ω–µ–º
                second_open = float(second_candle.open_price)
                second_close = float(second_candle.close_price)
                
                if second_open > level.price:
                    return False  # –ù–µ –æ—Ç–∫—Ä—ã–ª—Å—è –≤ –∑–æ–Ω–µ –ø—Ä–æ–±–æ—è
                
                if second_close <= (level.price + tolerance):
                    return False  # –ù–µ –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞–¥ —É—Ä–æ–≤–µ–Ω—å
                
                logger.debug(f"‚úÖ –°–∏–ª—å–Ω—ã–π –õ–ü (–≤–Ω–∏–∑): 2 –±–∞—Ä–∞ —Å —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–º")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–ª—å–Ω–æ–≥–æ –õ–ü: {e}")
            return False
    
    def _check_complex_false_breakout(
        self,
        candles: List,
        level: SupportResistanceLevel,
        direction: BreakoutDirection,
        atr: Optional[float]
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ–≥–æ –õ–ü (3+ –±–∞—Ä–∞)
        
        –£—Å–ª–æ–≤–∏—è:
        1. –ü–µ—Ä–≤—ã–π –±–∞—Ä –ø—Ä–æ–±–∏–≤–∞–µ—Ç –ò –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –∑–æ–Ω–µ –ø—Ä–æ–±–æ—è
        2. –ú–∏–Ω–∏–º—É–º 3 —Å–ª–µ–¥—É—é—â–∏—Ö –±–∞—Ä–∞ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è/–∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è –≤ –∑–æ–Ω–µ –ø—Ä–æ–±–æ—è
        3. –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ä –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ó–ê —É—Ä–æ–≤–Ω–µ–º (—Ä–∞–∑–≤–æ—Ä–æ—Ç)
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            level: –£—Ä–æ–≤–µ–Ω—å
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            atr: ATR
            
        Returns:
            True –µ—Å–ª–∏ —Å–ª–æ–∂–Ω—ã–π –õ–ü
        """
        try:
            if len(candles) < 4:
                return False
            
            tolerance = level.price * self.false_tolerance
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4+ –±–∞—Ä–∞
            recent = candles[-4:]
            
            # –ü–µ—Ä–≤—ã–π –±–∞—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–±–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å—Å—è –≤ –∑–æ–Ω–µ
            first = recent[0]
            
            if direction == BreakoutDirection.UPWARD:
                if float(first.high_price) <= level.price:
                    return False
                if float(first.close_price) < level.price:
                    return False
            elif direction == BreakoutDirection.DOWNWARD:
                if float(first.low_price) >= level.price:
                    return False
                if float(first.close_price) > level.price:
                    return False
            
            # –°–ª–µ–¥—É—é—â–∏–µ 2+ –±–∞—Ä–∞ –≤ –∑–æ–Ω–µ –ø—Ä–æ–±–æ—è
            middle_bars = recent[1:-1]
            
            for bar in middle_bars:
                bar_open = float(bar.open_price)
                bar_close = float(bar.close_price)
                
                if direction == BreakoutDirection.UPWARD:
                    # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∑–æ–Ω–µ –ø—Ä–æ–±–æ—è (–≤—ã—à–µ —É—Ä–æ–≤–Ω—è)
                    if bar_open < level.price or bar_close < level.price:
                        return False
                elif direction == BreakoutDirection.DOWNWARD:
                    # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∑–æ–Ω–µ –ø—Ä–æ–±–æ—è (–Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è)
                    if bar_open > level.price or bar_close > level.price:
                        return False
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ä - —Ä–∞–∑–≤–æ—Ä–æ—Ç
            last = recent[-1]
            last_close = float(last.close_price)
            
            if direction == BreakoutDirection.UPWARD:
                if last_close >= (level.price - tolerance):
                    return False  # –ù–µ –≤–µ—Ä–Ω—É–ª—Å—è
            elif direction == BreakoutDirection.DOWNWARD:
                if last_close <= (level.price + tolerance):
                    return False  # –ù–µ –≤–µ—Ä–Ω—É–ª—Å—è
            
            logger.debug(f"‚úÖ –°–ª–æ–∂–Ω—ã–π –õ–ü: {len(middle_bars)+2} –±–∞—Ä–æ–≤ —Å –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–µ–π")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–∂–Ω–æ–≥–æ –õ–ü: {e}")
            return False
    
    def _check_true_breakout(
        self,
        candles: List,
        level: SupportResistanceLevel,
        direction: BreakoutDirection,
        atr: Optional[float]
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ø—Ä–æ–±–æ—è
        
        –ü—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ø—Ä–æ–±–æ—è:
        1. –ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ–±–æ—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è (>10% ATR)
        2. –ò–º–ø—É–ª—å—Å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–±–æ—è
        3. –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —É—Ä–æ–≤–Ω—é
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            level: –£—Ä–æ–≤–µ–Ω—å
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            atr: ATR
            
        Returns:
            True –µ—Å–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ–±–æ–π
        """
        try:
            if not candles:
                return False
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–≤–µ—á—É –ø—Ä–æ–±–æ—è
            breakout_candle = None
            for candle in reversed(candles):
                high = float(candle.high_price)
                low = float(candle.low_price)
                
                if direction == BreakoutDirection.UPWARD and high > level.price:
                    breakout_candle = candle
                    break
                elif direction == BreakoutDirection.DOWNWARD and low < level.price:
                    breakout_candle = candle
                    break
            
            if not breakout_candle:
                return False
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –ø—Ä–æ–±–æ—è
            if direction == BreakoutDirection.UPWARD:
                depth = float(breakout_candle.high_price) - level.price
            else:
                depth = level.price - float(breakout_candle.low_price)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≥–ª—É–±–∏–Ω—É
            if atr and atr > 0:
                depth_ratio = depth / atr
                if depth_ratio < self.true_min_depth_atr:
                    logger.debug(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –ø—Ä–æ–±–æ—è: {depth_ratio:.2f} < {self.true_min_depth_atr}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞—Å—å –∫ —É—Ä–æ–≤–Ω—é
            tolerance = level.price * 0.01  # 1%
            
            for candle in candles[candles.index(breakout_candle)+1:]:
                close = float(candle.close_price)
                
                if direction == BreakoutDirection.UPWARD:
                    if close < (level.price + tolerance):
                        logger.debug(f"‚ö†Ô∏è –¶–µ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –∫ —É—Ä–æ–≤–Ω—é –ø–æ—Å–ª–µ –ø—Ä–æ–±–æ—è")
                        return False
                elif direction == BreakoutDirection.DOWNWARD:
                    if close > (level.price - tolerance):
                        logger.debug(f"‚ö†Ô∏è –¶–µ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –∫ —É—Ä–æ–≤–Ω—é –ø–æ—Å–ª–µ –ø—Ä–æ–±–æ—è")
                        return False
            
            logger.debug(f"‚úÖ –£—Å–ª–æ–≤–∏—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ø—Ä–æ–±–æ—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ø—Ä–æ–±–æ—è: {e}")
            return False
    
    # ==================== –†–ê–°–ß–ï–¢–´ ====================
    
    def _calculate_breakout_depth(
        self,
        candle: Any,
        level: SupportResistanceLevel,
        direction: BreakoutDirection
    ) -> float:
        """–†–∞—Å—á–µ—Ç –≥–ª—É–±–∏–Ω—ã –ø—Ä–æ–±–æ—è –≤ –ø—É–Ω–∫—Ç–∞—Ö"""
        try:
            if direction == BreakoutDirection.UPWARD:
                return float(candle.high_price) - level.price
            elif direction == BreakoutDirection.DOWNWARD:
                return level.price - float(candle.low_price)
            return 0.0
        except:
            return 0.0
    
    def _calculate_breakout_strength(
        self,
        breakout_type: BreakoutType,
        depth_atr_ratio: float,
        has_compression: bool,
        retest_type: str,
        close_near_level: bool
    ) -> float:
        """
        –†–∞—Å—á–µ—Ç —Å–∏–ª—ã –ø—Ä–æ–±–æ—è (0.0-1.0)
        
        –§–∞–∫—Ç–æ—Ä—ã:
        - –¢–∏–ø –ø—Ä–æ–±–æ—è (–Ω–∞—Å—Ç–æ—è—â–∏–π = —Å–∏–ª—å–Ω–µ–µ)
        - –ì–ª—É–±–∏–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ ATR
        - –ù–∞–ª–∏—á–∏–µ –ø–æ–¥–∂–∞—Ç–∏—è
        - –¢–∏–ø —Ä–µ—Ç–µ—Å—Ç–∞
        - –ó–∞–∫—Ä—ã—Ç–∏–µ —É —É—Ä–æ–≤–Ω—è
        """
        try:
            # –ë–∞–∑–æ–≤–∞—è —Å–∏–ª–∞ –ø–æ —Ç–∏–ø—É
            if breakout_type == BreakoutType.TRUE_BREAKOUT:
                base_strength = 0.7
            elif breakout_type in [BreakoutType.FALSE_BREAKOUT_STRONG, BreakoutType.FALSE_BREAKOUT_COMPLEX]:
                base_strength = 0.5
            elif breakout_type == BreakoutType.FALSE_BREAKOUT_SIMPLE:
                base_strength = 0.3
            else:
                base_strength = 0.1
            
            # –ë–æ–Ω—É—Å –∑–∞ –≥–ª—É–±–∏–Ω—É (–¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ø—Ä–æ–±–æ—è)
            if breakout_type == BreakoutType.TRUE_BREAKOUT:
                if depth_atr_ratio > 0.5:
                    base_strength += 0.15
                elif depth_atr_ratio > 0.3:
                    base_strength += 0.10
            
            # –ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–∂–∞—Ç–∏–µ
            if has_compression:
                base_strength += 0.10
            
            # –ë–æ–Ω—É—Å –∑–∞ –±–ª–∏–∂–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç
            if retest_type == "near":
                base_strength += 0.05
            
            # –ë–æ–Ω—É—Å –∑–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —É —É—Ä–æ–≤–Ω—è
            if close_near_level and breakout_type == BreakoutType.TRUE_BREAKOUT:
                base_strength += 0.05
            
            return min(1.0, base_strength)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–ª—ã: {e}")
            return 0.5
    
    def _calculate_confidence(
        self,
        breakout_type: BreakoutType,
        candles: List,
        level: SupportResistanceLevel,
        direction: BreakoutDirection
    ) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if breakout_type in [BreakoutType.TRUE_BREAKOUT, BreakoutType.FALSE_BREAKOUT_SIMPLE]:
                confidence = 0.8
            elif breakout_type in [BreakoutType.FALSE_BREAKOUT_STRONG, BreakoutType.FALSE_BREAKOUT_COMPLEX]:
                confidence = 0.7
            else:
                confidence = 0.5
            
            # –ë–æ–Ω—É—Å –∑–∞ —Å–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
            if level.is_strong:
                confidence += 0.1
            
            # –ë–æ–Ω—É—Å –∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞—Å–∞–Ω–∏—è
            if level.touches >= 3:
                confidence += 0.05
            
            return min(1.0, confidence)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
            return 0.5
    
    # ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================
    
    def _determine_retest_type(self, level: SupportResistanceLevel) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ—Ç–µ—Å—Ç–∞
        
        Returns:
            "near" - –±–ª–∏–∂–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç (<7 –¥–Ω–µ–π)
            "far" - –¥–∞–ª—å–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç (>30 –¥–Ω–µ–π)
            "medium" - —Å—Ä–µ–¥–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç
            "first" - –ø–µ—Ä–≤–æ–µ –∫–∞—Å–∞–Ω–∏–µ
        """
        try:
            if not level.last_touch:
                return "first"
            
            days_since_touch = (datetime.now(timezone.utc) - level.last_touch).days
            
            if days_since_touch < self.near_retest_days:
                return "near"
            elif days_since_touch > self.far_retest_days:
                return "far"
            else:
                return "medium"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ä–µ—Ç–µ—Å—Ç–∞: {e}")
            return "unknown"
    
    def _check_close_near_level(
        self,
        candle: Any,
        level: SupportResistanceLevel,
        tolerance_percent: float = 0.5
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–±–ª–∏–∑–∏ —É—Ä–æ–≤–Ω—è"""
        try:
            close = float(candle.close_price)
            distance_percent = abs(close - level.price) / level.price * 100
            return distance_percent <= tolerance_percent
        except:
            return False
    
    def _create_no_breakout_result(self) -> BreakoutAnalysis:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ '–Ω–µ—Ç –ø—Ä–æ–±–æ—è'"""
        return BreakoutAnalysis(
            breakout_type=BreakoutType.NO_BREAKOUT,
            direction=BreakoutDirection.NONE,
            strength=0.0,
            confidence=0.0
        )
    
    # ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================
    
    def _update_stats(self, analysis: BreakoutAnalysis):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if analysis.breakout_type == BreakoutType.TRUE_BREAKOUT:
            self.stats["true_breakouts"] += 1
        elif analysis.breakout_type == BreakoutType.FALSE_BREAKOUT_SIMPLE:
            self.stats["false_breakouts_simple"] += 1
        elif analysis.breakout_type == BreakoutType.FALSE_BREAKOUT_STRONG:
            self.stats["false_breakouts_strong"] += 1
        elif analysis.breakout_type == BreakoutType.FALSE_BREAKOUT_COMPLEX:
            self.stats["false_breakouts_complex"] += 1
        
        # –°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞
        count = self.stats["analyses_count"]
        prev_avg = self.stats["average_breakout_strength"]
        self.stats["average_breakout_strength"] = (prev_avg * (count - 1) + analysis.strength) / count
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        return {
            **self.stats,
            "config": {
                "false_max_depth_atr": self.false_max_depth_atr,
                "true_min_depth_atr": self.true_min_depth_atr,
                "near_retest_days": self.near_retest_days,
                "far_retest_days": self.far_retest_days,
                "compression_required": self.compression_required
            }
        }
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats = {
            "analyses_count": 0,
            "true_breakouts": 0,
            "false_breakouts_simple": 0,
            "false_breakouts_strong": 0,
            "false_breakouts_complex": 0,
            "no_breakouts": 0,
            "average_breakout_strength": 0.0
        }
        logger.info("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ BreakoutAnalyzer —Å–±—Ä–æ—à–µ–Ω–∞")
    
    def __repr__(self) -> str:
        return (f"BreakoutAnalyzer(analyses={self.stats['analyses_count']}, "
                f"true={self.stats['true_breakouts']}, "
                f"false={self.stats['false_breakouts_simple']}/"
                f"{self.stats['false_breakouts_strong']}/"
                f"{self.stats['false_breakouts_complex']})")
    
    def __str__(self) -> str:
        stats = self.get_stats()
        return (f"Breakout Analyzer:\n"
                f"  Analyses: {stats['analyses_count']}\n"
                f"  True breakouts: {stats['true_breakouts']}\n"
                f"  False breakouts: simple={stats['false_breakouts_simple']}, "
                f"strong={stats['false_breakouts_strong']}, "
                f"complex={stats['false_breakouts_complex']}\n"
                f"  Average strength: {stats['average_breakout_strength']:.2f}")


# Export
__all__ = [
    "BreakoutAnalyzer",
    "BreakoutAnalysis",
    "BreakoutType",
    "BreakoutDirection"
]

logger.info("‚úÖ Breakout Analyzer module loaded")
