"""
ATR Calculator - Average True Range Calculator

–†–∞—Å—á–µ—Ç –∑–∞–ø–∞—Å–∞ —Ö–æ–¥–∞ (ATR) –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Å—Ç–æ–ø–æ–≤.

–†–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
1. –†–∞—Å—á–µ—Ç–Ω—ã–π ATR - —Å—Ä–µ–¥–Ω–µ–µ High-Low –∑–∞ 3-5 –¥–Ω–µ–π (–∏—Å–∫–ª—é—á–∞—è –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ)
2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π ATR - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ –Ω–∞ D1
3. –ü—Ä–∞–≤–∏–ª–æ 75-80% - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ ATR
4. –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ Stop Loss (–ø–æ —Ç—Ä–µ–Ω–¥—É 10%, –∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥ 5%)

Author: Trading Bot Team
Version: 1.0.1 - FIXED: current_range_used —Ç–µ–ø–µ—Ä—å –¥–æ–ª—è (0-1), –Ω–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
"""

import logging
from typing import List, Dict, Any, Optional, Tuple
from decimal import Decimal
from datetime import datetime, timezone
from statistics import mean, median, stdev

from .context import ATRData, SupportResistanceLevel

logger = logging.getLogger(__name__)


class ATRCalculator:
    """
    üìä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä Average True Range (ATR)
    
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–∞—Å —Ö–æ–¥–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:
    - –†–∞—Å—á–µ—Ç–Ω—ã–π ATR: —Å—Ä–µ–¥–Ω–µ–µ High-Low –∑–∞ N –¥–Ω–µ–π
    - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π ATR: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
    - –§–∏–ª—å—Ç—Ä –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –±–∞—Ä–æ–≤
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –∑–∞–ø–∞—Å–∞ —Ö–æ–¥–∞ (75-80% –ø—Ä–∞–≤–∏–ª–æ)
    - –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ —Å—Ç–æ–ø–æ–≤
    
    –í–ê–ñ–ù–û: current_range_used —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ –¥–æ–ª—è (0-1), –Ω–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã!
    –ù–∞–ø—Ä–∏–º–µ—Ä: 0.75 –æ–∑–Ω–∞—á–∞–µ—Ç 75% ATR –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
    
    Usage:
        calculator = ATRCalculator()
        atr_data = calculator.calculate_atr(candles_d1, levels_d1)
        
        if atr_data.is_exhausted:
            # –ù–µ –≤—Ö–æ–¥–∏—Ç—å –ø–æ —Ç—Ä–µ–Ω–¥—É
            pass
    """
    
    def __init__(
        self,
        lookback_days: int = 5,
        paranormal_upper_threshold: float = 2.0,  # –ë–∞—Ä > 2√óATR = –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π
        paranormal_lower_threshold: float = 0.5,  # –ë–∞—Ä < 0.5√óATR = –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π
        exhaustion_threshold: float = 0.75,       # 0.75 = 75% = –∏—Å—á–µ—Ä–ø–∞–Ω –∑–∞–ø–∞—Å —Ö–æ–¥–∞
        stop_loss_trend_percent: float = 0.10,    # 10% –æ—Ç ATR –¥–ª—è —Å—Ç–æ–ø–∞ –ø–æ —Ç—Ä–µ–Ω–¥—É
        stop_loss_counter_percent: float = 0.05   # 5% –æ—Ç ATR –¥–ª—è –∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥–∞
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        
        Args:
            lookback_days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ATR (3-5)
            paranormal_upper_threshold: –í–µ—Ä—Ö–Ω–∏–π –ø–æ—Ä–æ–≥ –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ (>2√óATR)
            paranormal_lower_threshold: –ù–∏–∂–Ω–∏–π –ø–æ—Ä–æ–≥ –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ (<0.5√óATR)
            exhaustion_threshold: –ü–æ—Ä–æ–≥ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –∑–∞–ø–∞—Å–∞ —Ö–æ–¥–∞ (0.75 = 75%)
            stop_loss_trend_percent: % –æ—Ç ATR –¥–ª—è —Å—Ç–æ–ø–∞ –ø–æ —Ç—Ä–µ–Ω–¥—É
            stop_loss_counter_percent: % –æ—Ç ATR –¥–ª—è –∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥–∞
        """
        self.lookback_days = lookback_days
        self.paranormal_upper = paranormal_upper_threshold
        self.paranormal_lower = paranormal_lower_threshold
        self.exhaustion_threshold = exhaustion_threshold
        self.stop_loss_trend_percent = stop_loss_trend_percent
        self.stop_loss_counter_percent = stop_loss_counter_percent
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "calculations_count": 0,
            "paranormal_bars_filtered": 0,
            "average_atr": 0.0,
            "average_atr_percent": 0.0
        }
        
        logger.info("üîß ATRCalculator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   ‚Ä¢ Lookback: {self.lookback_days} –¥–Ω–µ–π")
        logger.info(f"   ‚Ä¢ –ü–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: {self.paranormal_lower}√óATR < bar < {self.paranormal_upper}√óATR")
        logger.info(f"   ‚Ä¢ –ü–æ—Ä–æ–≥ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è: {self.exhaustion_threshold*100:.0f}%")
    
    # ==================== –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î ====================
    
    def calculate_atr(
        self,
        candles: List,
        levels: Optional[List[SupportResistanceLevel]] = None,
        current_price: Optional[float] = None
    ) -> ATRData:
        """
        üéØ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ ATR
        
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç:
        1. –†–∞—Å—á–µ—Ç–Ω—ã–π ATR (—Å—Ä–µ–¥–Ω–µ–µ High-Low, –∏—Å–∫–ª—é—á–∞—è –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ)
        2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π ATR (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏)
        3. –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ATR —Å–µ–≥–æ–¥–Ω—è (–∫–∞–∫ –î–û–õ–Ø 0-1)
        4. –§–ª–∞–≥ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –∑–∞–ø–∞—Å–∞ —Ö–æ–¥–∞
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π D1 (–º–∏–Ω–∏–º—É–º 3-5 –¥–Ω–µ–π)
            levels: –°–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ ATR (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ATR
            
        Returns:
            ATRData —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            - current_range_used: –¥–æ–ª—è –æ—Ç 0 –¥–æ 1 (–Ω–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã!)
            - is_exhausted: True –µ—Å–ª–∏ >= exhaustion_threshold
            
        Raises:
            ValueError: –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            self.stats["calculations_count"] += 1
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not candles or len(candles) < 3:
                raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ATR: {len(candles)}")
            
            # 1. –†–ê–°–ß–ï–¢–ù–´–ô ATR - —Å—Ä–µ–¥–Ω–µ–µ High-Low (–∏—Å–∫–ª—é—á–∞—è –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ)
            calculated_atr, last_5_ranges = self._calculate_simple_atr(candles)
            
            if calculated_atr <= 0:
                raise ValueError("–†–∞—Å—á–µ—Ç–Ω—ã–π ATR –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å <= 0")
            
            # 2. –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô ATR - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
            technical_atr = self._calculate_technical_atr(levels, current_price) if levels else calculated_atr
            
            # 3. ATR –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç —Ü–µ–Ω—ã
            if current_price:
                price = current_price
            elif candles:
                price = float(candles[-1]['close_price'])
            else:
                price = 1.0  # Fallback
            
            atr_percent = (calculated_atr / price) * 100
            
            # 4. –¢–ï–ö–£–©–ï–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï ATR (—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–π–¥–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è)
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ö—Ä–∞–Ω–∏–º –∫–∞–∫ –î–û–õ–Æ (0-1), –Ω–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            current_range_used = 0.0
            is_exhausted = False
            
            if current_price and len(candles) > 0:
                # –ë–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π –±–∞—Ä (–ø–æ—Å–ª–µ–¥–Ω–∏–π)
                today_candle = candles[-1]
                today_range = abs(float(today_candle['high_price']) - float(today_candle['low_price']))
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è = –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω / ATR (–ë–ï–ó * 100)
                if calculated_atr > 0:
                    current_range_used = today_range / calculated_atr  # 0-1, –Ω–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã!
                    
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø–æ—Ä–æ–≥–æ–º –Ω–∞–ø—Ä—è–º—É—é (–æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è - –¥–æ–ª–∏)
                    is_exhausted = current_range_used >= self.exhaustion_threshold
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_stats(calculated_atr, atr_percent)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            atr_data = ATRData(
                calculated_atr=calculated_atr,
                technical_atr=technical_atr,
                atr_percent=atr_percent,
                current_range_used=current_range_used,  # –î–æ–ª—è 0-1
                is_exhausted=is_exhausted,
                last_5_ranges=last_5_ranges,
                updated_at=datetime.now(timezone.utc)
            )
            
            logger.debug(f"‚úÖ ATR —Ä–∞—Å—Å—á–∏—Ç–∞–Ω: calculated={calculated_atr:.2f}, "
                        f"technical={technical_atr:.2f}, "
                        f"used={current_range_used:.3f} ({current_range_used*100:.1f}%), "
                        f"exhausted={is_exhausted}")
            
            return atr_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ATR: {e}")
            raise
    
    # ==================== –†–ê–°–ß–ï–¢–ù–´–ô ATR ====================
    
    def _calculate_simple_atr(self, candles: List) -> Tuple[float, List[float]]:
        """
        –†–∞—Å—á–µ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ ATR - —Å—Ä–µ–¥–Ω–µ–µ High-Low –∑–∞ N –¥–Ω–µ–π
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π
        2. –í—ã—á–∏—Å–ª—è–µ–º High-Low –¥–ª—è –∫–∞–∂–¥–æ–π
        3. –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –±–∞—Ä—ã
        4. –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π D1
            
        Returns:
            Tuple[ATR, —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –±–∞—Ä–æ–≤]
        """
        try:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
            recent_candles = candles[-self.lookback_days:] if len(candles) >= self.lookback_days else candles
            
            if len(recent_candles) < 3:
                raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π: {len(recent_candles)}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã High-Low
            ranges = []
            for candle in recent_candles:
                high = float(candle['high_price'])
                low = float(candle['low_price'])
                range_val = high - low
                
                if range_val < 0:
                    logger.warning(f"‚ö†Ô∏è –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: High={high}, Low={low}")
                    continue
                
                ranges.append(range_val)
            
            if not ranges:
                raise ValueError("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ATR")
            
            # –ü–µ—Ä–≤–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
            initial_atr = mean(ranges)
            
            # –§–ò–õ–¨–¢–†–£–ï–ú –ü–ê–†–ê–ù–û–†–ú–ê–õ–¨–ù–´–ï –ë–ê–†–´
            filtered_ranges = self._filter_paranormal_bars(ranges, initial_atr)
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç ATR –Ω–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if filtered_ranges:
                final_atr = mean(filtered_ranges)
            else:
                # –ï—Å–ª–∏ –≤—Å–µ –±–∞—Ä—ã –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–∏–∞–Ω—É
                logger.warning("‚ö†Ô∏è –í—Å–µ –±–∞—Ä—ã –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–∏–∞–Ω—É")
                final_atr = median(ranges)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            last_5_ranges = ranges[-5:] if len(ranges) >= 5 else ranges
            
            logger.debug(f"üìä –†–∞—Å—á–µ—Ç–Ω—ã–π ATR: {final_atr:.2f} (–∏–∑ {len(filtered_ranges)}/{len(ranges)} –±–∞—Ä–æ–≤)")
            
            return final_atr, last_5_ranges
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ ATR: {e}")
            raise
    
    def _filter_paranormal_bars(self, ranges: List[float], avg_atr: float) -> List[float]:
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –±–∞—Ä–æ–≤
        
        –ü–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –±–∞—Ä—ã:
        - –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ: range > 2√óATR
        - –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ: range < 0.5√óATR
        
        Args:
            ranges: –°–ø–∏—Å–æ–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
            avg_atr: –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            
        Returns:
            –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        """
        if avg_atr <= 0:
            return ranges
        
        upper_limit = avg_atr * self.paranormal_upper  # 2√óATR
        lower_limit = avg_atr * self.paranormal_lower  # 0.5√óATR
        
        filtered = []
        paranormal_count = 0
        
        for r in ranges:
            if lower_limit <= r <= upper_limit:
                filtered.append(r)
            else:
                paranormal_count += 1
                logger.debug(f"‚ö†Ô∏è –ü–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –±–∞—Ä –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω: {r:.2f} (–ª–∏–º–∏—Ç—ã: {lower_limit:.2f} - {upper_limit:.2f})")
        
        if paranormal_count > 0:
            self.stats["paranormal_bars_filtered"] += paranormal_count
            logger.info(f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {paranormal_count} –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –±–∞—Ä–æ–≤ –∏–∑ {len(ranges)}")
        
        # –ï—Å–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª–∏ –≤—Å—ë - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ
        if not filtered:
            logger.warning("‚ö†Ô∏è –í—Å–µ –±–∞—Ä—ã –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ")
            return ranges
        
        return filtered
    
    # ==================== –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô ATR ====================
    
    def _calculate_technical_atr(
        self,
        levels: List[SupportResistanceLevel],
        current_price: Optional[float] = None
    ) -> float:
        """
        –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ ATR - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–Ω–∏–∂–µ —Ü–µ–Ω—ã)
        2. –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–≤—ã—à–µ —Ü–µ–Ω—ã)
        3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π ATR = —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –Ω–∏–º–∏
        
        Args:
            levels: –°–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (–¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —É—Ä–æ–≤–Ω–µ–π)
            
        Returns:
            –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π ATR (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏)
        """
        try:
            if not levels or len(levels) < 2:
                logger.debug("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ ATR")
                return 0.0
            
            if not current_price:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É —É—Ä–æ–≤–Ω–µ–π
                prices = [level.price for level in levels]
                current_price = mean(prices)
            
            # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É (–Ω–∏–∂–µ —Ü–µ–Ω—ã)
            supports = [level for level in levels if level.price < current_price]
            nearest_support = max(supports, key=lambda l: l.price) if supports else None
            
            # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ (–≤—ã—à–µ —Ü–µ–Ω—ã)
            resistances = [level for level in levels if level.price > current_price]
            nearest_resistance = min(resistances, key=lambda l: l.price) if resistances else None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π ATR
            if nearest_support and nearest_resistance:
                technical_atr = abs(nearest_resistance.price - nearest_support.price)
                logger.debug(f"üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π ATR: {technical_atr:.2f} "
                           f"(–º–µ–∂–¥—É {nearest_support.price:.2f} –∏ {nearest_resistance.price:.2f})")
                return technical_atr
            
            elif nearest_support or nearest_resistance:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å - —É–¥–≤–∞–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                level = nearest_support or nearest_resistance
                distance = abs(level.price - current_price)
                technical_atr = distance * 2
                logger.debug(f"üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π ATR (–æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å): {technical_atr:.2f}")
                return technical_atr
            
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ ATR")
                return 0.0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ ATR: {e}")
            return 0.0
    
    # ==================== –ü–†–û–í–ï–†–ö–ò –ò –†–ê–°–ß–ï–¢–´ ====================
    
    def check_atr_exhaustion(
        self,
        candles: List,
        current_price: float,
        calculated_atr: Optional[float] = None,
        threshold: Optional[float] = None
    ) -> Tuple[bool, float]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –∑–∞–ø–∞—Å–∞ —Ö–æ–¥–∞ (–ø—Ä–∞–≤–∏–ª–æ 75-80%)
        
        –ï—Å–ª–∏ –ø—Ä–æ–π–¥–µ–Ω–æ >= 75% ATR —Å–µ–≥–æ–¥–Ω—è:
        - –ù–ï –≤—Ö–æ–¥–∏—Ç—å –ø–æ —Ç—Ä–µ–Ω–¥—É
        - –ú–æ–∂–Ω–æ –≤—Ö–æ–¥–∏—Ç—å –∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥
        - –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: –≤—Ö–æ–¥ —É –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω/–º–∞–∫—Å
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π D1
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            calculated_atr: –†–∞—Å—á–µ—Ç–Ω—ã–π ATR (–µ—Å–ª–∏ —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω)
            threshold: –ü–æ—Ä–æ–≥ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è (default: 0.75 = 75%)
            
        Returns:
            Tuple[–∏—Å—á–µ—Ä–ø–∞–Ω?, –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (0-100)]
            
        Note: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ü–†–û–¶–ï–ù–¢–´ (0-100) –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ –∫–æ–¥–∞
        """
        try:
            if threshold is None:
                threshold = self.exhaustion_threshold
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ATR –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            if calculated_atr is None:
                atr_data = self.calculate_atr(candles, current_price=current_price)
                calculated_atr = atr_data.calculated_atr
            
            # –ë–µ—Ä–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –±–∞—Ä
            if not candles:
                return False, 0.0
            
            today_candle = candles[-1]
            today_high = float(today_candle['high_price'])
            today_low = float(today_candle['low_price'])
            today_range = today_high - today_low
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ –≤—ã—á–∏—Å–ª—è–µ–º –¥–æ–ª—é, –ø–æ—Ç–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            if calculated_atr > 0:
                used_ratio = today_range / calculated_atr  # –î–æ–ª—è 0-1
                used_percent = used_ratio * 100  # –ü—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            else:
                used_ratio = 0.0
                used_percent = 0.0
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –î–û–õ–ò (–Ω–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã)
            is_exhausted = used_ratio >= threshold
            
            if is_exhausted:
                logger.info(f"‚ö†Ô∏è –ó–∞–ø–∞—Å —Ö–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω: {used_percent:.1f}% >= {threshold*100:.0f}%")
            else:
                logger.debug(f"‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω: {used_percent:.1f}%")
            
            return is_exhausted, used_percent
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è ATR: {e}")
            return False, 0.0
    
    def calculate_stop_loss_size(
        self,
        atr: float,
        is_trend_trade: bool = True,
        custom_percent: Optional[float] = None
    ) -> float:
        """
        –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ Stop Loss –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
        
        –ü—Ä–∞–≤–∏–ª–∞ –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
        - –ü–æ —Ç—Ä–µ–Ω–¥—É: Stop = 0.10 √ó ATR (10%)
        - –ö–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥: Stop = 0.05 √ó ATR (5%)
        
        Args:
            atr: –ó–Ω–∞—á–µ–Ω–∏–µ ATR
            is_trend_trade: True –µ—Å–ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ —Ç—Ä–µ–Ω–¥—É
            custom_percent: –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ)
            
        Returns:
            –†–∞–∑–º–µ—Ä —Å—Ç–æ–ø–∞
        """
        try:
            if custom_percent is not None:
                percent = custom_percent
            elif is_trend_trade:
                percent = self.stop_loss_trend_percent
            else:
                percent = self.stop_loss_counter_percent
            
            stop_size = atr * percent
            
            logger.debug(f"üìè Stop Loss: {stop_size:.2f} ({percent*100}% –æ—Ç ATR={atr:.2f})")
            
            return stop_size
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ Stop Loss: {e}")
            return 0.0
    
    def get_remaining_atr(self, atr_data: ATRData) -> float:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–π—Å—è –∑–∞–ø–∞—Å —Ö–æ–¥–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
        
        Args:
            atr_data: –î–∞–Ω–Ω—ã–µ ATR (current_range_used –∫–∞–∫ –¥–æ–ª—è 0-1)
            
        Returns:
            –û—Å—Ç–∞–≤—à–∏–π—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç (0-100)
        """
        # ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ª—é –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        remaining_percent = max(0.0, (1.0 - atr_data.current_range_used) * 100)
        return remaining_percent
    
    def is_suitable_for_trend_trade(self, atr_data: ATRData, min_remaining: float = 25.0) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ —Ç—Ä–µ–Ω–¥—É
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        - ATR –Ω–µ –∏—Å—á–µ—Ä–ø–∞–Ω (< 75%)
        - –û—Å—Ç–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 25% –∑–∞–ø–∞—Å–∞ —Ö–æ–¥–∞
        
        Args:
            atr_data: –î–∞–Ω–Ω—ã–µ ATR
            min_remaining: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100)
            
        Returns:
            True –µ—Å–ª–∏ –º–æ–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –ø–æ —Ç—Ä–µ–Ω–¥—É
        """
        if atr_data.is_exhausted:
            return False
        
        remaining = self.get_remaining_atr(atr_data)
        suitable = remaining >= min_remaining
        
        if not suitable:
            logger.debug(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø–∞—Å–∞ —Ö–æ–¥–∞ –¥–ª—è —Ç—Ä–µ–Ω–¥–∞: {remaining:.1f}% < {min_remaining}%")
        
        return suitable
    
    def is_suitable_for_counter_trade(self, atr_data: ATRData) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        
        –ö–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥ –º–æ–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –¥–∞–∂–µ –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–Ω–æ–º ATR.
        –ù–æ –Ω—É–∂–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å.
        
        Args:
            atr_data: –î–∞–Ω–Ω—ã–µ ATR
            
        Returns:
            True –µ—Å–ª–∏ –º–æ–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥
        """
        # –ö–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥ –º–æ–∂–Ω–æ –≤—Å–µ–≥–¥–∞ (–¥–∞–∂–µ –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–Ω–æ–º ATR)
        # –ù–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ATR –Ω–µ –Ω—É–ª–µ–≤–æ–π
        return atr_data.calculated_atr > 0
    
    # ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================
    
    def _update_stats(self, atr: float, atr_percent: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        count = self.stats["calculations_count"]
        
        # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
        prev_avg = self.stats["average_atr"]
        self.stats["average_atr"] = (prev_avg * (count - 1) + atr) / count
        
        prev_avg_pct = self.stats["average_atr_percent"]
        self.stats["average_atr_percent"] = (prev_avg_pct * (count - 1) + atr_percent) / count
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
        return {
            **self.stats,
            "lookback_days": self.lookback_days,
            "paranormal_thresholds": {
                "upper": self.paranormal_upper,
                "lower": self.paranormal_lower
            },
            "exhaustion_threshold": self.exhaustion_threshold,
            "stop_loss_percents": {
                "trend": self.stop_loss_trend_percent,
                "counter": self.stop_loss_counter_percent
            }
        }
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats = {
            "calculations_count": 0,
            "paranormal_bars_filtered": 0,
            "average_atr": 0.0,
            "average_atr_percent": 0.0
        }
        logger.info("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ATRCalculator —Å–±—Ä–æ—à–µ–Ω–∞")
    
    def __repr__(self) -> str:
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return (f"ATRCalculator(lookback={self.lookback_days}, "
                f"calculations={self.stats['calculations_count']}, "
                f"avg_atr={self.stats['average_atr']:.2f})")
    
    def __str__(self) -> str:
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
        stats = self.get_stats()
        return (f"ATR Calculator:\n"
                f"  Calculations: {stats['calculations_count']}\n"
                f"  Average ATR: {stats['average_atr']:.2f} ({stats['average_atr_percent']:.2f}%)\n"
                f"  Paranormal bars filtered: {stats['paranormal_bars_filtered']}\n"
                f"  Lookback: {stats['lookback_days']} days\n"
                f"  Exhaustion threshold: {stats['exhaustion_threshold']*100:.0f}%")


# Export
__all__ = ["ATRCalculator"]

logger.info("‚úÖ ATR Calculator module loaded (v1.0.1 - FIXED: current_range_used as ratio)")
