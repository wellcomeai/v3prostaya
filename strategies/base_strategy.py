"""
Simplified Base Strategy

–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –±–µ–∑ MarketDataSnapshot.
–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–ø—Ä—è–º—É—é —Å Repository –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π.

–ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è v2.0:
- ‚ùå –£–±—Ä–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç MarketDataSnapshot
- ‚úÖ –ü—Ä—è–º–∞—è —Ä–∞–±–æ—Ç–∞ —Å Repository (–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π)
- ‚úÖ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π TechnicalAnalysisContextManager
- ‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ analyze() –≤–º–µ—Å—Ç–æ process_market_data()
- ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã (cooldown, rate limiting, strength)

Author: Trading Bot Team
Version: 2.0.0 - Simplified Architecture
"""

import logging
import asyncio
from abc import ABC, abstractmethod
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Union
from enum import Enum
from dataclasses import dataclass, field
import traceback

logger = logging.getLogger(__name__)


# ==================== ENUMS ====================

class SignalType(Enum):
    """–¢–∏–ø—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    BUY = "BUY"
    SELL = "SELL"
    NEUTRAL = "NEUTRAL"
    STRONG_BUY = "STRONG_BUY"
    STRONG_SELL = "STRONG_SELL"


class SignalStrength(Enum):
    """–°–∏–ª–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    VERY_WEAK = 0.1
    WEAK = 0.3
    MODERATE = 0.5
    STRONG = 0.7
    VERY_STRONG = 0.9


class ConfidenceLevel(Enum):
    """–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–∏–≥–Ω–∞–ª–µ"""
    LOW = "low"           # 0-0.3
    MEDIUM = "medium"     # 0.3-0.7
    HIGH = "high"         # 0.7-1.0


# ==================== TRADING SIGNAL ====================

@dataclass
class TradingSignal:
    """
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    
    –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–≥–Ω–∞–ª–µ:
    - –¢–∏–ø –∏ —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞
    - –¶–µ–Ω–∞ –∏ –≤—Ä–µ–º—è
    - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (reasons)
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ (SL/TP)
    """
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    signal_type: SignalType
    strength: float  # 0.0 - 1.0
    confidence: float  # 0.0 - 1.0
    price: float
    timestamp: datetime
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    strategy_name: str
    symbol: str
    
    # –ê–Ω–∞–ª–∏–∑ –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
    reasons: List[str] = field(default_factory=list)
    technical_indicators: Dict[str, Any] = field(default_factory=dict)
    market_conditions: Dict[str, Any] = field(default_factory=dict)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    volume_24h: float = 0.0
    price_change_1m: float = 0.0
    price_change_5m: float = 0.0
    price_change_24h: float = 0.0
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∏—Å–∫–∞–º–∏
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    position_size_recommendation: float = 0.0  # –ö–∞–∫ % –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞
    
    # –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏—è
    expires_at: Optional[datetime] = None
    is_valid: bool = True
    
    def __post_init__(self):
        """–ü–æ—Å—Ç-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
        self.strength = max(0.0, min(1.0, self.strength))
        self.confidence = max(0.0, min(1.0, self.confidence))
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫—Å–ø–∏—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
        if self.expires_at is None:
            self.expires_at = self.timestamp + timedelta(minutes=5)
    
    @property
    def strength_level(self) -> SignalStrength:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞"""
        if self.strength >= 0.9:
            return SignalStrength.VERY_STRONG
        elif self.strength >= 0.7:
            return SignalStrength.STRONG
        elif self.strength >= 0.5:
            return SignalStrength.MODERATE
        elif self.strength >= 0.3:
            return SignalStrength.WEAK
        else:
            return SignalStrength.VERY_WEAK
    
    @property
    def confidence_level(self) -> ConfidenceLevel:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        if self.confidence >= 0.7:
            return ConfidenceLevel.HIGH
        elif self.confidence >= 0.3:
            return ConfidenceLevel.MEDIUM
        else:
            return ConfidenceLevel.LOW
    
    @property
    def is_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        if self.expires_at is None:
            return False
        return datetime.now() > self.expires_at
    
    @property
    def quality_score(self) -> float:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞ (0-1)"""
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–ª—É, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—á–∏–Ω
        reason_score = min(len(self.reasons) / 3.0, 1.0)  # –î–æ 3 –ø—Ä–∏—á–∏–Ω = 1.0
        return (self.strength * 0.4 + self.confidence * 0.4 + reason_score * 0.2)
    
    def add_reason(self, reason: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏—á–∏–Ω—É –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞"""
        if reason and reason not in self.reasons:
            self.reasons.append(reason)
    
    def add_technical_indicator(self, name: str, value: Any, interpretation: str = ""):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä"""
        self.technical_indicators[name] = {
            "value": value,
            "interpretation": interpretation,
            "timestamp": datetime.now().isoformat()
        }
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return {
            "signal_type": self.signal_type.value,
            "strength": self.strength,
            "strength_level": self.strength_level.value,
            "confidence": self.confidence,
            "confidence_level": self.confidence_level.value,
            "price": self.price,
            "timestamp": self.timestamp.isoformat(),
            "strategy_name": self.strategy_name,
            "symbol": self.symbol,
            "reasons": self.reasons,
            "technical_indicators": self.technical_indicators,
            "market_conditions": self.market_conditions,
            "volume_24h": self.volume_24h,
            "price_change_1m": self.price_change_1m,
            "price_change_5m": self.price_change_5m,
            "price_change_24h": self.price_change_24h,
            "stop_loss": self.stop_loss,
            "take_profit": self.take_profit,
            "position_size_recommendation": self.position_size_recommendation,
            "expires_at": self.expires_at.isoformat() if self.expires_at else None,
            "is_valid": self.is_valid,
            "is_expired": self.is_expired,
            "quality_score": self.quality_score
        }
    
    def __str__(self):
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞"""
        return (f"{self.signal_type.value} {self.symbol} @ ${self.price:,.2f} "
                f"[Strength: {self.strength:.2f}, Confidence: {self.confidence:.2f}] "
                f"by {self.strategy_name}")


# ==================== BASE STRATEGY ====================

class BaseStrategy(ABC):
    """
    üöÄ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è v2.0
    
    –ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
    - ‚ùå –ù–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç MarketDataSnapshot
    - ‚úÖ –ü—Ä—è–º–∞—è —Ä–∞–±–æ—Ç–∞ —Å Repository (–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –∏–∑ –ë–î)
    - ‚úÖ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π TechnicalAnalysisContextManager
    - ‚úÖ –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ analyze() - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–º–∞ –ø–æ–ª—É—á–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    –ß—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å:
    - ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ (strength, cooldown, rate limiting)
    - ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ (SL/TP)
    - ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    
    Example:
        ```python
        class MyStrategy(BaseStrategy):
            async def analyze(self) -> Optional[TradingSignal]:
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –∏–∑ –ë–î
                candles_1m = await self.repository.get_recent_candles(
                    symbol=self.symbol,
                    interval="1m",
                    limit=100
                )
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                if some_condition:
                    return self.create_signal(
                        signal_type=SignalType.BUY,
                        strength=0.8,
                        confidence=0.7,
                        current_price=candles_1m[-1]['close_price'],
                        reasons=["Reason 1", "Reason 2"]
                    )
                
                return None
        ```
    """
    
    def __init__(
        self,
        name: str,
        symbol: str,
        repository,  # MarketDataRepository
        ta_context_manager=None,  # TechnicalAnalysisContextManager (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        min_signal_strength: float = 0.5,
        signal_cooldown_minutes: int = 5,
        max_signals_per_hour: int = 12,
        enable_risk_management: bool = True
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            name: –ò–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (BTCUSDT, ETHUSDT, etc)
            repository: MarketDataRepository –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π
            ta_context_manager: TechnicalAnalysisContextManager (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            min_signal_strength: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            signal_cooldown_minutes: –ú–∏–Ω—É—Ç—ã –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
            max_signals_per_hour: –ú–∞–∫—Å–∏–º—É–º —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —á–∞—Å
            enable_risk_management: –í–∫–ª—é—á–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
        """
        self.name = name
        self.symbol = symbol.upper()
        self.repository = repository  # ‚úÖ –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ë–î
        self.ta_context_manager = ta_context_manager  # ‚úÖ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π TA
        
        self.min_signal_strength = min_signal_strength
        self.signal_cooldown = timedelta(minutes=signal_cooldown_minutes)
        self.max_signals_per_hour = max_signals_per_hour
        self.enable_risk_management = enable_risk_management
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç–æ–π
        self.signal_history: List[TradingSignal] = []
        self.last_signals_by_type: Dict[SignalType, datetime] = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.stats = {
            "signals_generated": 0,
            "signals_sent": 0,
            "signals_filtered_by_strength": 0,
            "signals_filtered_by_cooldown": 0,
            "signals_filtered_by_rate_limit": 0,
            "analysis_calls": 0,
            "analysis_errors": 0,
            "start_time": datetime.now(),
            "last_analysis_time": None,
            "last_signal_time": None,
            "average_signal_strength": 0.0,
            "average_signal_confidence": 0.0
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_enabled = True
        self.debug_mode = False
        
        logger.info(f"üß† –°—Ç—Ä–∞—Ç–µ–≥–∏—è '{self.name}' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {self.symbol}")
        logger.info(f"   ‚Ä¢ Repository: {'‚úì' if repository else '‚úó'}")
        logger.info(f"   ‚Ä¢ TechnicalAnalysis: {'‚úì' if ta_context_manager else '‚úó'}")
        logger.info(f"   ‚Ä¢ –ú–∏–Ω. —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {self.min_signal_strength}")
        logger.info(f"   ‚Ä¢ Cooldown: {signal_cooldown_minutes} –º–∏–Ω")
        logger.info(f"   ‚Ä¢ –ú–∞–∫—Å. —Å–∏–≥–Ω–∞–ª–æ–≤/—á–∞—Å: {max_signals_per_hour}")
    
    @abstractmethod
    async def analyze(self) -> Optional[TradingSignal]:
        """
        üî• –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î - –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
        
        –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–º–∞ –ø–æ–ª—É—á–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î —á–µ—Ä–µ–∑ self.repository
        –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –∏–ª–∏ None.
        
        Returns:
            TradingSignal –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª, –∏–Ω–∞—á–µ None
            
        Example:
            ```python
            async def analyze(self) -> Optional[TradingSignal]:
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏
                candles_1m = await self.repository.get_recent_candles(
                    symbol=self.symbol,
                    interval="1m",
                    limit=100
                )
                
                if not candles_1m:
                    return None
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                current_price = candles_1m[-1]['close_price']
                price_change = self._calculate_price_change(candles_1m)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
                if price_change > 2.0:
                    return self.create_signal(
                        signal_type=SignalType.BUY,
                        strength=0.8,
                        confidence=0.7,
                        current_price=current_price,
                        reasons=[f"–†–æ—Å—Ç {price_change:.2f}% –∑–∞ –º–∏–Ω—É—Ç—É"]
                    )
                
                return None
            ```
        """
        pass
    
    async def run_analysis(self) -> Optional[TradingSignal]:
        """
        üéØ –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª:
        1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–µ–Ω
        2. –í—ã–∑—ã–≤–∞–µ—Ç analyze() –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        3. –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª (strength, cooldown, rate limiting)
        4. –ü—Ä–∏–º–µ–Ω—è–µ—Ç risk management
        5. –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        
        Returns:
            –ì–æ—Ç–æ–≤—ã–π –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ TradingSignal –∏–ª–∏ None
        """
        try:
            self.stats["analysis_calls"] += 1
            self.stats["last_analysis_time"] = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–Ω–∞–ª–∏–∑
            if not self.analysis_enabled:
                if self.debug_mode:
                    logger.debug(f"üìµ –ê–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è {self.name}")
                return None
            
            # –í—ã–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            raw_signal = await self.analyze()
            
            if raw_signal is None:
                return None
            
            self.stats["signals_generated"] += 1
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            if not self._should_send_signal(raw_signal):
                return None
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if self.enable_risk_management:
                self._apply_risk_management(raw_signal)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._add_signal_to_history(raw_signal)
            self._update_signal_stats(raw_signal)
            
            self.stats["signals_sent"] += 1
            self.stats["last_signal_time"] = datetime.now()
            
            logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω {self.name}: {raw_signal}")
            
            return raw_signal
            
        except Exception as e:
            self.stats["analysis_errors"] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_analysis –¥–ª—è {self.name}: {e}")
            logger.error(f"Stack trace: {traceback.format_exc()}")
            return None
    
    def _should_send_signal(self, signal: TradingSignal) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª
        
        –§–∏–ª—å—Ç—Ä—ã:
        1. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞
        2. Cooldown –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
        3. Rate limiting (–º–∞–∫—Å. —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —á–∞—Å)
        4. –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
            if signal.strength < self.min_signal_strength:
                self.stats["signals_filtered_by_strength"] += 1
                if self.debug_mode:
                    logger.debug(f"üîá –°–∏–≥–Ω–∞–ª –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –ø–æ —Å–∏–ª–µ: {signal.strength:.2f} < {self.min_signal_strength}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
            if not self._check_cooldown(signal.signal_type):
                self.stats["signals_filtered_by_cooldown"] += 1
                if self.debug_mode:
                    logger.debug(f"‚è∞ –°–∏–≥–Ω–∞–ª –≤ cooldown: {signal.signal_type.value}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
            if not self._check_rate_limit():
                self.stats["signals_filtered_by_rate_limit"] += 1
                if self.debug_mode:
                    logger.debug(f"üö¶ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —á–∞—Å")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
            if not signal.is_valid or signal.is_expired:
                if self.debug_mode:
                    logger.debug(f"‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False
    
    def _check_cooldown(self, signal_type: SignalType) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        last_signal_time = self.last_signals_by_type.get(signal_type)
        
        if last_signal_time is None:
            return True
        
        time_since_last = datetime.now() - last_signal_time
        return time_since_last >= self.signal_cooldown
    
    def _check_rate_limit(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —á–∞—Å"""
        if self.max_signals_per_hour <= 0:
            return True  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        
        one_hour_ago = datetime.now() - timedelta(hours=1)
        recent_signals = [
            s for s in self.signal_history 
            if s.timestamp > one_hour_ago
        ]
        
        return len(recent_signals) < self.max_signals_per_hour
    
    def _apply_risk_management(self, signal: TradingSignal):
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
        
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç:
        - Stop Loss (3% –æ—Ç —Ü–µ–Ω—ã)
        - Take Profit (5% –æ—Ç —Ü–µ–Ω—ã)
        - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        """
        try:
            current_price = signal.price
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
            if signal.signal_type in [SignalType.BUY, SignalType.STRONG_BUY]:
                # Stop loss –Ω–∞ 3% –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
                signal.stop_loss = current_price * 0.97
                # Take profit –Ω–∞ 5% –≤—ã—à–µ
                signal.take_profit = current_price * 1.05
                
            elif signal.signal_type in [SignalType.SELL, SignalType.STRONG_SELL]:
                # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π
                signal.stop_loss = current_price * 1.03
                signal.take_profit = current_price * 0.95
            
            # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            base_position_size = 0.02  # 2% –±–∞–∑–æ–≤–æ
            confidence_factor = signal.confidence
            strength_factor = signal.strength
            
            signal.position_size_recommendation = (
                base_position_size * 
                confidence_factor * 
                strength_factor
            )
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
            signal.position_size_recommendation = min(
                signal.position_size_recommendation, 
                0.05  # –ú–∞–∫—Å 5%
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è risk management: {e}")
    
    def _add_signal_to_history(self, signal: TradingSignal):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.signal_history.append(signal)
        self.last_signals_by_type[signal.signal_type] = signal.timestamp
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        max_history = 100
        if len(self.signal_history) > max_history:
            self.signal_history = self.signal_history[-max_history:]
    
    def _update_signal_stats(self, signal: TradingSignal):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        recent_signals = self.signal_history[-20:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–∏–≥–Ω–∞–ª–æ–≤
        
        if recent_signals:
            self.stats["average_signal_strength"] = sum(s.strength for s in recent_signals) / len(recent_signals)
            self.stats["average_signal_confidence"] = sum(s.confidence for s in recent_signals) / len(recent_signals)
    
    def create_signal(
        self,
        signal_type: SignalType,
        strength: float,
        confidence: float,
        current_price: float,
        reasons: List[str] = None,
        technical_indicators: Dict[str, Any] = None,
        market_conditions: Dict[str, Any] = None
    ) -> TradingSignal:
        """
        –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        
        Args:
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ (BUY, SELL, etc)
            strength: –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ (0-1)
            confidence: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (0-1)
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            reasons: –°–ø–∏—Å–æ–∫ –ø—Ä–∏—á–∏–Ω
            technical_indicators: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            market_conditions: –£—Å–ª–æ–≤–∏—è —Ä—ã–Ω–∫–∞
            
        Returns:
            –ù–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        """
        return TradingSignal(
            signal_type=signal_type,
            strength=strength,
            confidence=confidence,
            price=current_price,
            timestamp=datetime.now(),
            strategy_name=self.name,
            symbol=self.symbol,
            reasons=reasons or [],
            technical_indicators=technical_indicators or {},
            market_conditions=market_conditions or {}
        )
    
    # ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================
    
    async def get_recent_candles(
        self,
        interval: str,
        limit: int = 100
    ) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ –∏–∑ –ë–î
        
        Args:
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª (1m, 5m, 15m, 1h, 4h, 1d)
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π (dict)
        """
        try:
            candles = await self.repository.get_recent_candles(
                symbol=self.symbol,
                interval=interval,
                limit=limit
            )
            return candles if candles else []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π {interval}: {e}")
            return []
    
    async def get_technical_analysis_context(self):
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        
        Returns:
            TechnicalAnalysisContext –∏–ª–∏ None
        """
        if not self.ta_context_manager:
            return None
        
        try:
            context = await self.ta_context_manager.get_context(self.symbol)
            return context
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TA –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return None
    
    def calculate_price_change(self, candles: List[Dict], periods: int = 1) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ N –ø–µ—Ä–∏–æ–¥–æ–≤
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            periods: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –Ω–∞–∑–∞–¥
            
        Returns:
            –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        """
        if len(candles) < periods + 1:
            return 0.0
        
        try:
            current_price = float(candles[-1]['close_price'])
            old_price = float(candles[-(periods + 1)]['close_price'])
            
            return ((current_price - old_price) / old_price) * 100
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
            return 0.0
    
    def calculate_volume_change(self, candles: List[Dict], periods: int = 10) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
        
        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            periods: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ
            
        Returns:
            –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
        """
        if len(candles) < periods + 1:
            return 0.0
        
        try:
            recent_candles = candles[-periods:]
            avg_volume = sum(float(c['volume']) for c in recent_candles) / len(recent_candles)
            
            current_volume = float(candles[-1]['volume'])
            
            if avg_volume == 0:
                return 0.0
            
            return ((current_volume - avg_volume) / avg_volume) * 100
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–º–∞: {e}")
            return 0.0
    
    # ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï ====================
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        uptime = datetime.now() - self.stats["start_time"]
        
        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        total_signals = self.stats["signals_generated"]
        sent_signals = self.stats["signals_sent"]
        filter_rate = ((total_signals - sent_signals) / total_signals * 100) if total_signals > 0 else 0
        
        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        analysis_calls = self.stats["analysis_calls"]
        errors = self.stats["analysis_errors"]
        success_rate = ((analysis_calls - errors) / analysis_calls * 100) if analysis_calls > 0 else 100
        
        return {
            **self.stats,
            "uptime_seconds": uptime.total_seconds(),
            "uptime_formatted": str(uptime).split('.')[0],
            "signals_filter_rate": round(filter_rate, 2),
            "analysis_success_rate": round(success_rate, 2),
            "signals_per_hour": round(sent_signals / (uptime.total_seconds() / 3600), 2) if uptime.total_seconds() > 0 else 0,
            "recent_signals_count": len([s for s in self.signal_history if (datetime.now() - s.timestamp).total_seconds() < 3600])
        }
    
    def get_recent_signals(self, hours: int = 1) -> List[TradingSignal]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã"""
        cutoff_time = datetime.now() - timedelta(hours=hours)
        return [s for s in self.signal_history if s.timestamp > cutoff_time]
    
    def enable_debug_mode(self, enabled: bool = True):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏"""
        self.debug_mode = enabled
        level = "–≤–∫–ª—é—á–µ–Ω" if enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
        logger.info(f"üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ {level} –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {self.name}")
    
    def enable_analysis(self, enabled: bool = True):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        self.analysis_enabled = enabled
        status = "–≤–∫–ª—é—á–µ–Ω" if enabled else "–æ—Ç–∫–ª—é—á–µ–Ω"
        logger.info(f"üß† –ê–Ω–∞–ª–∏–∑ {status} –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {self.name}")
    
    def reset_stats(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        logger.info(f"üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {self.name}")
        self.stats = {
            "signals_generated": 0,
            "signals_sent": 0,
            "signals_filtered_by_strength": 0,
            "signals_filtered_by_cooldown": 0,
            "signals_filtered_by_rate_limit": 0,
            "analysis_calls": 0,
            "analysis_errors": 0,
            "start_time": datetime.now(),
            "last_analysis_time": None,
            "last_signal_time": None,
            "average_signal_strength": 0.0,
            "average_signal_confidence": 0.0
        }
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        self.signal_history.clear()
        self.last_signals_by_type.clear()
    
    def __str__(self):
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        stats = self.get_stats()
        return (f"{self.name}(symbol={self.symbol}, "
                f"signals_sent={stats['signals_sent']}, "
                f"success_rate={stats['analysis_success_rate']:.1f}%, "
                f"enabled={self.analysis_enabled})")
    
    def __repr__(self):
        """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return (f"{self.__class__.__name__}(name='{self.name}', symbol='{self.symbol}', "
                f"min_strength={self.min_signal_strength}, cooldown={self.signal_cooldown}, "
                f"enabled={self.analysis_enabled}, debug={self.debug_mode})")


# ==================== EXPORTS ====================

__all__ = [
    "BaseStrategy",
    "TradingSignal",
    "SignalType",
    "SignalStrength",
    "ConfidenceLevel"
]

logger.info("‚úÖ Simplified BaseStrategy v2.0 loaded - Direct Repository Access")
