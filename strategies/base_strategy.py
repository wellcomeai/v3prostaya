import logging
import asyncio
from abc import ABC, abstractmethod
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Union
from enum import Enum
from dataclasses import dataclass, field
import traceback

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏–∑ market_data –º–æ–¥—É–ª—è
from market_data import MarketDataSnapshot

logger = logging.getLogger(__name__)


class SignalType(Enum):
    """–¢–∏–ø—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    BUY = "BUY"
    SELL = "SELL"
    NEUTRAL = "NEUTRAL"
    STRONG_BUY = "STRONG_BUY"
    STRONG_SELL = "STRONG_SELL"


class SignalStrength(Enum):
    """–°–∏–ª–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    VERY_WEAK = 0.1
    WEAK = 0.3
    MODERATE = 0.5
    STRONG = 0.7
    VERY_STRONG = 0.9


class ConfidenceLevel(Enum):
    """–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–∏–≥–Ω–∞–ª–µ"""
    LOW = "low"           # 0-0.3
    MEDIUM = "medium"     # 0.3-0.7
    HIGH = "high"         # 0.7-1.0


@dataclass
class TradingSignal:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    signal_type: SignalType
    strength: float  # 0.0 - 1.0
    confidence: float  # 0.0 - 1.0
    price: float
    timestamp: datetime
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    strategy_name: str
    symbol: str
    
    # –ê–Ω–∞–ª–∏–∑ –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
    reasons: List[str] = field(default_factory=list)
    technical_indicators: Dict[str, Any] = field(default_factory=dict)
    market_conditions: Dict[str, Any] = field(default_factory=dict)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    volume_24h: float = 0.0
    price_change_1m: float = 0.0
    price_change_5m: float = 0.0
    price_change_24h: float = 0.0
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∏—Å–∫–∞–º–∏
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    position_size_recommendation: float = 0.0  # –ö–∞–∫ % –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞
    
    # –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏—è
    expires_at: Optional[datetime] = None
    is_valid: bool = True
    
    def __post_init__(self):
        """–ü–æ—Å—Ç-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
        self.strength = max(0.0, min(1.0, self.strength))
        self.confidence = max(0.0, min(1.0, self.confidence))
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫—Å–ø–∏—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
        if self.expires_at is None:
            self.expires_at = self.timestamp + timedelta(minutes=5)
    
    @property
    def strength_level(self) -> SignalStrength:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞"""
        if self.strength >= 0.9:
            return SignalStrength.VERY_STRONG
        elif self.strength >= 0.7:
            return SignalStrength.STRONG
        elif self.strength >= 0.5:
            return SignalStrength.MODERATE
        elif self.strength >= 0.3:
            return SignalStrength.WEAK
        else:
            return SignalStrength.VERY_WEAK
    
    @property
    def confidence_level(self) -> ConfidenceLevel:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        if self.confidence >= 0.7:
            return ConfidenceLevel.HIGH
        elif self.confidence >= 0.3:
            return ConfidenceLevel.MEDIUM
        else:
            return ConfidenceLevel.LOW
    
    @property
    def is_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        if self.expires_at is None:
            return False
        return datetime.now() > self.expires_at
    
    @property
    def quality_score(self) -> float:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞ (0-1)"""
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–ª—É, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—á–∏–Ω
        reason_score = min(len(self.reasons) / 3.0, 1.0)  # –î–æ 3 –ø—Ä–∏—á–∏–Ω = 1.0
        return (self.strength * 0.4 + self.confidence * 0.4 + reason_score * 0.2)
    
    def add_reason(self, reason: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏—á–∏–Ω—É –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞"""
        if reason and reason not in self.reasons:
            self.reasons.append(reason)
    
    def add_technical_indicator(self, name: str, value: Any, interpretation: str = ""):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä"""
        self.technical_indicators[name] = {
            "value": value,
            "interpretation": interpretation,
            "timestamp": datetime.now().isoformat()
        }
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return {
            "signal_type": self.signal_type.value,
            "strength": self.strength,
            "strength_level": self.strength_level.value,
            "confidence": self.confidence,
            "confidence_level": self.confidence_level.value,
            "price": self.price,
            "timestamp": self.timestamp.isoformat(),
            "strategy_name": self.strategy_name,
            "symbol": self.symbol,
            "reasons": self.reasons,
            "technical_indicators": self.technical_indicators,
            "market_conditions": self.market_conditions,
            "volume_24h": self.volume_24h,
            "price_change_1m": self.price_change_1m,
            "price_change_5m": self.price_change_5m,
            "price_change_24h": self.price_change_24h,
            "stop_loss": self.stop_loss,
            "take_profit": self.take_profit,
            "position_size_recommendation": self.position_size_recommendation,
            "expires_at": self.expires_at.isoformat() if self.expires_at else None,
            "is_valid": self.is_valid,
            "is_expired": self.is_expired,
            "quality_score": self.quality_score
        }
    
    def __str__(self):
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞"""
        return (f"{self.signal_type.value} {self.symbol} @ ${self.price:,.2f} "
                f"[Strength: {self.strength:.2f}, Confidence: {self.confidence:.2f}] "
                f"by {self.strategy_name}")


class BaseStrategy(ABC):
    """
    –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ cooldown –ø–µ—Ä–∏–æ–¥–∞–º–∏
    - –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    """
    
    def __init__(self, name: str, symbol: str = "BTCUSDT", 
                 min_signal_strength: float = 0.5, 
                 signal_cooldown_minutes: int = 5,
                 max_signals_per_hour: int = 12,
                 enable_risk_management: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            name: –ò–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            min_signal_strength: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            signal_cooldown_minutes: –ú–∏–Ω—É—Ç—ã –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
            max_signals_per_hour: –ú–∞–∫—Å–∏–º—É–º —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —á–∞—Å
            enable_risk_management: –í–∫–ª—é—á–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
        """
        self.name = name
        self.symbol = symbol
        self.min_signal_strength = min_signal_strength
        self.signal_cooldown = timedelta(minutes=signal_cooldown_minutes)
        self.max_signals_per_hour = max_signals_per_hour
        self.enable_risk_management = enable_risk_management
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç–æ–π
        self.signal_history: List[TradingSignal] = []
        self.last_signals_by_type: Dict[SignalType, datetime] = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.stats = {
            "signals_generated": 0,
            "signals_sent": 0,
            "signals_filtered_by_strength": 0,
            "signals_filtered_by_cooldown": 0,
            "signals_filtered_by_rate_limit": 0,
            "analysis_calls": 0,
            "analysis_errors": 0,
            "start_time": datetime.now(),
            "last_analysis_time": None,
            "last_signal_time": None,
            "average_signal_strength": 0.0,
            "average_signal_confidence": 0.0
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_enabled = True
        self.debug_mode = False
        
        logger.info(f"üß† –°—Ç—Ä–∞—Ç–µ–≥–∏—è '{self.name}' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {self.symbol}")
        logger.info(f"   ‚Ä¢ –ú–∏–Ω. —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {self.min_signal_strength}")
        logger.info(f"   ‚Ä¢ Cooldown: {signal_cooldown_minutes} –º–∏–Ω")
        logger.info(f"   ‚Ä¢ –ú–∞–∫—Å. —Å–∏–≥–Ω–∞–ª–æ–≤/—á–∞—Å: {max_signals_per_hour}")
    
    @abstractmethod
    async def analyze_market_data(self, market_data: MarketDataSnapshot) -> Optional[TradingSignal]:
        """
        –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –∫–∞–∂–¥–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
        
        Args:
            market_data: –°–Ω–∏–º–æ–∫ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –∏–ª–∏ None –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª–∞ –Ω–µ—Ç
        """
        pass
    
    async def process_market_data(self, market_data: MarketDataSnapshot) -> Optional[TradingSignal]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª:
        1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        2. –í—ã–∑–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        Args:
            market_data: –°–Ω–∏–º–æ–∫ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            –ì–æ—Ç–æ–≤—ã–π –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –∏–ª–∏ None
        """
        try:
            self.stats["analysis_calls"] += 1
            self.stats["last_analysis_time"] = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–Ω–∞–ª–∏–∑
            if not self.analysis_enabled:
                if self.debug_mode:
                    logger.debug(f"üìµ –ê–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {self.name}")
                return None
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if not self._validate_market_data(market_data):
                if self.debug_mode:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {self.name}")
                return None
            
            # –í—ã–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            raw_signal = await self.analyze_market_data(market_data)
            
            if raw_signal is None:
                return None
            
            self.stats["signals_generated"] += 1
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            if not await self._should_send_signal(raw_signal):
                return None
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if self.enable_risk_management:
                self._apply_risk_management(raw_signal, market_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._add_signal_to_history(raw_signal)
            self._update_signal_stats(raw_signal)
            
            self.stats["signals_sent"] += 1
            self.stats["last_signal_time"] = datetime.now()
            
            logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω {self.name}: {raw_signal}")
            
            return raw_signal
            
        except Exception as e:
            self.stats["analysis_errors"] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_market_data –¥–ª—è {self.name}: {e}")
            logger.error(f"Stack trace: {traceback.format_exc()}")
            return None
    
    @abstractmethod
    async def analyze_market_opinion(
        self,
        market_snapshot,
        ta_context
    ) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ë–ï–ó –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä—ã–Ω–∫–∞.
        
        Args:
            market_snapshot: MarketDataSnapshot —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            ta_context: TechnicalAnalysisContext —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º
            
        Returns:
            Dict —Å –ø–æ–ª—è–º–∏:
                - opinion: str ("BULLISH", "BEARISH", "NEUTRAL")
                - confidence: float (0.0 - 1.0)
                - reasoning: str (–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ)
                - signal_strength: float (0.0 - 1.0)
                - key_points: List[str] (–∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã)
        
        Example:
            {
                "opinion": "BULLISH",
                "confidence": 0.75,
                "reasoning": "–°–∏–ª—å–Ω—ã–π –∏–º–ø—É–ª—å—Å —Ä–æ—Å—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –æ–±—ä–µ–º–æ–≤",
                "signal_strength": 0.8,
                "key_points": [
                    "–†–æ—Å—Ç +2.5% –∑–∞ 5 –º–∏–Ω—É—Ç",
                    "–û–±—ä–µ–º –Ω–∞ 30% –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ",
                    "–ü—Ä–æ–±–æ–π –∫–ª—é—á–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è $50,000"
                ]
            }
        """
        pass
    
    def _validate_market_data(self, market_data: MarketDataSnapshot) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            if not market_data or market_data.symbol != self.symbol:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞
            if market_data.current_price <= 0:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
            age = datetime.now() - market_data.timestamp
            if age > timedelta(minutes=5):
                if self.debug_mode:
                    logger.warning(f"‚ö†Ô∏è –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ: {age.total_seconds():.1f} —Å–µ–∫")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    async def _should_send_signal(self, signal: TradingSignal) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª
        
        –§–∏–ª—å—Ç—Ä—ã:
        1. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞
        2. Cooldown –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
        3. Rate limiting (–º–∞–∫—Å. —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —á–∞—Å)
        4. –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
            if signal.strength < self.min_signal_strength:
                self.stats["signals_filtered_by_strength"] += 1
                if self.debug_mode:
                    logger.debug(f"üîá –°–∏–≥–Ω–∞–ª –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –ø–æ —Å–∏–ª–µ: {signal.strength:.2f} < {self.min_signal_strength}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
            if not self._check_cooldown(signal.signal_type):
                self.stats["signals_filtered_by_cooldown"] += 1
                if self.debug_mode:
                    logger.debug(f"‚è∞ –°–∏–≥–Ω–∞–ª –≤ cooldown: {signal.signal_type.value}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
            if not self._check_rate_limit():
                self.stats["signals_filtered_by_rate_limit"] += 1
                if self.debug_mode:
                    logger.debug(f"üö¶ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —á–∞—Å")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
            if not signal.is_valid or signal.is_expired:
                if self.debug_mode:
                    logger.debug(f"‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False
    
    def _check_cooldown(self, signal_type: SignalType) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        last_signal_time = self.last_signals_by_type.get(signal_type)
        
        if last_signal_time is None:
            return True
        
        time_since_last = datetime.now() - last_signal_time
        return time_since_last >= self.signal_cooldown
    
    def _check_rate_limit(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —á–∞—Å"""
        if self.max_signals_per_hour <= 0:
            return True  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        
        one_hour_ago = datetime.now() - timedelta(hours=1)
        recent_signals = [
            s for s in self.signal_history 
            if s.timestamp > one_hour_ago
        ]
        
        return len(recent_signals) < self.max_signals_per_hour
    
    def _apply_risk_management(self, signal: TradingSignal, market_data: MarketDataSnapshot):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
        try:
            current_price = signal.price
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (–±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞)
            if signal.signal_type in [SignalType.BUY, SignalType.STRONG_BUY]:
                # Stop loss –Ω–∞ 2-3% –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
                signal.stop_loss = current_price * 0.97  # 3% —Å—Ç–æ–ø
                # Take profit –Ω–∞ 4-6% –≤—ã—à–µ
                signal.take_profit = current_price * 1.05  # 5% –ø—Ä–æ—Ñ–∏—Ç
                
            elif signal.signal_type in [SignalType.SELL, SignalType.STRONG_SELL]:
                # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
                signal.stop_loss = current_price * 1.03  # 3% —Å—Ç–æ–ø
                signal.take_profit = current_price * 0.95  # 5% –ø—Ä–æ—Ñ–∏—Ç
            
            # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            base_position_size = 0.02  # 2% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –±–∞–∑–æ–≤–æ
            volatility_factor = abs(market_data.price_change_24h) / 100
            confidence_factor = signal.confidence
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            signal.position_size_recommendation = (
                base_position_size * 
                confidence_factor * 
                min(1.5, 1 + volatility_factor)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 1.5x –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            )
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
            signal.position_size_recommendation = min(signal.position_size_recommendation, 0.05)  # –ú–∞–∫—Å 5%
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è risk management: {e}")
    
    def _add_signal_to_history(self, signal: TradingSignal):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.signal_history.append(signal)
        self.last_signals_by_type[signal.signal_type] = signal.timestamp
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        max_history = 100
        if len(self.signal_history) > max_history:
            self.signal_history = self.signal_history[-max_history:]
    
    def _update_signal_stats(self, signal: TradingSignal):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        recent_signals = self.signal_history[-20:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–∏–≥–Ω–∞–ª–æ–≤
        
        if recent_signals:
            self.stats["average_signal_strength"] = sum(s.strength for s in recent_signals) / len(recent_signals)
            self.stats["average_signal_confidence"] = sum(s.confidence for s in recent_signals) / len(recent_signals)
    
    def create_signal(self, signal_type: SignalType, strength: float, confidence: float, 
                     current_price: float, reasons: List[str] = None, 
                     technical_indicators: Dict[str, Any] = None) -> TradingSignal:
        """
        –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        
        Args:
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞
            strength: –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ (0-1)
            confidence: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (0-1)
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            reasons: –°–ø–∏—Å–æ–∫ –ø—Ä–∏—á–∏–Ω
            technical_indicators: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            
        Returns:
            –ù–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        """
        return TradingSignal(
            signal_type=signal_type,
            strength=strength,
            confidence=confidence,
            price=current_price,
            timestamp=datetime.now(),
            strategy_name=self.name,
            symbol=self.symbol,
            reasons=reasons or [],
            technical_indicators=technical_indicators or {}
        )
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        uptime = datetime.now() - self.stats["start_time"]
        
        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        total_signals = self.stats["signals_generated"]
        sent_signals = self.stats["signals_sent"]
        filter_rate = ((total_signals - sent_signals) / total_signals * 100) if total_signals > 0 else 0
        
        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        analysis_calls = self.stats["analysis_calls"]
        errors = self.stats["analysis_errors"]
        success_rate = ((analysis_calls - errors) / analysis_calls * 100) if analysis_calls > 0 else 100
        
        return {
            **self.stats,
            "uptime_seconds": uptime.total_seconds(),
            "uptime_formatted": str(uptime).split('.')[0],
            "signals_filter_rate": round(filter_rate, 2),
            "analysis_success_rate": round(success_rate, 2),
            "signals_per_hour": round(sent_signals / (uptime.total_seconds() / 3600), 2) if uptime.total_seconds() > 0 else 0,
            "recent_signals_count": len([s for s in self.signal_history if (datetime.now() - s.timestamp).total_seconds() < 3600])
        }
    
    def get_recent_signals(self, hours: int = 1) -> List[TradingSignal]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã"""
        cutoff_time = datetime.now() - timedelta(hours=hours)
        return [s for s in self.signal_history if s.timestamp > cutoff_time]
    
    def enable_debug_mode(self, enabled: bool = True):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏"""
        self.debug_mode = enabled
        level = "–≤–∫–ª—é—á–µ–Ω" if enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
        logger.info(f"üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ {level} –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {self.name}")
    
    def enable_analysis(self, enabled: bool = True):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        self.analysis_enabled = enabled
        status = "–≤–∫–ª—é—á–µ–Ω" if enabled else "–æ—Ç–∫–ª—é—á–µ–Ω"
        logger.info(f"üß† –ê–Ω–∞–ª–∏–∑ {status} –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {self.name}")
    
    def reset_stats(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        logger.info(f"üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {self.name}")
        self.stats = {
            "signals_generated": 0,
            "signals_sent": 0,
            "signals_filtered_by_strength": 0,
            "signals_filtered_by_cooldown": 0,
            "signals_filtered_by_rate_limit": 0,
            "analysis_calls": 0,
            "analysis_errors": 0,
            "start_time": datetime.now(),
            "last_analysis_time": None,
            "last_signal_time": None,
            "average_signal_strength": 0.0,
            "average_signal_confidence": 0.0
        }
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        self.signal_history.clear()
        self.last_signals_by_type.clear()
    
    def __str__(self):
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        stats = self.get_stats()
        return (f"{self.name}(symbol={self.symbol}, "
                f"signals_sent={stats['signals_sent']}, "
                f"success_rate={stats['analysis_success_rate']:.1f}%, "
                f"enabled={self.analysis_enabled})")
    
    def __repr__(self):
        """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return (f"{self.__class__.__name__}(name='{self.name}', symbol='{self.symbol}', "
                f"min_strength={self.min_signal_strength}, cooldown={self.signal_cooldown}, "
                f"enabled={self.analysis_enabled}, debug={self.debug_mode})")
