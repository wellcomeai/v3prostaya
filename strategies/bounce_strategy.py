"""
Bounce Strategy v3.0 - –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ—Ç–±–æ—è (–ë–°–£-–ë–ü–£ –º–æ–¥–µ–ª—å) —Å analyze_with_data()

–¢–æ—Ä–≥—É–µ—Ç –æ—Ç–±–æ–π –æ—Ç —Å–∏–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –µ–≥–æ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏.

–ö–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:
1. –ë–°–£ (–ë–∞—Ä –°–æ–∑–¥–∞–≤—à–∏–π –£—Ä–æ–≤–µ–Ω—å) - –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –±–∞—Ä, —Å–æ–∑–¥–∞–≤—à–∏–π —É—Ä–æ–≤–µ–Ω—å
2. –ë–ü–£-1 (–ë–∞—Ä –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏–π –£—Ä–æ–≤–µ–Ω—å) - –ø–µ—Ä–≤–æ–µ –∫–∞—Å–∞–Ω–∏–µ "—Ç–æ—á–∫–∞ –≤ —Ç–æ—á–∫—É"
3. –ë–ü–£-2 - –≤—Ç–æ—Ä–æ–µ –∫–∞—Å–∞–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—á–∫–æ–º —Å –ë–ü–£-1

–ú–µ—Ö–∞–Ω–∏–∫–∞ –≤—Ö–æ–¥–∞:
- –ó–∞ 30 —Å–µ–∫ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–ü–£-2 ‚Üí Limit –æ—Ä–¥–µ—Ä –æ—Ç —É—Ä–æ–≤–Ω—è ¬± –ª—é—Ñ—Ç
- Stop Loss ‚Üí —Å—Ä–∞–∑—É –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π, –∑–∞ —É—Ä–æ–≤–µ–Ω—å)
- –õ—é—Ñ—Ç = 20% –æ—Ç Stop Loss
- –¢–í–• (–¢–æ—á–∫–∞ –í—Ö–æ–¥–∞) = —É—Ä–æ–≤–µ–Ω—å ¬± –ª—é—Ñ—Ç
- Take Profit = Stop √ó 3 (–º–∏–Ω–∏–º—É–º 3:1)

–£—Å–ª–æ–≤–∏—è –æ—Ç–±–æ—è (–ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏):
- –ü–æ–¥—Ö–æ–¥ –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ –±–∞—Ä–∞–º–∏
- –ü—Ä–æ–π–¥–µ–Ω–æ 75-80% ATR (–∑–∞–ø–∞—Å —Ö–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω)
- –î–∞–ª—å–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç (>1 –º–µ—Å—è—Ü–∞)
- –ü–æ–¥—Ö–æ–¥ –±–æ–ª—å—à–∏–º–∏ –±–∞—Ä–∞–º–∏
- –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∞–ª–µ–∫–æ –æ—Ç —É—Ä–æ–≤–Ω—è
- –ë—ã–ª–æ —Å–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (>10-15%)

Author: Trading Bot Team
Version: 3.0.0 - Orchestrator Integration
"""

import logging
from typing import Optional, Dict, Any, List, Tuple
from datetime import datetime, timedelta

from .base_strategy import BaseStrategy, TradingSignal, SignalType, SignalStrength

logger = logging.getLogger(__name__)


class BounceStrategy(BaseStrategy):
    """
    üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ—Ç–±–æ—è –æ—Ç —É—Ä–æ–≤–Ω—è (–ë–°–£-–ë–ü–£ –º–æ–¥–µ–ª—å) v3.0
    
    –õ–æ–≤–∏—Ç –æ—Ç—Å–∫–æ–∫ —Ü–µ–Ω—ã –æ—Ç —Å–∏–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å –ë–°–£-–ë–ü–£ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω—è.
    
    –ò–∑–º–µ–Ω–µ–Ω–∏—è v3.0:
    - ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω analyze_with_data() - –ø–æ–ª—É—á–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    - ‚úÖ –£–±—Ä–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç MarketDataSnapshot
    - ‚úÖ –†–∞–±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é —Å–æ —Å–≤–µ—á–∞–º–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    - ‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ PatternDetector (–ø—Ä—è–º—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
    
    –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:
    - –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (—É—Ä–æ–≤–µ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∫–∞—Å–∞–Ω–∏—è–º–∏)
    - –ß–µ—Ç–∫–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–∑–∞ 30 —Å–µ–∫ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–ü–£-2)
    - –•–æ—Ä–æ—à–∏–π R:R (–º–∏–Ω–∏–º—É–º 3:1)
    - –†–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–Ω–æ–º ATR
    
    –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:
    - –¢—Ä–µ–±—É–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Ç–∞–π–º–∏–Ω–≥–∞ (30 —Å–µ–∫ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è)
    - –ù—É–∂–Ω—ã –ë–°–£ –∏ –º–∏–Ω–∏–º—É–º 2 –ë–ü–£
    - –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–∏–ª—å–Ω–æ–º —Ç—Ä–µ–Ω–¥–µ
    
    Usage:
        strategy = BounceStrategy(
            symbol="BTCUSDT",
            repository=repository,
            ta_context_manager=ta_manager
        )
        
        signal = await strategy.analyze_with_data(
            symbol="BTCUSDT",
            candles_1m=candles_1m,
            candles_5m=candles_5m,
            candles_1h=candles_1h,
            candles_1d=candles_1d,
            ta_context=context
        )
    """
    
    def __init__(
        self,
        symbol: str = "BTCUSDT",
        repository=None,
        ta_context_manager=None,
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Ä–æ–≤–Ω–µ–π
        min_level_strength: float = 0.6,        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —É—Ä–æ–≤–Ω—è (–≤—ã—à–µ —á–µ–º —É –ø—Ä–æ–±–æ—è)
        min_level_touches: int = 2,             # –ú–∏–Ω–∏–º—É–º –∫–∞—Å–∞–Ω–∏–π
        max_distance_to_level_percent: float = 1.0,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —É—Ä–æ–≤–Ω—è
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–°–£
        bsu_max_age_days: int = 180,            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ë–°–£
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–ü–£
        require_bpu1: bool = True,              # –¢—Ä–µ–±–æ–≤–∞—Ç—å –ë–ü–£-1
        require_bpu2: bool = True,              # –¢—Ä–µ–±–æ–≤–∞—Ç—å –ë–ü–£-2
        bpu_touch_tolerance: float = 0.2,       # –î–æ–ø—É—Å–∫ –∫–∞—Å–∞–Ω–∏—è –ë–ü–£ (%)
        bpu2_cluster_tolerance: float = 0.3,    # –î–æ–ø—É—Å–∫ –ø—É—á–∫–∞ –ë–ü–£-2 —Å –ë–ü–£-1
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞–π–º–∏–Ω–≥–∞
        seconds_before_close: int = 30,         # –°–µ–∫—É–Ω–¥ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–ü–£-2 –¥–ª—è –≤—Ö–æ–¥–∞
        
        # –ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–±–æ—è
        prefer_far_retest: bool = True,         # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å –¥–∞–ª—å–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç (>1 –º–µ—Å)
        far_retest_min_days: int = 30,          # –ú–∏–Ω–∏–º—É–º –¥–Ω–µ–π –¥–ª—è –¥–∞–ª—å–Ω–µ–≥–æ —Ä–µ—Ç–µ—Å—Ç–∞
        prefer_atr_exhausted: bool = True,      # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–π ATR
        atr_exhaustion_min: float = 0.75,       # –ú–∏–Ω–∏–º—É–º 75% ATR –¥–ª—è –æ—Ç–±–æ—è
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–æ–≤
        stop_loss_percent_of_atr: float = 0.05,  # 5% ATR –¥–ª—è –∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥–∞
        gap_percent_of_stop: float = 0.20,      # –õ—é—Ñ—Ç = 20% –æ—Ç Stop Loss
        take_profit_ratio: float = 3.0,         # TP:SL = 3:1
        order_cancel_distance_stops: float = 2.0,  # –û—Ç–º–µ–Ω–∞ –µ—Å–ª–∏ —Ü–µ–Ω–∞ > 2 —Å—Ç–æ–ø–æ–≤
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        min_signal_strength: float = 0.6,
        signal_cooldown_minutes: int = 15,
        max_signals_per_hour: int = 4,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Ç–±–æ—è
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            repository: MarketDataRepository
            ta_context_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            [–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–º. –≤—ã—à–µ]
        """
        super().__init__(
            name="BounceStrategy",
            symbol=symbol,
            repository=repository,
            ta_context_manager=ta_context_manager,
            min_signal_strength=min_signal_strength,
            signal_cooldown_minutes=signal_cooldown_minutes,
            max_signals_per_hour=max_signals_per_hour,
            enable_risk_management=True
        )
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Ä–æ–≤–Ω–µ–π
        self.min_level_strength = min_level_strength
        self.min_level_touches = min_level_touches
        self.max_distance_to_level = max_distance_to_level_percent / 100.0
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–°–£
        self.bsu_max_age_days = bsu_max_age_days
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–ü–£
        self.require_bpu1 = require_bpu1
        self.require_bpu2 = require_bpu2
        self.bpu_touch_tolerance = bpu_touch_tolerance / 100.0
        self.bpu2_cluster_tolerance = bpu2_cluster_tolerance / 100.0
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞–π–º–∏–Ω–≥–∞
        self.seconds_before_close = seconds_before_close
        
        # –ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏
        self.prefer_far_retest = prefer_far_retest
        self.far_retest_min_days = far_retest_min_days
        self.prefer_atr_exhausted = prefer_atr_exhausted
        self.atr_exhaustion_min = atr_exhaustion_min
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–æ–≤
        self.stop_loss_percent = stop_loss_percent_of_atr
        self.gap_percent = gap_percent_of_stop
        self.take_profit_ratio = take_profit_ratio
        self.order_cancel_distance = order_cancel_distance_stops
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.strategy_stats = {
            "levels_analyzed": 0,
            "bsu_found": 0,
            "bpu_patterns_found": 0,
            "setups_found": 0,
            "signals_generated": 0,
            "timing_missed": 0,
            "far_retests": 0,
            "atr_exhausted_entries": 0
        }
        
        logger.info("üéØ BounceStrategy v3.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        logger.info(f"   ‚Ä¢ Symbol: {symbol}")
        logger.info(f"   ‚Ä¢ Require BPU-1: {require_bpu1}, BPU-2: {require_bpu2}")
        logger.info(f"   ‚Ä¢ Entry timing: {seconds_before_close}s before close")
        logger.info(f"   ‚Ä¢ Prefer far retest: {prefer_far_retest}")
        logger.info(f"   ‚Ä¢ Prefer ATR exhausted: {prefer_atr_exhausted}")
    
    # ==================== –ù–û–í–´–ô API v3.0 ====================
    
    async def analyze_with_data(
        self,
        symbol: str,
        candles_1m: List[Dict],
        candles_5m: List[Dict],
        candles_1h: List[Dict],
        candles_1d: List[Dict],
        ta_context: Optional[Any] = None
    ) -> Optional[TradingSignal]:
        """
        üéØ –ê–Ω–∞–ª–∏–∑ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (v3.0)
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        2. –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π (—Å–∏–ª—å–Ω—ã–µ, –±–ª–∏–∑–∫–∏–µ)
        3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–°–£ –¥–ª—è —É—Ä–æ–≤–Ω—è
        4. –ü–æ–∏—Å–∫ –ë–ü–£ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–±–æ—è
        6. –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞
        7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            candles_1m: –ú–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
            candles_5m: 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
            candles_1h: –ß–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24)
            candles_1d: –î–Ω–µ–≤–Ω—ã–µ —Å–≤–µ—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 180)
            ta_context: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            
        Returns:
            TradingSignal –∏–ª–∏ None
        """
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º symbol (–µ—Å–ª–∏ –±—ã–ª PLACEHOLDER)
            self.symbol = symbol
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not candles_1h or len(candles_1h) < 10:
                if self.debug_mode:
                    logger.debug(f"‚ö†Ô∏è {symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ H1 —Å–≤–µ—á–µ–π")
                return None
            
            if not candles_1d or len(candles_1d) < 30:
                if self.debug_mode:
                    logger.debug(f"‚ö†Ô∏è {symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ D1 —Å–≤–µ—á–µ–π")
                return None
            
            # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π H1 —Å–≤–µ—á–∏
            current_price = float(candles_1h[-1]['close'])
            current_time = datetime.now()
            
            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if ta_context is None:
                if self.debug_mode:
                    logger.debug(f"‚ö†Ô∏è {symbol}: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —É—Ä–æ–≤–Ω–∏
            if not hasattr(ta_context, 'levels_d1') or not ta_context.levels_d1:
                if self.debug_mode:
                    logger.debug(f"‚ö†Ô∏è {symbol}: –Ω–µ—Ç —É—Ä–æ–≤–Ω–µ–π D1")
                return None
            
            # –®–∞–≥ 2: –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–∏–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
            nearest_level, direction = self._find_nearest_level_for_bounce(
                ta_context=ta_context,
                current_price=current_price
            )
            
            if not nearest_level:
                return None
            
            self.strategy_stats["levels_analyzed"] += 1
            
            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–°–£ –¥–ª—è —É—Ä–æ–≤–Ω—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            has_bsu = self._check_bsu_simple(
                level=nearest_level,
                candles_1d=candles_1d
            )
            
            if not has_bsu:
                if self.debug_mode:
                    logger.debug(f"‚ö†Ô∏è {symbol}: –ë–°–£ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É—Ä–æ–≤–Ω—è {nearest_level.price:.2f}")
                return None
            
            self.strategy_stats["bsu_found"] += 1
            
            # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–ü–£ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            has_bpu_pattern = self._check_bpu_pattern_simple(
                level=nearest_level,
                candles_1h=candles_1h,
                current_price=current_price
            )
            
            if not has_bpu_pattern:
                if self.debug_mode:
                    logger.debug(f"‚ö†Ô∏è {symbol}: –ë–ü–£ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            
            self.strategy_stats["bpu_patterns_found"] += 1
            
            # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–±–æ—è
            bounce_score, bounce_details = self._check_bounce_preconditions(
                level=nearest_level,
                ta_context=ta_context,
                candles_1h=candles_1h,
                candles_1d=candles_1d,
                current_price=current_price
            )
            
            if bounce_score < 2:  # –ú–∏–Ω–∏–º—É–º 2 –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏
                if self.debug_mode:
                    logger.debug(f"‚ö†Ô∏è {symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–æ–∫: {bounce_score}/5")
                return None
            
            self.strategy_stats["setups_found"] += 1
            logger.info(f"‚úÖ {symbol}: –ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–±–æ—è: {bounce_score}/5")
            
            # –®–∞–≥ 6: –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞
            order_params = self._calculate_order_parameters(
                level=nearest_level,
                direction=direction,
                ta_context=ta_context,
                current_price=current_price
            )
            
            # –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –æ—Ä–¥–µ—Ä–∞
            if not self._check_order_validity(order_params, current_price):
                if self.debug_mode:
                    logger.debug(f"‚ö†Ô∏è {symbol}: –æ—Ä–¥–µ—Ä –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (—Ü–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ)")
                return None
            
            # –®–∞–≥ 8: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
            signal = self._create_bounce_signal(
                level=nearest_level,
                direction=direction,
                order_params=order_params,
                bounce_details=bounce_details,
                current_price=current_price
            )
            
            self.strategy_stats["signals_generated"] += 1
            
            logger.info(f"‚úÖ {symbol}: –°–∏–≥–Ω–∞–ª –æ—Ç–±–æ—è —Å–æ–∑–¥–∞–Ω: {direction} –æ—Ç {nearest_level.price:.2f}")
            
            return signal
            
        except Exception as e:
            logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ –≤ analyze_with_data: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return None
    
    # ==================== –ü–û–ò–°–ö –£–†–û–í–ù–ï–ô ====================
    
    def _find_nearest_level_for_bounce(
        self,
        ta_context: Any,
        current_price: float
    ) -> Tuple[Optional[Any], str]:
        """
        –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–∏–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –æ—Ç–±–æ—è
        
        –ö—Ä–∏—Ç–µ—Ä–∏–∏:
        - –°–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (strength >= 0.6)
        - –ú–∏–Ω–∏–º—É–º 2 –∫–∞—Å–∞–Ω–∏—è
        - –ë–ª–∏–∑–∫–æ –∫ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ (< 1%)
        
        Args:
            ta_context: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            Tuple[—É—Ä–æ–≤–µ–Ω—å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ("up"/"down")]
        """
        try:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–∏–ª–µ –∏ –∫–∞—Å–∞–Ω–∏—è–º
            suitable_levels = [
                level for level in ta_context.levels_d1
                if level.strength >= self.min_level_strength and
                   level.touches >= self.min_level_touches
            ]
            
            if not suitable_levels:
                return None, None
            
            # –ò—â–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∏–∂–µ —Ü–µ–Ω—ã (–æ—Ç–±–æ–π –≤–≤–µ—Ä—Ö)
            supports = [
                level for level in suitable_levels
                if level.level_type == "support" and level.price < current_price
            ]
            
            # –ò—â–µ–º —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –≤—ã—à–µ —Ü–µ–Ω—ã (–æ—Ç–±–æ–π –≤–Ω–∏–∑)
            resistances = [
                level for level in suitable_levels
                if level.level_type == "resistance" and level.price > current_price
            ]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π
            candidates = []
            
            if supports:
                nearest_support = min(supports, key=lambda l: abs(l.price - current_price))
                distance = abs(nearest_support.price - current_price) / current_price
                if distance <= self.max_distance_to_level:
                    candidates.append((nearest_support, "up", distance))
            
            if resistances:
                nearest_resistance = min(resistances, key=lambda l: abs(l.price - current_price))
                distance = abs(nearest_resistance.price - current_price) / current_price
                if distance <= self.max_distance_to_level:
                    candidates.append((nearest_resistance, "down", distance))
            
            if not candidates:
                return None, None
            
            # –í—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π
            best = min(candidates, key=lambda x: x[2])
            level, direction, distance = best
            
            logger.debug(f"üéØ –ù–∞–π–¥–µ–Ω —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –æ—Ç–±–æ—è: {level.level_type} @ {level.price:.2f}, "
                        f"distance={distance*100:.2f}%, strength={level.strength:.2f}, "
                        f"touches={level.touches}")
            
            return level, direction
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω—è: {e}")
            return None, None
    
    # ==================== –ü–†–û–í–ï–†–ö–ê –ë–°–£ (–£–ü–†–û–©–ï–ù–ù–ê–Ø) ====================
    
    def _check_bsu_simple(
        self,
        level: Any,
        candles_1d: List[Dict]
    ) -> bool:
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ë–°–£
        
        –ë–°–£ = –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –±–∞—Ä –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª —É—Ä–æ–≤–µ–Ω—å
        –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å
            candles_1d: –î–Ω–µ–≤–Ω—ã–µ —Å–≤–µ—á–∏
            
        Returns:
            True –µ—Å–ª–∏ –ë–°–£ –≤–∞–ª–∏–¥–µ–Ω
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —É—Ä–æ–≤–Ω—è
            if hasattr(level, 'first_touch') and level.first_touch:
                age_days = (datetime.now() - level.first_touch).days
                
                if age_days <= self.bsu_max_age_days:
                    logger.debug(f"‚úÖ –ë–°–£ –≤–∞–ª–∏–¥–µ–Ω: –≤–æ–∑—Ä–∞—Å—Ç {age_days} –¥–Ω–µ–π")
                    return True
                else:
                    logger.debug(f"‚ö†Ô∏è –ë–°–£ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π: {age_days} –¥–Ω–µ–π")
                    return False
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ first_touch, —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º
            # –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–∏–ª—å–Ω—ã–π (—Ç.–µ. –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤—Ä–µ–º–µ–Ω–µ–º)
            if level.strength >= self.min_level_strength:
                logger.debug("‚úÖ –ë–°–£ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º (—Å–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–°–£: {e}")
            return False
    
    # ==================== –ü–†–û–í–ï–†–ö–ê –ë–ü–£ (–£–ü–†–û–©–ï–ù–ù–ê–Ø) ====================
    
    def _check_bpu_pattern_simple(
        self,
        level: Any,
        candles_1h: List[Dict],
        current_price: float
    ) -> bool:
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–ü–£ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        
        –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ:
        1. –¶–µ–Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ –∫–∞—Å–∞–ª–∞—Å—å —É—Ä–æ–≤–Ω—è (–ë–ü–£-1)
        2. –¶–µ–Ω–∞ —Å–µ–π—á–∞—Å —Å–Ω–æ–≤–∞ –æ–∫–æ–ª–æ —É—Ä–æ–≤–Ω—è (–ë–ü–£-2)
        3. –ö–∞—Å–∞–Ω–∏—è –±—ã–ª–∏ "—Ç–æ—á–∫–∞ –≤ —Ç–æ—á–∫—É"
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å
            candles_1h: –ß–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            True –µ—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞–π–¥–µ–Ω
        """
        try:
            level_price = level.price
            
            # –ò—â–µ–º –∫–∞—Å–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 —á–∞—Å–∞—Ö
            touches = []
            
            for i, candle in enumerate(candles_1h[-50:]):
                high = float(candle['high'])
                low = float(candle['low'])
                close = float(candle['close'])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è (–¥–æ–ø—É—Å–∫ self.bpu_touch_tolerance)
                distance_high = abs(high - level_price) / level_price
                distance_low = abs(low - level_price) / level_price
                distance_close = abs(close - level_price) / level_price
                
                if min(distance_high, distance_low, distance_close) <= self.bpu_touch_tolerance:
                    touches.append({
                        'index': i,
                        'time': candle.get('close_time', datetime.now()),
                        'close': close
                    })
            
            # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∫–∞—Å–∞–Ω–∏—è –¥–ª—è –ë–ü–£-1 –∏ –ë–ü–£-2
            if len(touches) < 2:
                logger.debug(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Å–∞–Ω–∏–π: {len(touches)}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∫–∞—Å–∞–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–µ–µ (–ë–ü–£-2)
            last_touch = touches[-1]
            if last_touch['index'] < len(candles_1h[-50:]) - 3:  # –ù–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 —Å–≤–µ—á–∞—Ö
                logger.debug("‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–∞—Å–∞–Ω–∏–µ –Ω–µ –Ω–µ–¥–∞–≤–Ω–µ–µ")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä (–ë–ü–£-2 —Ä—è–¥–æ–º —Å –ë–ü–£-1)
            if len(touches) >= 2:
                prev_touch = touches[-2]
                
                # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–∞—Å–∞–Ω–∏—è–º–∏ –≤ –±–∞—Ä–∞—Ö
                bars_between = last_touch['index'] - prev_touch['index']
                
                # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 20 –±–∞—Ä–æ–≤)
                if bars_between <= 20:
                    logger.debug(f"‚úÖ –ë–ü–£ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞–π–¥–µ–Ω: {len(touches)} –∫–∞—Å–∞–Ω–∏–π, "
                               f"–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–µ—Ä–µ–∑ {bars_between} –±–∞—Ä–æ–≤")
                    return True
            
            logger.debug("‚ö†Ô∏è –ë–ü–£ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–ü–£: {e}")
            return False
    
    # ==================== –ü–†–ï–î–ü–û–°–´–õ–ö–ò –î–õ–Ø –û–¢–ë–û–Ø ====================
    
    def _check_bounce_preconditions(
        self,
        level: Any,
        ta_context: Any,
        candles_1h: List[Dict],
        candles_1d: List[Dict],
        current_price: float
    ) -> Tuple[int, Dict[str, Any]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–±–æ—è
        
        –ò–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞:
        1. ‚úÖ ATR –∏—Å—á–µ—Ä–ø–∞–Ω (75-80%)
        2. ‚úÖ –î–∞–ª—å–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç (>1 –º–µ—Å—è—Ü–∞)
        3. ‚úÖ –ü–æ–¥—Ö–æ–¥ –±–æ–ª—å—à–∏–º–∏ –±–∞—Ä–∞–º–∏
        4. ‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∞–ª–µ–∫–æ –æ—Ç —É—Ä–æ–≤–Ω—è
        5. ‚úÖ –ë—ã–ª–æ —Å–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (>10%)
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å
            ta_context: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            candles_1h: –ß–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏
            candles_1d: –î–Ω–µ–≤–Ω—ã–µ —Å–≤–µ—á–∏
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            Tuple[score (0-5), –¥–µ—Ç–∞–ª–∏]
        """
        try:
            score = 0
            details = {}
            
            # 1. ATR –∏—Å—á–µ—Ä–ø–∞–Ω (75-80%)
            atr_exhausted = False
            if hasattr(ta_context, 'atr_data') and ta_context.atr_data:
                if hasattr(ta_context.atr_data, 'current_range_used'):
                    atr_used = ta_context.atr_data.current_range_used
                    atr_exhausted = atr_used >= self.atr_exhaustion_min
                    
                    details["atr_exhausted"] = atr_exhausted
                    details["atr_used_percent"] = atr_used * 100
                    
                    if atr_exhausted:
                        score += 1
                        self.strategy_stats["atr_exhausted_entries"] += 1
                        logger.debug(f"‚úÖ ATR –∏—Å—á–µ—Ä–ø–∞–Ω: {atr_used*100:.1f}%")
            
            # 2. –î–∞–ª—å–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç (>1 –º–µ—Å—è—Ü–∞)
            far_retest = False
            if hasattr(level, 'last_touch') and level.last_touch:
                days_since = (datetime.now() - level.last_touch).days
                far_retest = days_since >= self.far_retest_min_days
                details["days_since_touch"] = days_since
                details["far_retest"] = far_retest
                
                if far_retest:
                    score += 1
                    self.strategy_stats["far_retests"] += 1
                    logger.debug(f"‚úÖ –î–∞–ª—å–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç: {days_since} –¥–Ω–µ–π")
            
            # 3. –ü–æ–¥—Ö–æ–¥ –±–æ–ª—å—à–∏–º–∏ –±–∞—Ä–∞–º–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ H1)
            big_bars_approach = False
            if len(candles_1h) >= 5:
                recent = candles_1h[-5:]
                
                # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –±–∞—Ä–∞
                ranges = [float(c['high']) - float(c['low']) for c in recent]
                avg_range = sum(ranges) / len(ranges)
                
                # –ü–æ–ª—É—á–∞–µ–º ATR –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                atr = current_price * 0.02  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2%
                if hasattr(ta_context, 'atr_data') and ta_context.atr_data:
                    if hasattr(ta_context.atr_data, 'calculated_atr'):
                        atr = ta_context.atr_data.calculated_atr
                
                # –ë–æ–ª—å—à–∏–µ –±–∞—Ä—ã –µ—Å–ª–∏ avg_range > 0.5√óATR
                big_bars_approach = avg_range > (atr * 0.5)
                details["big_bars_approach"] = big_bars_approach
                details["avg_bar_range"] = avg_range
                
                if big_bars_approach:
                    score += 1
                    logger.debug("‚úÖ –ü–æ–¥—Ö–æ–¥ –±–æ–ª—å—à–∏–º–∏ –±–∞—Ä–∞–º–∏")
            
            # 4. –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∞–ª–µ–∫–æ –æ—Ç —É—Ä–æ–≤–Ω—è
            close_far_from_level = False
            if candles_1h:
                last_close = float(candles_1h[-1]['close'])
                distance = abs(last_close - level.price)
                distance_percent = distance / level.price * 100
                
                # –î–∞–ª–µ–∫–æ –µ—Å–ª–∏ > 0.3%
                close_far_from_level = distance_percent > 0.3
                details["close_distance_percent"] = distance_percent
                details["close_far_from_level"] = close_far_from_level
                
                if close_far_from_level:
                    score += 1
                    logger.debug(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∞–ª–µ–∫–æ: {distance_percent:.2f}%")
            
            # 5. –°–∏–ª—å–Ω–æ–µ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ D1)
            strong_move = False
            if len(candles_1d) >= 2:
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
                current = float(candles_1d[-1]['close'])
                previous = float(candles_1d[-2]['close'])
                change = abs((current - previous) / previous * 100)
                
                if change > 5.0:  # > 5% –∑–∞ –¥–µ–Ω—å
                    strong_move = True
                    score += 1
                    details["strong_move"] = strong_move
                    details["move_percent"] = change
                    logger.debug(f"‚úÖ –°–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ: {change:.1f}%")
            
            details["preconditions_score"] = score
            
            logger.info(f"üìä –ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–±–æ—è: {score}/5")
            
            return score, details
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–æ–∫: {e}")
            return 0, {}
    
    # ==================== –†–ê–°–ß–ï–¢ –ü–ê–†–ê–ú–ï–¢–†–û–í –û–†–î–ï–†–ê ====================
    
    def _calculate_order_parameters(
        self,
        level: Any,
        direction: str,
        ta_context: Any,
        current_price: float
    ) -> Dict[str, float]:
        """
        –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Limit –æ—Ä–¥–µ—Ä–∞
        
        –ú–µ—Ö–∞–Ω–∏–∫–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞:
        1. –õ—é—Ñ—Ç = 20% –æ—Ç Stop Loss
        2. –¢–í–• (–¢–æ—á–∫–∞ –í—Ö–æ–¥–∞) = —É—Ä–æ–≤–µ–Ω—å ¬± –ª—é—Ñ—Ç
        3. Stop = –¢–í–• ¬± —Ä–∞–∑–º–µ—Ä —Å—Ç–æ–ø–∞
        4. Take Profit = Stop √ó 3
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å –æ—Ç–±–æ—è
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            ta_context: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        """
        try:
            level_price = level.price
            
            # ATR –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
            atr = current_price * 0.02
            if hasattr(ta_context, 'atr_data') and ta_context.atr_data:
                if hasattr(ta_context.atr_data, 'calculated_atr'):
                    atr = ta_context.atr_data.calculated_atr
            
            # Stop Loss = 5% ATR (–∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥)
            stop_distance = atr * self.stop_loss_percent
            
            # –õ—é—Ñ—Ç = 20% –æ—Ç Stop Loss
            gap = stop_distance * self.gap_percent
            
            if direction == "up":
                # –û—Ç–±–æ–π –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–≤–≤–µ—Ä—Ö)
                entry_price = level_price + gap  # –¢–í–• –≤—ã—à–µ —É—Ä–æ–≤–Ω—è
                stop_loss = entry_price - stop_distance  # Stop –Ω–∏–∂–µ –¢–í–•
                take_profit = entry_price + (stop_distance * self.take_profit_ratio)
                
            else:
                # –û—Ç–±–æ–π –æ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–≤–Ω–∏–∑)
                entry_price = level_price - gap  # –¢–í–• –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è
                stop_loss = entry_price + stop_distance  # Stop –≤—ã—à–µ –¢–í–•
                take_profit = entry_price - (stop_distance * self.take_profit_ratio)
            
            params = {
                "entry_price": entry_price,
                "stop_loss": stop_loss,
                "take_profit": take_profit,
                "stop_distance": stop_distance,
                "gap": gap,
                "gap_percent": self.gap_percent * 100,
                "risk_reward_ratio": self.take_profit_ratio,
                "level_price": level_price,
                "atr_used": atr
            }
            
            logger.debug(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Limit –æ—Ä–¥–µ—Ä–∞: Entry={entry_price:.2f}, "
                        f"SL={stop_loss:.2f}, TP={take_profit:.2f}, "
                        f"Gap={gap:.2f} ({self.gap_percent*100}%)")
            
            return params
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return {}
    
    def _check_order_validity(
        self,
        order_params: Dict[str, float],
        current_price: float
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –æ—Ä–¥–µ—Ä–∞
        
        –û—Ç–º–µ–Ω—è–µ–º –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ > 2 —Å—Ç–æ–ø–æ–≤ –æ—Ç –ª–∏–º–∏—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
        
        Args:
            order_params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä –≤–∞–ª–∏–¥–µ–Ω
        """
        try:
            entry_price = order_params.get("entry_price")
            stop_distance = order_params.get("stop_distance")
            
            if not entry_price or not stop_distance:
                return False
            
            # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ entry
            distance = abs(current_price - entry_price)
            
            # –ú–∞–∫—Å–∏–º—É–º: 2 —Å—Ç–æ–ø–∞
            max_distance = stop_distance * self.order_cancel_distance
            
            if distance > max_distance:
                logger.debug(f"‚ö†Ô∏è –¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ: {distance:.2f} > {max_distance:.2f} (2 stops)")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return False
    
    # ==================== –°–û–ó–î–ê–ù–ò–ï –°–ò–ì–ù–ê–õ–ê ====================
    
    def _create_bounce_signal(
        self,
        level: Any,
        direction: str,
        order_params: Dict[str, float],
        bounce_details: Dict[str, Any],
        current_price: float
    ) -> TradingSignal:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç–±–æ—è
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å –æ—Ç–±–æ—è
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            order_params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            bounce_details: –î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–æ–∫
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            TradingSignal
        """
        try:
            # –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞
            signal_type = SignalType.BUY if direction == "up" else SignalType.SELL
            
            # –ï—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –∏–¥–µ–∞–ª—å–Ω—ã - STRONG
            preconditions_score = bounce_details.get("preconditions_score", 0)
            
            if preconditions_score >= 4:
                signal_type = SignalType.STRONG_BUY if direction == "up" else SignalType.STRONG_SELL
            
            # –†–∞—Å—á–µ—Ç —Å–∏–ª—ã
            strength = self._calculate_signal_strength(
                preconditions_score=preconditions_score,
                level=level
            )
            
            # –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence = self._calculate_signal_confidence(
                preconditions_score=preconditions_score,
                level=level
            )
            
            # –ü—Ä–∏—á–∏–Ω—ã
            reasons = self._build_signal_reasons(
                level=level,
                direction=direction,
                bounce_details=bounce_details
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
            signal = self.create_signal(
                signal_type=signal_type,
                strength=strength,
                confidence=confidence,
                current_price=current_price,
                reasons=reasons
            )
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            signal.stop_loss = order_params.get("stop_loss")
            signal.take_profit = order_params.get("take_profit")
            
            # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            signal.position_size_recommendation = min(
                0.025 * confidence,  # –î–æ 2.5% –ø—Ä–∏ –º–∞–∫—Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                0.04  # –ù–æ –Ω–µ –±–æ–ª–µ–µ 4%
            )
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            signal.add_technical_indicator(
                "bounce_level",
                level.price,
                f"{level.level_type} @ {level.price:.2f}"
            )
            
            signal.add_technical_indicator(
                "entry_price",
                order_params.get("entry_price"),
                f"Limit Entry: {order_params.get('entry_price'):.2f}"
            )
            
            signal.add_technical_indicator(
                "gap",
                order_params.get("gap"),
                f"–õ—é—Ñ—Ç: {order_params.get('gap_percent'):.0f}%"
            )
            
            signal.add_technical_indicator(
                "bsu_bpu_model",
                "confirmed",
                "–ë–°–£-–ë–ü–£ –º–æ–¥–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
            )
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            signal.technical_indicators["bounce_details"] = bounce_details
            signal.technical_indicators["order_params"] = order_params
            
            return signal
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return self.create_signal(
                signal_type=SignalType.BUY if direction == "up" else SignalType.SELL,
                strength=0.5,
                confidence=0.5,
                current_price=current_price,
                reasons=["–û—Ç–±–æ–π –æ—Ç —É—Ä–æ–≤–Ω—è"]
            )
    
    def _calculate_signal_strength(
        self,
        preconditions_score: int,
        level: Any
    ) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞"""
        strength = 0.5  # –ë–∞–∑–æ–≤–∞—è
        
        # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏ (–∫–∞–∂–¥–∞—è –¥–∞–µ—Ç +0.08)
        strength += preconditions_score * 0.08
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        if hasattr(level, 'is_strong') and level.is_strong:
            strength += 0.1
        
        return min(1.0, strength)
    
    def _calculate_signal_confidence(
        self,
        preconditions_score: int,
        level: Any
    ) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        confidence = 0.6  # –ë–∞–∑–æ–≤–∞—è
        
        # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏
        confidence += preconditions_score * 0.06
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        if hasattr(level, 'strength') and level.strength >= 0.8:
            confidence += 0.1
        
        return min(1.0, confidence)
    
    def _build_signal_reasons(
        self,
        level: Any,
        direction: str,
        bounce_details: Dict[str, Any]
    ) -> List[str]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏—á–∏–Ω"""
        reasons = []
        
        direction_text = "–≤–≤–µ—Ä—Ö" if direction == "up" else "–≤–Ω–∏–∑"
        reasons.append(f"–û—Ç–±–æ–π {direction_text} –æ—Ç {level.level_type} @ {level.price:.2f}")
        
        reasons.append("–ë–°–£-–ë–ü–£ –º–æ–¥–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        
        # –ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏
        if bounce_details.get("atr_exhausted"):
            reasons.append(f"ATR –∏—Å—á–µ—Ä–ø–∞–Ω: {bounce_details.get('atr_used_percent', 0):.1f}%")
        
        if bounce_details.get("far_retest"):
            days = bounce_details.get("days_since_touch", 0)
            reasons.append(f"–î–∞–ª—å–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç: {days} –¥–Ω–µ–π")
        
        if bounce_details.get("big_bars_approach"):
            reasons.append("–ü–æ–¥—Ö–æ–¥ –±–æ–ª—å—à–∏–º–∏ –±–∞—Ä–∞–º–∏")
        
        if bounce_details.get("strong_move"):
            move = bounce_details.get("move_percent", 0)
            reasons.append(f"–°–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ: {move:.1f}%")
        
        if hasattr(level, 'is_strong') and level.is_strong:
            reasons.append(f"–°–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: strength={level.strength:.2f}, touches={level.touches}")
        
        return reasons
    
    # ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================
    
    def get_strategy_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        base_stats = self.get_stats()
        
        return {
            **base_stats,
            "strategy_type": "BounceStrategy",
            "strategy_stats": self.strategy_stats.copy(),
            "config": {
                "require_bpu1": self.require_bpu1,
                "require_bpu2": self.require_bpu2,
                "seconds_before_close": self.seconds_before_close,
                "prefer_far_retest": self.prefer_far_retest,
                "prefer_atr_exhausted": self.prefer_atr_exhausted,
                "take_profit_ratio": self.take_profit_ratio,
                "gap_percent": self.gap_percent * 100
            }
        }
    
    def __str__(self):
        stats = self.get_strategy_stats()
        return (f"BounceStrategy(symbol={self.symbol}, "
                f"bsu_found={stats['strategy_stats']['bsu_found']}, "
                f"bpu_patterns={stats['strategy_stats']['bpu_patterns_found']}, "
                f"signals={stats['signals_sent']}, "
                f"success_rate={stats['analysis_success_rate']:.1f}%)")


# Export
__all__ = ["BounceStrategy"]

logger.info("‚úÖ Bounce Strategy v3.0 loaded - Orchestrator Integration Ready")
