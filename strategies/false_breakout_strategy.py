"""
False Breakout Strategy v3.0 - –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–æ–µ–≤ —Å analyze_with_data()

–¢–æ—Ä–≥—É–µ—Ç –†–ï–ê–ö–¶–ò–Æ –Ω–∞ –ª–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π (False Breakout) - –∫–æ–≥–¥–∞ –∫—Ä—É–ø–Ω—ã–π –∏–≥—Ä–æ–∫ 
"–ª–æ–≤–∏—Ç —Å—Ç–æ–ø—ã" –∏ —Ü–µ–Ω–∞ —Ä–µ–∑–∫–æ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ –∑–∞ —É—Ä–æ–≤–µ–Ω—å.

–¢–∏–ø—ã –ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–æ–µ–≤:
1. –ü—Ä–æ—Å—Ç–æ–π –õ–ü (1 –±–∞—Ä) - –ø—Ä–æ–±–∏–ª, –Ω–æ –∑–∞–∫—Ä—ã–ª—Å—è –Ω–∞–∑–∞–¥ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
2. –°–∏–ª—å–Ω—ã–π –õ–ü (2 –±–∞—Ä–∞) - –ø—Ä–æ–±–∏–ª, –∑–∞–∫—Ä—ã–ª—Å—è –≤ –∑–æ–Ω–µ, –∑–∞—Ç–µ–º —Ä–∞–∑–≤–µ—Ä–Ω—É–ª—Å—è
3. –°–ª–æ–∂–Ω—ã–π –õ–ü (3+ –±–∞—Ä–∞) - –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –≤ –∑–æ–Ω–µ –ø—Ä–æ–±–æ—è, –ø–æ—Ç–æ–º —Ä–∞–∑–≤–æ—Ä–æ—Ç

–ú–µ—Ö–∞–Ω–∏–∫–∞ –≤—Ö–æ–¥–∞:
- –ü–æ—Å–ª–µ –õ–ü –≤–≤–µ—Ä—Ö ‚Üí SELL (—Ü–µ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å)
- –ü–æ—Å–ª–µ –õ–ü –≤–Ω–∏–∑ ‚Üí BUY (—Ü–µ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –Ω–∞–¥ —É—Ä–æ–≤–µ–Ω—å)
- Entry: —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (Market) –∏–ª–∏ Limit –æ—Ç —É—Ä–æ–≤–Ω—è
- Stop Loss: –∑–∞ –∑–æ–Ω—É –õ–ü (High/Low –ø—Ä–æ–±–æ—è √ó 1.1)
- Take Profit: 2-3 —Å—Ç–æ–ø–∞ (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)

–£—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞:
1. ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ª–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π
2. ‚úÖ –¶–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç (–≤–µ—Ä–Ω—É–ª–∞—Å—å –∑–∞ —É—Ä–æ–≤–µ–Ω—å)
3. ‚úÖ –ù–µ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (< 4 —á–∞—Å–æ–≤)
4. ‚úÖ –°–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (strength >= 0.5)
5. ‚úÖ –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è

Author: Trading Bot Team
Version: 3.0.1 - FIXED: KeyError 'close' -> 'close_price'
"""

import logging
from typing import Optional, Dict, Any, List, Tuple
from datetime import datetime, timedelta

from .base_strategy import BaseStrategy, TradingSignal, SignalType, SignalStrength

logger = logging.getLogger(__name__)


class FalseBreakoutStrategy(BaseStrategy):
    """
    üé£ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–æ–µ–≤ (–ª–æ–≤—É—à–µ–∫) v3.0
    
    –õ–æ–≤–∏—Ç —Ä–∞–∑–≤–æ—Ä–æ—Ç—ã –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∫—Ä—É–ø–Ω—ã–π –∏–≥—Ä–æ–∫ "–ø–æ–π–º–∞–ª —Å—Ç–æ–ø—ã" –º–µ–ª–∫–∏—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤.
    –¢–æ—Ä–≥—É–µ—Ç –ü–†–û–¢–ò–í –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–±–æ—è.
    
    –ò–∑–º–µ–Ω–µ–Ω–∏—è v3.0.1:
    - ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: KeyError 'close' -> –∏—Å–ø–æ–ª—å–∑—É–µ–º 'close_price'
    - ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: KeyError 'high' -> –∏—Å–ø–æ–ª—å–∑—É–µ–º 'high_price'
    - ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: KeyError 'low' -> –∏—Å–ø–æ–ª—å–∑—É–µ–º 'low_price'
    
    –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:
    - –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (—É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–µ—Ä–µ–Ω –õ–ü)
    - –•–æ—Ä–æ—à–∏–π R:R (2-3:1)
    - –ß–µ—Ç–∫–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
    - –ë—ã—Å—Ç—Ä—ã–µ —Å–¥–µ–ª–∫–∏ (—á–∞—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è –∑–∞ 1-4 —á–∞—Å–∞)
    
    –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:
    - –¢—Ä–µ–±—É–µ—Ç –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏ (4 —á–∞—Å–∞ –ø–æ—Å–ª–µ –õ–ü)
    - –ù—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞
    - –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    - –õ–æ–∂–Ω—ã–µ –õ–ü (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–º –ø—Ä–æ–±–æ–µ–º)
    
    Usage:
        strategy = FalseBreakoutStrategy(
            symbol="BTCUSDT",
            repository=repository,
            ta_context_manager=ta_manager
        )
        
        signal = await strategy.analyze_with_data(
            symbol="BTCUSDT",
            candles_1m=candles_1m,
            candles_5m=candles_5m,
            candles_1h=candles_1h,
            candles_1d=candles_1d,
            ta_context=context
        )
    """
    
    def __init__(
        self,
        symbol: str = "BTCUSDT",
        repository=None,
        ta_context_manager=None,
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Ä–æ–≤–Ω–µ–π
        min_level_strength: float = 0.5,
        min_level_touches: int = 2,
        max_distance_to_level_percent: float = 2.0,
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–±–æ—è
        min_false_breakout_depth_percent: float = 0.1,  # –ú–∏–Ω –≥–ª—É–±–∏–Ω–∞ –õ–ü (0.1%)
        max_false_breakout_depth_percent: float = 1.0,  # –ú–∞–∫—Å –≥–ª—É–±–∏–Ω–∞ –õ–ü (1%)
        prefer_simple_false_breakouts: bool = True,     # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –õ–ü
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_required: bool = True,             # –¢—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation_distance_percent: float = 0.3,     # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —É—Ä–æ–≤–Ω—è
        max_time_since_breakout_hours: int = 4,         # –ú–∞–∫—Å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –õ–ü (—á–∞—Å—ã)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        prefer_strong_levels: bool = True,              # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å —Å–∏–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
        avoid_extreme_volatility: bool = True,          # –ò–∑–±–µ–≥–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–æ–≤
        entry_type: str = "market",                     # market –∏–ª–∏ limit
        limit_offset_percent: float = 0.2,              # –û—Ç—Å—Ç—É–ø –¥–ª—è –ª–∏–º–∏—Ç –æ—Ä–¥–µ—Ä–∞
        stop_loss_beyond_extreme: float = 1.1,          # SL –∑–∞ —ç–∫—Å—Ç—Ä–µ–º—É–º –õ–ü √ó 1.1
        take_profit_ratio: float = 2.5,                 # TP:SL = 2.5:1
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        min_signal_strength: float = 0.6,
        signal_cooldown_minutes: int = 15,
        max_signals_per_hour: int = 4,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–æ–µ–≤
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            repository: MarketDataRepository
            ta_context_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            [–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–º. –≤—ã—à–µ]
        """
        super().__init__(
            name="FalseBreakoutStrategy",
            symbol=symbol,
            repository=repository,
            ta_context_manager=ta_context_manager,
            min_signal_strength=min_signal_strength,
            signal_cooldown_minutes=signal_cooldown_minutes,
            max_signals_per_hour=max_signals_per_hour,
            enable_risk_management=True
        )
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Ä–æ–≤–Ω–µ–π
        self.min_level_strength = min_level_strength
        self.min_level_touches = min_level_touches
        self.max_distance_to_level = max_distance_to_level_percent / 100.0
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –õ–ü
        self.min_fb_depth = min_false_breakout_depth_percent / 100.0
        self.max_fb_depth = max_false_breakout_depth_percent / 100.0
        self.prefer_simple_fb = prefer_simple_false_breakouts
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        self.confirmation_required = confirmation_required
        self.confirmation_distance = confirmation_distance_percent / 100.0
        self.max_time_since_breakout = timedelta(hours=max_time_since_breakout_hours)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        self.prefer_strong_levels = prefer_strong_levels
        self.avoid_extreme_volatility = avoid_extreme_volatility
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–æ–≤
        self.entry_type = entry_type
        self.limit_offset = limit_offset_percent / 100.0
        self.stop_beyond_extreme = stop_loss_beyond_extreme
        self.take_profit_ratio = take_profit_ratio
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.strategy_stats = {
            "levels_analyzed": 0,
            "false_breakouts_detected": 0,
            "false_breakouts_simple": 0,
            "false_breakouts_strong": 0,
            "confirmations_passed": 0,
            "signals_generated": 0,
            "filtered_by_time": 0,
            "filtered_by_confirmation": 0,
            "filtered_by_level_strength": 0
        }
        
        logger.info("üé£ FalseBreakoutStrategy v3.0.1 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (FIXED)")
        logger.info(f"   ‚Ä¢ Symbol: {symbol}")
        logger.info(f"   ‚Ä¢ Min level strength: {min_level_strength}")
        logger.info(f"   ‚Ä¢ FB depth: {min_false_breakout_depth_percent}-{max_false_breakout_depth_percent}%")
        logger.info(f"   ‚Ä¢ Max time after FB: {max_time_since_breakout_hours} hours")
        logger.info(f"   ‚Ä¢ Entry type: {entry_type}")
    
    # ==================== –ù–û–í–´–ô API v3.0 ====================
    
    async def analyze_with_data(
        self,
        symbol: str,
        candles_1m: List[Dict],
        candles_5m: List[Dict],
        candles_1h: List[Dict],
        candles_1d: List[Dict],
        ta_context: Optional[Any] = None
    ) -> Optional[TradingSignal]:
        """
        üéØ –ê–Ω–∞–ª–∏–∑ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (v3.0)
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        2. –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        3. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–æ–µ–≤ (–∏—â–µ–º –ª–æ–∂–Ω—ã–µ)
        4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞
        5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–±–æ—è
        6. –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞
        7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –ü–†–û–¢–ò–í –ø—Ä–æ–±–æ—è
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            candles_1m: –ú–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
            candles_5m: 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
            candles_1h: –ß–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24)
            candles_1d: –î–Ω–µ–≤–Ω—ã–µ —Å–≤–µ—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 180)
            ta_context: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            
        Returns:
            TradingSignal –∏–ª–∏ None
        """
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º symbol (–µ—Å–ª–∏ –±—ã–ª PLACEHOLDER)
            self.symbol = symbol
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not candles_5m or len(candles_5m) < 10:
                if self.debug_mode:
                    logger.debug(f"‚ö†Ô∏è {symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ M5 —Å–≤–µ—á–µ–π")
                return None
            
            if not candles_1d or len(candles_1d) < 30:
                if self.debug_mode:
                    logger.debug(f"‚ö†Ô∏è {symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ D1 —Å–≤–µ—á–µ–π")
                return None
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'close_price' –≤–º–µ—Å—Ç–æ 'close'
            current_price = float(candles_5m[-1]['close_price'])
            current_time = datetime.now()
            
            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if ta_context is None:
                if self.debug_mode:
                    logger.debug(f"‚ö†Ô∏è {symbol}: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —É—Ä–æ–≤–Ω–∏
            if not hasattr(ta_context, 'levels_d1') or not ta_context.levels_d1:
                if self.debug_mode:
                    logger.debug(f"‚ö†Ô∏è {symbol}: –Ω–µ—Ç —É—Ä–æ–≤–Ω–µ–π D1")
                return None
            
            # –®–∞–≥ 2: –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —É—Ä–æ–≤–Ω–µ–π
            nearest_levels = self._find_nearest_levels(
                ta_context=ta_context,
                current_price=current_price
            )
            
            if not nearest_levels:
                return None
            
            # –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –õ–ü
            for level in nearest_levels:
                self.strategy_stats["levels_analyzed"] += 1
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–æ–π
                is_false_breakout, fb_details = self._detect_false_breakout_simple(
                    level=level,
                    candles_5m=candles_5m,
                    current_price=current_price,
                    current_time=current_time
                )
                
                # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –ª–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π
                if not is_false_breakout:
                    continue
                
                self.strategy_stats["false_breakouts_detected"] += 1
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –õ–ü
                fb_type = fb_details.get("type", "simple")
                if fb_type == "simple":
                    self.strategy_stats["false_breakouts_simple"] += 1
                else:
                    self.strategy_stats["false_breakouts_strong"] += 1
                
                direction = fb_details.get("direction", "unknown")
                
                logger.info(f"üí• {symbol}: –õ–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {fb_type} "
                           f"@ {level.price:.2f}, direction={direction}")
                
                # –§–∏–ª—å—Ç—Ä: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –õ–ü
                if self.prefer_simple_fb and fb_type != "simple":
                    if self.debug_mode:
                        logger.debug(f"‚ö†Ô∏è {symbol}: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º {fb_type} –õ–ü")
                    continue
                
                # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞
                if self.confirmation_required:
                    confirmed, confirmation_details = self._check_reversal_confirmation(
                        level=level,
                        fb_details=fb_details,
                        current_price=current_price
                    )
                    
                    if not confirmed:
                        self.strategy_stats["filtered_by_confirmation"] += 1
                        if self.debug_mode:
                            logger.debug(f"‚ö†Ô∏è {symbol}: –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞")
                        continue
                    
                    self.strategy_stats["confirmations_passed"] += 1
                
                # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–±–æ—è
                if not self._check_timing(fb_details, current_time):
                    self.strategy_stats["filtered_by_time"] += 1
                    if self.debug_mode:
                        logger.debug(f"‚ö†Ô∏è {symbol}: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ –ø–æ—Å–ª–µ –õ–ü")
                    continue
                
                # –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã —É—Ä–æ–≤–Ω—è
                if self.prefer_strong_levels:
                    if level.strength < self.min_level_strength:
                        self.strategy_stats["filtered_by_level_strength"] += 1
                        if self.debug_mode:
                            logger.debug(f"‚ö†Ô∏è {symbol}: —Å–ª–∞–±—ã–π —É—Ä–æ–≤–µ–Ω—å: {level.strength:.2f}")
                        continue
                
                # –®–∞–≥ 8: –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞
                order_params = self._calculate_order_parameters(
                    level=level,
                    fb_details=fb_details,
                    ta_context=ta_context,
                    current_price=current_price
                )
                
                # –®–∞–≥ 9: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
                signal = self._create_false_breakout_signal(
                    level=level,
                    fb_details=fb_details,
                    order_params=order_params,
                    current_price=current_price
                )
                
                self.strategy_stats["signals_generated"] += 1
                
                logger.info(f"‚úÖ {symbol}: –°–∏–≥–Ω–∞–ª –õ–ü —Å–æ–∑–¥–∞–Ω: {signal.signal_type.value} @ {current_price:.2f}")
                
                return signal
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –õ–ü
            return None
            
        except Exception as e:
            logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ –≤ analyze_with_data: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return None
    
    # ==================== –ü–û–ò–°–ö –£–†–û–í–ù–ï–ô ====================
    
    def _find_nearest_levels(
        self,
        ta_context: Any,
        current_price: float
    ) -> List[Any]:
        """
        –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –õ–ü
        
        –ò—â–µ–º —É—Ä–æ–≤–Ω–∏ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ç —Ü–µ–Ω—ã (support –∏ resistance)
        
        Args:
            ta_context: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        """
        try:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–∏–ª–µ –∏ –∫–∞—Å–∞–Ω–∏—è–º
            suitable_levels = [
                level for level in ta_context.levels_d1
                if level.strength >= self.min_level_strength and
                   level.touches >= self.min_level_touches
            ]
            
            if not suitable_levels:
                return []
            
            # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —É—Ä–æ–≤–Ω–∏ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
            candidates = []
            
            for level in suitable_levels:
                distance = abs(level.price - current_price)
                distance_percent = distance / current_price
                
                if distance_percent <= self.max_distance_to_level:
                    candidates.append(level)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
            candidates.sort(key=lambda l: abs(l.price - current_price))
            
            # –ë–µ—Ä–µ–º 2-3 –±–ª–∏–∂–∞–π—à–∏—Ö
            nearest = candidates[:3]
            
            if nearest:
                logger.debug(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(nearest)} –±–ª–∏–∂–∞–π—à–∏—Ö —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –õ–ü")
            
            return nearest
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π: {e}")
            return []
    
    # ==================== –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –õ–û–ñ–ù–û–ì–û –ü–†–û–ë–û–Ø ====================
    
    def _detect_false_breakout_simple(
        self,
        level: Any,
        candles_5m: List[Dict],
        current_price: float,
        current_time: datetime
    ) -> Tuple[bool, Dict[str, Any]]:
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–±–æ—è
        
        –õ–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π = —Ü–µ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ —É—Ä–æ–≤–µ–Ω—å, –Ω–æ –≤–µ—Ä–Ω—É–ª–∞—Å—å –æ–±—Ä–∞—Ç–Ω–æ
        
        –¢–∏–ø—ã:
        1. –ü—Ä–æ—Å—Ç–æ–π –õ–ü - –ø—Ä–æ–±–∏–ª –∏ —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–ª—Å—è –Ω–∞–∑–∞–¥ (1-2 —Å–≤–µ—á–∏)
        2. –°–∏–ª—å–Ω—ã–π –õ–ü - –ø—Ä–æ–±–∏–ª, –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Å—Ç–æ—è–ª, –∑–∞—Ç–µ–º –≤–µ—Ä–Ω—É–ª—Å—è (3-5 —Å–≤–µ—á–µ–π)
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å
            candles_5m: 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            current_time: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            
        Returns:
            Tuple[–Ω–∞–π–¥–µ–Ω –ª–∏ –õ–ü?, –¥–µ—Ç–∞–ª–∏]
        """
        try:
            level_price = level.price
            level_type = level.level_type  # "support" –∏–ª–∏ "resistance"
            
            details = {
                "found": False,
                "type": "simple",
                "direction": "unknown",
                "breakout_time": None,
                "breakout_high": None,
                "breakout_low": None,
                "depth": 0
            }
            
            # –ò—â–µ–º –ø—Ä–æ–±–æ–π –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 —Å–≤–µ—á–∞—Ö (–æ–∫–æ–ª–æ 2 —á–∞—Å–æ–≤)
            lookback = min(20, len(candles_5m))
            recent_candles = candles_5m[-lookback:]
            
            for i in range(len(recent_candles) - 1, 0, -1):  # –° –∫–æ–Ω—Ü–∞ –∫ –Ω–∞—á–∞–ª—É
                candle = recent_candles[i]
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'high_price', 'low_price', 'close_price'
                high = float(candle['high_price'])
                low = float(candle['low_price'])
                close = float(candle['close_price'])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–æ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–≤–≤–µ—Ä—Ö)
                if level_type == "resistance":
                    # –ü—Ä–æ–±–æ–π = High –≤—ã—à–µ —É—Ä–æ–≤–Ω—è
                    if high > level_price:
                        depth = (high - level_price) / level_price
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª—É–±–∏–Ω—É –ø—Ä–æ–±–æ—è
                        if self.min_fb_depth <= depth <= self.max_fb_depth:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å
                            if current_price < level_price * (1 - self.confirmation_distance):
                                details["found"] = True
                                details["direction"] = "upward"
                                details["breakout_high"] = high
                                details["breakout_low"] = low
                                details["depth"] = depth * 100
                                
                                # –í—Ä–µ–º—è –ø—Ä–æ–±–æ—è
                                if 'close_time' in candle:
                                    details["breakout_time"] = candle['close_time']
                                
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –õ–ü
                                bars_since = len(recent_candles) - i - 1
                                if bars_since <= 2:
                                    details["type"] = "simple"
                                else:
                                    details["type"] = "strong"
                                
                                logger.debug(f"‚úÖ –õ–ü –≤–≤–µ—Ä—Ö –Ω–∞–π–¥–µ–Ω: –≥–ª—É–±–∏–Ω–∞ {depth*100:.2f}%, "
                                           f"—Ç–∏–ø {details['type']}, {bars_since} –±–∞—Ä–æ–≤ –Ω–∞–∑–∞–¥")
                                return True, details
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–≤–Ω–∏–∑)
                elif level_type == "support":
                    # –ü—Ä–æ–±–æ–π = Low –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è
                    if low < level_price:
                        depth = (level_price - low) / level_price
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª—É–±–∏–Ω—É –ø—Ä–æ–±–æ—è
                        if self.min_fb_depth <= depth <= self.max_fb_depth:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –Ω–∞–¥ —É—Ä–æ–≤–µ–Ω—å
                            if current_price > level_price * (1 + self.confirmation_distance):
                                details["found"] = True
                                details["direction"] = "downward"
                                details["breakout_high"] = high
                                details["breakout_low"] = low
                                details["depth"] = depth * 100
                                
                                # –í—Ä–µ–º—è –ø—Ä–æ–±–æ—è
                                if 'close_time' in candle:
                                    details["breakout_time"] = candle['close_time']
                                
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –õ–ü
                                bars_since = len(recent_candles) - i - 1
                                if bars_since <= 2:
                                    details["type"] = "simple"
                                else:
                                    details["type"] = "strong"
                                
                                logger.debug(f"‚úÖ –õ–ü –≤–Ω–∏–∑ –Ω–∞–π–¥–µ–Ω: –≥–ª—É–±–∏–Ω–∞ {depth*100:.2f}%, "
                                           f"—Ç–∏–ø {details['type']}, {bars_since} –±–∞—Ä–æ–≤ –Ω–∞–∑–∞–¥")
                                return True, details
            
            return False, details
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –õ–ü: {e}")
            return False, {}
    
    # ==================== –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –†–ê–ó–í–û–†–û–¢–ê ====================
    
    def _check_reversal_confirmation(
        self,
        level: Any,
        fb_details: Dict[str, Any],
        current_price: float
    ) -> Tuple[bool, Dict[str, Any]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –ø–æ—Å–ª–µ –õ–ü
        
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ = —Ü–µ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –∑–∞ —É—Ä–æ–≤–µ–Ω—å –∏ –∑–∞–∫—Ä–µ–ø–∏–ª–∞—Å—å
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å
            fb_details: –î–µ—Ç–∞–ª–∏ –õ–ü
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            Tuple[–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ?, –¥–µ—Ç–∞–ª–∏]
        """
        try:
            details = {}
            
            level_price = level.price
            direction = fb_details.get("direction", "unknown")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è —Ü–µ–Ω–∞
            if direction == "upward":
                # –õ–ü –≤–≤–µ—Ä—Ö ‚Üí —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è
                target_zone = level_price * (1 - self.confirmation_distance)
                confirmed = current_price < target_zone
                
                details["direction"] = "below"
                details["target_zone"] = target_zone
                details["current_price"] = current_price
                details["confirmed"] = confirmed
                
                if confirmed:
                    logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞: —Ü–µ–Ω–∞ {current_price:.2f} < {target_zone:.2f}")
                else:
                    logger.debug(f"‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: —Ü–µ–Ω–∞ {current_price:.2f} >= {target_zone:.2f}")
            
            elif direction == "downward":
                # –õ–ü –≤–Ω–∏–∑ ‚Üí —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —É—Ä–æ–≤–Ω—è
                target_zone = level_price * (1 + self.confirmation_distance)
                confirmed = current_price > target_zone
                
                details["direction"] = "above"
                details["target_zone"] = target_zone
                details["current_price"] = current_price
                details["confirmed"] = confirmed
                
                if confirmed:
                    logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞: —Ü–µ–Ω–∞ {current_price:.2f} > {target_zone:.2f}")
                else:
                    logger.debug(f"‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: —Ü–µ–Ω–∞ {current_price:.2f} <= {target_zone:.2f}")
            
            else:
                return False, details
            
            return confirmed, details
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            return False, {}
    
    # ==================== –ü–†–û–í–ï–†–ö–ê –¢–ê–ô–ú–ò–ù–ì–ê ====================
    
    def _check_timing(
        self,
        fb_details: Dict[str, Any],
        current_time: datetime
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ –ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–±–æ—è
        
        –ù–µ —Ç–æ—Ä–≥—É–µ–º —Å—Ç–∞—Ä—ã–µ –õ–ü (> 4 —á–∞—Å–æ–≤)
        
        Args:
            fb_details: –î–µ—Ç–∞–ª–∏ –õ–ü
            current_time: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            
        Returns:
            True –µ—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ–¥—Ö–æ–¥–∏—Ç
        """
        try:
            breakout_time = fb_details.get("breakout_time")
            
            if not breakout_time:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω–µ–¥–∞–≤–Ω–µ–µ
                return True
            
            # –ü—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
            time_since = current_time - breakout_time
            
            is_valid = time_since <= self.max_time_since_breakout
            
            if is_valid:
                hours_since = time_since.total_seconds() / 3600
                logger.debug(f"‚úÖ –¢–∞–π–º–∏–Ω–≥ OK: {hours_since:.1f}h –ø–æ—Å–ª–µ –õ–ü")
            else:
                hours_since = time_since.total_seconds() / 3600
                logger.debug(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ: {hours_since:.1f}h –ø–æ—Å–ª–µ –õ–ü")
            
            return is_valid
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–∏–Ω–≥–∞: {e}")
            return False
    
    # ==================== –†–ê–°–ß–ï–¢ –ü–ê–†–ê–ú–ï–¢–†–û–í –û–†–î–ï–†–ê ====================
    
    def _calculate_order_parameters(
        self,
        level: Any,
        fb_details: Dict[str, Any],
        ta_context: Any,
        current_price: float
    ) -> Dict[str, float]:
        """
        –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –õ–ü
        
        –ú–µ—Ö–∞–Ω–∏–∫–∞:
        - Entry: Market –∏–ª–∏ Limit –æ—Ç —É—Ä–æ–≤–Ω—è
        - Stop Loss: –∑–∞ –∑–æ–Ω—É –õ–ü (High/Low –ø—Ä–æ–±–æ—è √ó 1.1)
        - Take Profit: 2-3 —Å—Ç–æ–ø–∞
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å –õ–ü
            fb_details: –î–µ—Ç–∞–ª–∏ –õ–ü
            ta_context: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ—Ä–¥–µ—Ä–∞
        """
        try:
            direction = fb_details.get("direction", "unknown")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—É –õ–ü (High/Low —Å–≤–µ—á–∏ –ø—Ä–æ–±–æ—è)
            fb_high = fb_details.get("breakout_high", level.price * 1.01)
            fb_low = fb_details.get("breakout_low", level.price * 0.99)
            
            # ENTRY PRICE
            if self.entry_type == "market":
                entry_price = current_price
            else:
                # Limit –æ—Ä–¥–µ—Ä –æ—Ç —É—Ä–æ–≤–Ω—è
                offset = level.price * self.limit_offset
                
                if direction == "upward":
                    # –õ–ü –≤–≤–µ—Ä—Ö ‚Üí –≤—Ö–æ–¥–∏–º –≤ SHORT ‚Üí –ª–∏–º–∏—Ç –≤—ã—à–µ
                    entry_price = level.price + offset
                else:
                    # –õ–ü –≤–Ω–∏–∑ ‚Üí –≤—Ö–æ–¥–∏–º –≤ LONG ‚Üí –ª–∏–º–∏—Ç –Ω–∏–∂–µ
                    entry_price = level.price - offset
            
            # STOP LOSS (–∑–∞ –∑–æ–Ω—É –õ–ü)
            if direction == "upward":
                # –õ–ü –≤–≤–µ—Ä—Ö ‚Üí SHORT ‚Üí —Å—Ç–æ–ø –≤—ã—à–µ High –õ–ü
                stop_loss = fb_high * self.stop_beyond_extreme
                stop_distance = abs(entry_price - stop_loss)
            else:
                # –õ–ü –≤–Ω–∏–∑ ‚Üí LONG ‚Üí —Å—Ç–æ–ø –Ω–∏–∂–µ Low –õ–ü
                stop_loss = fb_low / self.stop_beyond_extreme
                stop_distance = abs(stop_loss - entry_price)
            
            # TAKE PROFIT
            basic_tp_distance = stop_distance * self.take_profit_ratio
            
            if direction == "upward":
                # SHORT
                take_profit = entry_price - basic_tp_distance
            else:
                # LONG
                take_profit = entry_price + basic_tp_distance
            
            # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ R:R
            actual_tp_distance = abs(take_profit - entry_price)
            actual_rr_ratio = actual_tp_distance / stop_distance if stop_distance > 0 else 0
            
            params = {
                "entry_price": entry_price,
                "entry_type": self.entry_type,
                "stop_loss": stop_loss,
                "take_profit": take_profit,
                "stop_distance": stop_distance,
                "tp_distance": actual_tp_distance,
                "risk_reward_ratio": actual_rr_ratio,
                "level_price": level.price,
                "fb_high": fb_high,
                "fb_low": fb_low
            }
            
            logger.debug(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞ –õ–ü: Entry={entry_price:.2f} ({self.entry_type}), "
                        f"SL={stop_loss:.2f}, TP={take_profit:.2f}, R:R={actual_rr_ratio:.1f}:1")
            
            return params
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return {}
    
    # ==================== –°–û–ó–î–ê–ù–ò–ï –°–ò–ì–ù–ê–õ–ê ====================
    
    def _create_false_breakout_signal(
        self,
        level: Any,
        fb_details: Dict[str, Any],
        order_params: Dict[str, float],
        current_price: float
    ) -> TradingSignal:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –õ–ü
        
        –¢–æ—Ä–≥—É–µ–º –ü–†–û–¢–ò–í –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–æ—è:
        - –õ–ü –≤–≤–µ—Ä—Ö ‚Üí SELL
        - –õ–ü –≤–Ω–∏–∑ ‚Üí BUY
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å –õ–ü
            fb_details: –î–µ—Ç–∞–ª–∏ –õ–ü
            order_params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            TradingSignal
        """
        try:
            direction = fb_details.get("direction", "unknown")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞ (–ü–†–û–¢–ò–í –ø—Ä–æ–±–æ—è)
            if direction == "upward":
                # –õ–ü –≤–≤–µ—Ä—Ö ‚Üí –≤—Ö–æ–¥–∏–º –≤ SHORT
                signal_type = SignalType.SELL
                
                # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ–π –õ–ü ‚Üí STRONG
                if fb_details.get("type") == "simple":
                    signal_type = SignalType.STRONG_SELL
            
            else:
                # –õ–ü –≤–Ω–∏–∑ ‚Üí –≤—Ö–æ–¥–∏–º –≤ LONG
                signal_type = SignalType.BUY
                
                # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ–π –õ–ü ‚Üí STRONG
                if fb_details.get("type") == "simple":
                    signal_type = SignalType.STRONG_BUY
            
            # –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
            strength = self._calculate_signal_strength(
                fb_details=fb_details,
                level=level
            )
            
            # –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence = self._calculate_signal_confidence(
                fb_details=fb_details,
                level=level,
                order_params=order_params
            )
            
            # –ü—Ä–∏—á–∏–Ω—ã
            reasons = self._build_signal_reasons(
                level=level,
                fb_details=fb_details,
                order_params=order_params
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
            signal = self.create_signal(
                signal_type=signal_type,
                strength=strength,
                confidence=confidence,
                current_price=current_price,
                reasons=reasons
            )
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            signal.stop_loss = order_params.get("stop_loss")
            signal.take_profit = order_params.get("take_profit")
            
            # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            signal.position_size_recommendation = min(
                0.02 * confidence,  # –î–æ 2% –ø—Ä–∏ –º–∞–∫—Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                0.04  # –ù–æ –Ω–µ –±–æ–ª–µ–µ 4%
            )
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            signal.add_technical_indicator(
                "false_breakout_type",
                fb_details.get("type", "simple"),
                f"–¢–∏–ø –õ–ü: {fb_details.get('type', 'simple')}"
            )
            
            signal.add_technical_indicator(
                "level_price",
                level.price,
                f"{level.level_type} @ {level.price:.2f}"
            )
            
            signal.add_technical_indicator(
                "breakout_depth",
                fb_details.get("depth", 0),
                f"–ì–ª—É–±–∏–Ω–∞: {fb_details.get('depth', 0):.2f}%"
            )
            
            signal.add_technical_indicator(
                "entry_type",
                order_params.get("entry_type"),
                f"–í—Ö–æ–¥: {order_params.get('entry_type')}"
            )
            
            signal.add_technical_indicator(
                "risk_reward",
                order_params.get("risk_reward_ratio"),
                f"R:R = {order_params.get('risk_reward_ratio'):.1f}:1"
            )
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            signal.technical_indicators["fb_details"] = fb_details
            signal.technical_indicators["order_params"] = order_params
            
            return signal
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            direction = fb_details.get("direction", "unknown")
            return self.create_signal(
                signal_type=SignalType.SELL if direction == "upward" else SignalType.BUY,
                strength=0.5,
                confidence=0.5,
                current_price=current_price,
                reasons=["–õ–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π —É—Ä–æ–≤–Ω—è"]
            )
    
    def _calculate_signal_strength(
        self,
        fb_details: Dict[str, Any],
        level: Any
    ) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞"""
        strength = 0.5  # –ë–∞–∑–æ–≤–∞—è
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ç–∏–ø –õ–ü
        if fb_details.get("type") == "simple":
            strength += 0.2  # –ü—Ä–æ—Å—Ç–æ–π –õ–ü = —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π
        else:
            strength += 0.1
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        if hasattr(level, 'is_strong') and level.is_strong:
            strength += 0.1
        
        # –ë–æ–Ω—É—Å –∑–∞ –Ω–µ–±–æ–ª—å—à—É—é –≥–ª—É–±–∏–Ω—É –ø—Ä–æ–±–æ—è (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ)
        depth = fb_details.get("depth", 0)
        if depth < 0.5:  # < 0.5%
            strength += 0.1
        
        return min(1.0, strength)
    
    def _calculate_signal_confidence(
        self,
        fb_details: Dict[str, Any],
        level: Any,
        order_params: Dict[str, float]
    ) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–∏–≥–Ω–∞–ª–µ"""
        confidence = 0.6  # –ë–∞–∑–æ–≤–∞—è
        
        # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–æ—Å—Ç–æ–π –õ–ü
        if fb_details.get("type") == "simple":
            confidence += 0.15
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        if hasattr(level, 'strength') and level.strength >= 0.8:
            confidence += 0.1
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ö–æ—Ä–æ—à–∏–π R:R
        rr_ratio = order_params.get("risk_reward_ratio", 0)
        if rr_ratio >= 2.5:
            confidence += 0.05
        
        return min(1.0, confidence)
    
    def _build_signal_reasons(
        self,
        level: Any,
        fb_details: Dict[str, Any],
        order_params: Dict[str, float]
    ) -> List[str]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏—á–∏–Ω —Å–∏–≥–Ω–∞–ª–∞"""
        reasons = []
        
        # –¢–∏–ø –õ–ü
        fb_type = fb_details.get("type", "simple")
        fb_type_names = {
            "simple": "–ü—Ä–æ—Å—Ç–æ–π –õ–ü (1-2 –±–∞—Ä–∞)",
            "strong": "–°–∏–ª—å–Ω—ã–π –õ–ü (3+ –±–∞—Ä–∞)"
        }
        
        fb_name = fb_type_names.get(fb_type, "–õ–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π")
        
        direction = fb_details.get("direction", "unknown")
        direction_text = "–≤–≤–µ—Ä—Ö" if direction == "upward" else "–≤–Ω–∏–∑"
        
        reasons.append(f"{fb_name} {direction_text} —á–µ—Ä–µ–∑ {level.level_type} @ {level.price:.2f}")
        
        # –ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ–±–æ—è
        depth = fb_details.get("depth", 0)
        if depth > 0:
            reasons.append(f"–ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ–±–æ—è: {depth:.2f}%")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞
        reasons.append("–¶–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç –∑–∞ —É—Ä–æ–≤–µ–Ω—å")
        
        # –°–∏–ª–∞ —É—Ä–æ–≤–Ω—è
        if hasattr(level, 'is_strong') and level.is_strong:
            reasons.append(f"–°–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: strength={level.strength:.2f}, touches={level.touches}")
        
        # R:R
        rr_ratio = order_params.get("risk_reward_ratio", 0)
        if rr_ratio > 0:
            reasons.append(f"–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ R:R = {rr_ratio:.1f}:1")
        
        # –¢–∏–ø –≤—Ö–æ–¥–∞
        entry_type = order_params.get("entry_type", "market")
        if entry_type == "limit":
            reasons.append(f"–õ–∏–º–∏—Ç –æ—Ä–¥–µ—Ä –æ—Ç {order_params.get('entry_price'):.2f}")
        
        return reasons
    
    # ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================
    
    def get_strategy_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        base_stats = self.get_stats()
        
        return {
            **base_stats,
            "strategy_type": "FalseBreakoutStrategy",
            "strategy_stats": self.strategy_stats.copy(),
            "config": {
                "min_level_strength": self.min_level_strength,
                "fb_depth_range": f"{self.min_fb_depth*100}-{self.max_fb_depth*100}%",
                "prefer_simple_fb": self.prefer_simple_fb,
                "confirmation_required": self.confirmation_required,
                "max_time_after_fb_hours": self.max_time_since_breakout.total_seconds() / 3600,
                "entry_type": self.entry_type,
                "take_profit_ratio": self.take_profit_ratio
            }
        }
    
    def __str__(self):
        stats = self.get_strategy_stats()
        return (f"FalseBreakoutStrategy(symbol={self.symbol}, "
                f"fb_detected={stats['strategy_stats']['false_breakouts_detected']}, "
                f"signals={stats['signals_sent']}, "
                f"simple_fb={stats['strategy_stats']['false_breakouts_simple']}, "
                f"success_rate={stats['analysis_success_rate']:.1f}%)")


# Export
__all__ = ["FalseBreakoutStrategy"]

logger.info("‚úÖ False Breakout Strategy v3.0.1 loaded (FIXED: KeyError resolved)")
