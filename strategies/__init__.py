"""
–ú–æ–¥—É–ª—å —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π v3.0.0

–°–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.

–ò–∑–º–µ–Ω–µ–Ω–∏—è v3.0.0:
- ‚úÖ –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–¥ StrategyOrchestrator
- ‚úÖ –ú–µ—Ç–æ–¥ analyze_with_data() —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö
- ‚úÖ –£–±—Ä–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç MarketDataSnapshot
- ‚úÖ –ü—Ä—è–º–∞—è —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Repository
- ‚ùå MomentumStrategy —É–¥–∞–ª–µ–Ω–∞ (–±—É–¥–µ—Ç –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ–∑–∂–µ)

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- BaseStrategy: –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
- BreakoutStrategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–æ–±–æ–µ–≤ —É—Ä–æ–≤–Ω–µ–π
- BounceStrategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ—Ç–±–æ–µ–≤ –æ—Ç —É—Ä–æ–≤–Ω–µ–π (–ë–°–£-–ë–ü–£ –º–æ–¥–µ–ª—å)
- FalseBreakoutStrategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–æ–µ–≤
- StrategyOrchestrator: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è:
- MomentumStrategy: –ò–º–ø—É–ª—å—Å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
- TechnicalStrategy: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (RSI, MACD, Bollinger Bands)
- SentimentStrategy: –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π —Ä—ã–Ω–∫–∞
- MLStrategy: –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è

Author: Trading Bot Team
Version: 3.0.0 - Orchestrator Integration
"""

import logging

# –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
from .base_strategy import BaseStrategy, TradingSignal, SignalType, SignalStrength

# –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ v3.0
from .breakout_strategy import BreakoutStrategy
from .bounce_strategy import BounceStrategy
from .false_breakout_strategy import FalseBreakoutStrategy

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
from .strategy_orchestrator import StrategyOrchestrator

# –ë—É–¥—É—â–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
# from .momentum_strategy import MomentumStrategy  # TODO: –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥ v3.0
# from .technical_strategy import TechnicalStrategy
# from .sentiment_strategy import SentimentStrategy

logger = logging.getLogger(__name__)

__all__ = [
    # –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
    "BaseStrategy",
    "TradingSignal",
    "SignalType", 
    "SignalStrength",
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ v3.0
    "BreakoutStrategy",
    "BounceStrategy",
    "FalseBreakoutStrategy",
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
    "StrategyOrchestrator",
    
    # –£—Ç–∏–ª–∏—Ç—ã
    "get_available_strategies",
    "create_strategy",
    "get_strategy_info",
    "get_all_strategies_info",
    "list_strategies",
    "get_strategies_by_category",
    "print_strategies_info"
]

__version__ = "3.0.0"

# ==================== –ú–ï–¢–ê–î–ê–ù–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ô ====================

AVAILABLE_STRATEGIES = {
    "breakout": {
        "name": "BreakoutStrategy",
        "class_name": "BreakoutStrategy",
        "description": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–æ–±–æ–µ–≤ –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π",
        "details": "–õ–æ–≤–∏—Ç –∏–º–ø—É–ª—å—Å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è. –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥–∂–∞—Ç–∏–µ, –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—é –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é. –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–Ω–æ–º ATR. Entry: Buy/Sell Stop –∑–∞ —É—Ä–æ–≤–Ω–µ–º. R:R –º–∏–Ω–∏–º—É–º 3:1.",
        "class": BreakoutStrategy,
        "enabled": True,
        "version": "3.0.0",
        "category": "level_based",
        "timeframes": ["5m", "1h", "1d"],
        "min_data_required": "180 —Å–≤–µ—á–µ–π D1 + 50 —Å–≤–µ—á–µ–π M5 + 24 —Å–≤–µ—á–µ–π H1",
        "avg_signals_per_day": "2-4",
        "suitable_for": ["—Å–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥", "–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"],
        "risk_level": "—Å—Ä–µ–¥–Ω–∏–π",
        "api_version": "analyze_with_data"
    },
    
    "bounce": {
        "name": "BounceStrategy",
        "class_name": "BounceStrategy",
        "description": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ—Ç–±–æ–µ–≤ –æ—Ç —É—Ä–æ–≤–Ω–µ–π (–ë–°–£-–ë–ü–£ –º–æ–¥–µ–ª—å)",
        "details": "–¢–æ—Ä–≥—É–µ—Ç –æ—Ç—Å–∫–æ–∫ –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å –ë–°–£-–ë–ü–£ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –í—Ö–æ–¥: Limit –æ—Ä–¥–µ—Ä —Å –ª—é—Ñ—Ç–æ–º 20% –æ—Ç SL. R:R –º–∏–Ω–∏–º—É–º 3:1. –†–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–Ω–æ–º ATR.",
        "class": BounceStrategy,
        "enabled": True,
        "version": "3.0.0",
        "category": "level_based",
        "timeframes": ["1h", "1d"],
        "min_data_required": "180 —Å–≤–µ—á–µ–π D1 + 24 —Å–≤–µ—á–µ–π H1",
        "avg_signals_per_day": "1-3",
        "suitable_for": ["—Å–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥", "—Ç–æ—á–µ—á–Ω—ã–µ –≤—Ö–æ–¥—ã"],
        "risk_level": "–Ω–∏–∑–∫–∏–π-—Å—Ä–µ–¥–Ω–∏–π",
        "api_version": "analyze_with_data"
    },
    
    "false_breakout": {
        "name": "FalseBreakoutStrategy",
        "class_name": "FalseBreakoutStrategy",
        "description": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–æ–µ–≤ (–ª–æ–≤—É—à–µ–∫)",
        "details": "–õ–æ–≤–∏—Ç —Ä–∞–∑–≤–æ—Ä–æ—Ç—ã –ø–æ—Å–ª–µ –ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–±–æ—è —É—Ä–æ–≤–Ω—è. –¢–æ—Ä–≥—É–µ—Ç –ü–†–û–¢–ò–í –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–æ—è. Entry: Market –∏–ª–∏ Limit. –ë—ã—Å—Ç—Ä—ã–µ —Å–¥–µ–ª–∫–∏ (1-4 —á–∞—Å–∞). R:R 2.5:1. –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞.",
        "class": FalseBreakoutStrategy,
        "enabled": True,
        "version": "3.0.0",
        "category": "level_based",
        "timeframes": ["5m", "1h"],
        "min_data_required": "180 —Å–≤–µ—á–µ–π D1 + 50 —Å–≤–µ—á–µ–π M5",
        "avg_signals_per_day": "2-5",
        "suitable_for": ["–∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", "–ª–æ–≤–ª—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–≤"],
        "risk_level": "—Å—Ä–µ–¥–Ω–∏–π-–≤—ã—Å–æ–∫–∏–π",
        "api_version": "analyze_with_data"
    },
    
    # ==================== –í –†–ê–ó–†–ê–ë–û–¢–ö–ï ====================
    
    "momentum": {
        "name": "MomentumStrategy",
        "class_name": "MomentumStrategy",
        "description": "–ò–º–ø—É–ª—å—Å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–≤–∏–∂–µ–Ω–∏–π —Ü–µ–Ω—ã",
        "details": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –∑–∞ 1–º, 5–º, 1—á. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö (>2%), –∏–º–ø—É–ª—å—Å–∞—Ö –∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞—Ö —Ç—Ä–µ–Ω–¥–∞. –í –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥ v3.0.",
        "class": None,  # TODO: –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥ analyze_with_data
        "enabled": False,
        "version": "2.0.0",
        "category": "momentum",
        "timeframes": ["1m", "5m", "1h"],
        "min_data_required": "100 —Å–≤–µ—á–µ–π M1 + 50 —Å–≤–µ—á–µ–π M5 + 24 —Å–≤–µ—á–µ–π H1",
        "avg_signals_per_day": "8-15",
        "suitable_for": ["—Å–∫–∞–ª—å–ø–∏–Ω–≥", "–≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"],
        "risk_level": "—Å—Ä–µ–¥–Ω–∏–π-–≤—ã—Å–æ–∫–∏–π",
        "api_version": "legacy"
    },
    
    "technical": {
        "name": "TechnicalStrategy", 
        "class_name": "TechnicalStrategy",
        "description": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ RSI, MACD, Bollinger Bands",
        "details": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤. –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏, –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å, –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è MACD.",
        "class": None,  # TODO: –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
        "enabled": False,
        "version": "1.0.0",
        "category": "indicator_based",
        "timeframes": ["15m", "1h", "4h"],
        "min_data_required": "200 —Å–≤–µ—á–µ–π",
        "avg_signals_per_day": "3-6",
        "suitable_for": ["—Å–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥"],
        "risk_level": "—Å—Ä–µ–¥–Ω–∏–π",
        "api_version": "future"
    },
    
    "sentiment": {
        "name": "SentimentStrategy",
        "class_name": "SentimentStrategy",
        "description": "–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π —Ä—ã–Ω–∫–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤",
        "details": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏, –Ω–æ–≤–æ—Å—Ç–∏, —Å—Ç—Ä–∞—Ö/–∂–∞–¥–Ω–æ—Å—Ç—å. –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤.",
        "class": None,  # TODO: –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
        "enabled": False,
        "version": "1.0.0",
        "category": "sentiment_based",
        "timeframes": ["1h", "4h", "1d"],
        "min_data_required": "–í–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ + 100 —Å–≤–µ—á–µ–π",
        "avg_signals_per_day": "1-3",
        "suitable_for": ["–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"],
        "risk_level": "—Å—Ä–µ–¥–Ω–∏–π",
        "api_version": "future"
    }
}

# ==================== –£–¢–ò–õ–ò–¢–´ ====================

def get_available_strategies():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ v3.0)
    
    Returns:
        Dict[str, dict]: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    """
    available = {
        k: v for k, v in AVAILABLE_STRATEGIES.items() 
        if v["enabled"] and v["class"] is not None
    }
    
    logger.debug(f"üìã –î–æ—Å—Ç—É–ø–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(available)}/{len(AVAILABLE_STRATEGIES)}")
    
    return available


def get_all_strategies_info():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
    
    Returns:
        Dict[str, dict]: –ü–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    """
    return AVAILABLE_STRATEGIES.copy()


def get_strategy_info(strategy_name: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    
    Args:
        strategy_name: –ò–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ("breakout", "bounce", "false_breakout", etc.)
        
    Returns:
        dict –∏–ª–∏ None: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    return AVAILABLE_STRATEGIES.get(strategy_name)


def create_strategy(strategy_type: str, **kwargs) -> BaseStrategy:
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    
    Args:
        strategy_type: –¢–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ("breakout", "bounce", "false_breakout")
        **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            - symbol: str (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            - repository: MarketDataRepository (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            - ta_context_manager: TechnicalAnalysisContextManager (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            - –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
    Returns:
        BaseStrategy: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
    Raises:
        ValueError: –ï—Å–ª–∏ —Ç–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
        
    Examples:
        >>> breakout = create_strategy(
        ...     "breakout", 
        ...     symbol="BTCUSDT",
        ...     repository=repo,
        ...     ta_context_manager=ta_manager
        ... )
        >>> 
        >>> bounce = create_strategy(
        ...     "bounce",
        ...     symbol="ETHUSDT",
        ...     repository=repo,
        ...     ta_context_manager=ta_manager
        ... )
    """
    strategy_type = strategy_type.lower()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    if strategy_type not in AVAILABLE_STRATEGIES:
        available = list(AVAILABLE_STRATEGIES.keys())
        raise ValueError(
            f"Unknown strategy type: '{strategy_type}'. "
            f"Available strategies: {', '.join(available)}"
        )
    
    strategy_info = AVAILABLE_STRATEGIES[strategy_type]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–∫–ª—é—á–µ–Ω–∞
    if not strategy_info["enabled"]:
        raise ValueError(
            f"Strategy '{strategy_type}' is disabled. "
            f"Status: {strategy_info.get('version', 'unknown')} - {strategy_info.get('api_version', 'unknown')}"
        )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
    if strategy_info["class"] is None:
        raise ValueError(
            f"Strategy '{strategy_type}' is not implemented yet. "
            f"Coming soon!"
        )
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    strategy_class = strategy_info["class"]
    
    try:
        instance = strategy_class(**kwargs)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_info['name']} v{strategy_info['version']}")
        return instance
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ '{strategy_type}': {e}")
        raise


def list_strategies(category: str = None, enabled_only: bool = True):
    """
    –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    
    Args:
        category: –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ("momentum", "level_based", "indicator_based", "sentiment_based")
        enabled_only: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        
    Examples:
        >>> list_strategies()  # –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ
        ['breakout', 'bounce', 'false_breakout']
        >>> 
        >>> list_strategies(category="level_based")
        ['breakout', 'bounce', 'false_breakout']
        >>> 
        >>> list_strategies(enabled_only=False)  # –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        ['breakout', 'bounce', 'false_breakout', 'momentum', 'technical', 'sentiment']
    """
    strategies = AVAILABLE_STRATEGIES
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if category:
        strategies = {
            k: v for k, v in strategies.items()
            if v.get("category") == category
        }
    
    # –§–∏–ª—å—Ç—Ä –ø–æ enabled
    if enabled_only:
        strategies = {
            k: v for k, v in strategies.items()
            if v["enabled"] and v["class"] is not None
        }
    
    return list(strategies.keys())


def get_strategies_by_category():
    """
    –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    
    Returns:
        Dict[str, List[str]]: –°–ª–æ–≤–∞—Ä—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è -> —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        
    Example:
        >>> get_strategies_by_category()
        {
            'level_based': ['breakout', 'bounce', 'false_breakout'],
            'momentum': ['momentum'],
            'indicator_based': ['technical'],
            'sentiment_based': ['sentiment']
        }
    """
    categorized = {}
    
    for strategy_name, info in AVAILABLE_STRATEGIES.items():
        category = info.get("category", "other")
        
        if category not in categorized:
            categorized[category] = []
        
        categorized[category].append(strategy_name)
    
    return categorized


def print_strategies_info():
    """
    –ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö –≤ –ª–æ–≥
    """
    logger.info("=" * 80)
    logger.info("üìä –î–û–°–¢–£–ü–ù–´–ï –¢–û–†–ì–û–í–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò v3.0.0")
    logger.info("=" * 80)
    
    available = get_available_strategies()
    disabled = {
        k: v for k, v in AVAILABLE_STRATEGIES.items() 
        if not v["enabled"] or v["class"] is None
    }
    
    logger.info(f"\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {len(available)}")
    
    for name, info in available.items():
        logger.info(f"\nüîπ {info['name']} v{info['version']}")
        logger.info(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}")
        logger.info(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {info['category']}")
        logger.info(f"   –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(info['timeframes'])}")
        logger.info(f"   –°–∏–≥–Ω–∞–ª–æ–≤/–¥–µ–Ω—å: {info['avg_signals_per_day']}")
        logger.info(f"   –†–∏—Å–∫: {info['risk_level']}")
        logger.info(f"   API: {info['api_version']}")
    
    if disabled:
        logger.info(f"\n‚è≥ –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ / –æ—Ç–∫–ª—é—á–µ–Ω—ã: {len(disabled)}")
        for name, info in disabled.items():
            status = f"v{info['version']} - {info['api_version']}"
            logger.info(f"   ‚Ä¢ {info['name']} ({status})")
    
    logger.info("\n" + "=" * 80)


def get_orchestrator_compatible_strategies():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å StrategyOrchestrator
    
    Returns:
        Dict[str, dict]: –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å api_version="analyze_with_data"
    """
    compatible = {
        k: v for k, v in AVAILABLE_STRATEGIES.items()
        if v.get("api_version") == "analyze_with_data" and 
           v["enabled"] and 
           v["class"] is not None
    }
    
    logger.debug(f"üé≠ –°–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å Orchestrator —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(compatible)}")
    
    return compatible


# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–£–õ–Ø ====================

# –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
logger.info("=" * 70)
logger.info("üì¶ –ú–æ–¥—É–ª—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω")
logger.info(f"   –í–µ—Ä—Å–∏—è: {__version__}")
logger.info(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(get_available_strategies())}")
logger.info(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(AVAILABLE_STRATEGIES)}")
logger.info("=" * 70)

# –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π v3.0
active_strategies = [
    f"{info['name']} v{info['version']}" 
    for info in get_available_strategies().values()
]
if active_strategies:
    logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ (v3.0): {', '.join(active_strategies)}")

# –°–ø–∏—Å–æ–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å Orchestrator
orchestrator_compatible = get_orchestrator_compatible_strategies()
if orchestrator_compatible:
    compatible_names = [info['name'] for info in orchestrator_compatible.values()]
    logger.info(f"üé≠ Orchestrator-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ: {', '.join(compatible_names)}")

# –°–ø–∏—Å–æ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
pending_strategies = [
    f"{info['name']} ({info.get('api_version', 'unknown')})"
    for name, info in AVAILABLE_STRATEGIES.items() 
    if not info['enabled'] or info['class'] is None
]
if pending_strategies:
    logger.info(f"‚è≥ –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: {', '.join(pending_strategies)}")

logger.info("=" * 70)

# –í–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
logger.info("üí° –í–∞–∂–Ω–æ:")
logger.info("   ‚Ä¢ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç analyze_with_data()")
logger.info("   ‚Ä¢ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ StrategyOrchestrator")
logger.info("   ‚Ä¢ MomentumStrategy –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥ v3.0")
logger.info("=" * 70)
