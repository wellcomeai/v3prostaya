"""
Breakout Strategy v3.0 - –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–æ–±–æ—è —Å analyze_with_data()

–¢–æ—Ä–≥—É–µ—Ç –∏–º–ø—É–ª—å—Å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π.

–£—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ (–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞):
1. ‚úÖ –£—Ä–æ–≤–µ–Ω—å —Å D1 –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
2. ‚úÖ –ü–æ–¥—Ö–æ–¥ –∫ —É—Ä–æ–≤–Ω—é –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±–∞—Ä–∞–º–∏ (–ø–æ–¥–∂–∞—Ç–∏–µ)
3. ‚úÖ –ë–ª–∏–∂–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç (–¥–æ 1 –Ω–µ–¥–µ–ª–∏, –∏–¥–µ–∞–ª—å–Ω–æ 3 —Å–≤–µ—á–∏)
4. ‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤–±–ª–∏–∑–∏ —É—Ä–æ–≤–Ω—è
5. ‚úÖ –î–æ–ª–≥–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è (—ç–Ω–µ—Ä–≥–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∞)
6. ‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∞—Ä–∞ –ø–æ–¥ —Å–∞–º—ã–π Hi/Low –±–µ–∑ –æ—Ç–∫–∞—Ç–∞ (–º–∞–∫—Å 10%)
7. ‚úÖ ATR –Ω–µ –∏—Å—á–µ—Ä–ø–∞–Ω (< 75%)

–ú–µ—Ö–∞–Ω–∏–∫–∞ –≤—Ö–æ–¥–∞:
- Buy Stop / Sell Stop ‚Üí –∑–∞ —É—Ä–æ–≤–Ω–µ–º (+1-2 –ø—É–Ω–∫—Ç–∞)
- Stop Loss ‚Üí —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π (–∑–∞ —É—Ä–æ–≤–µ–Ω—å)
- Take Profit ‚Üí –º–∏–Ω–∏–º—É–º 3:1
- –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ –µ—Å–ª–∏ —Ü–µ–Ω–∞ –æ—Ç–æ—à–ª–∞ –Ω–∞ 1 ATR –æ—Ç –∑–∞—è–≤–∫–∏

Author: Trading Bot Team
Version: 3.0.1 - FIXED: KeyError 'close' -> 'close_price'
"""

import logging
from typing import Optional, Dict, Any, List, Tuple
from datetime import datetime, timedelta

from .base_strategy import BaseStrategy, TradingSignal, SignalType, SignalStrength

logger = logging.getLogger(__name__)


class BreakoutStrategy(BaseStrategy):
    """
    üí• –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–æ–±–æ—è —É—Ä–æ–≤–Ω–µ–π v3.0
    
    –°—Ç–∞–≤–∫–∞ –Ω–∞ –∏–º–ø—É–ª—å—Å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è.
    –¢—Ä–µ–±—É–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ (–∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏) –ø–µ—Ä–µ–¥ –ø—Ä–æ–±–æ–µ–º.
    
    –ò–∑–º–µ–Ω–µ–Ω–∏—è v3.0.1:
    - ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: KeyError 'close' -> –∏—Å–ø–æ–ª—å–∑—É–µ–º 'close_price'
    - ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: KeyError 'high' -> –∏—Å–ø–æ–ª—å–∑—É–µ–º 'high_price'
    - ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: KeyError 'low' -> –∏—Å–ø–æ–ª—å–∑—É–µ–º 'low_price'
    - ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: KeyError 'open' -> –∏—Å–ø–æ–ª—å–∑—É–µ–º 'open_price'
    
    –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:
    - –õ–æ–≤–∏—Ç –∫—Ä—É–ø–Ω—ã–µ –∏–º–ø—É–ª—å—Å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è
    - –í—ã—Å–æ–∫–∏–π R:R (–º–∏–Ω–∏–º—É–º 3:1)
    - –ß–µ—Ç–∫–∏–µ —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞
    
    –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:
    - –¢—Ä–µ–±—É–µ—Ç —Ç–µ—Ä–ø–µ–Ω–∏—è (–∂–¥–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è)
    - –õ–æ–∂–Ω—ã–µ –ø—Ä–æ–±–æ–∏ –º–æ–≥—É—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç–æ–ø
    - –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–Ω–æ–º ATR
    
    Usage:
        strategy = BreakoutStrategy(
            symbol="BTCUSDT",
            repository=repository,
            ta_context_manager=ta_manager
        )
        
        signal = await strategy.analyze_with_data(
            symbol="BTCUSDT",
            candles_1m=candles_1m,
            candles_5m=candles_5m,
            candles_1h=candles_1h,
            candles_1d=candles_1d,
            ta_context=context
        )
    """
    
    def __init__(
        self,
        symbol: str = "BTCUSDT",
        repository=None,
        ta_context_manager=None,
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Ä–æ–≤–Ω–µ–π
        min_level_strength: float = 0.5,
        max_distance_to_level_percent: float = 2.0,
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∂–∞—Ç–∏—è
        require_compression: bool = False,
        compression_min_bars: int = 3,
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ—Ç–µ—Å—Ç–∞
        near_retest_max_days: int = 7,
        ideal_retest_touches: int = 3,
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫—Ä—ã—Ç–∏—è
        close_near_level_tolerance: float = 0.5,
        close_near_extreme_max_pullback: float = 10.0,
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–Ω–µ—Ä–≥–∏–∏
        require_consolidation: bool = True,
        min_energy_level: str = "moderate",
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ATR
        atr_exhaustion_threshold: float = 0.75,
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–æ–≤
        entry_offset_points: float = 2.0,
        stop_loss_multiplier: float = 1.0,
        take_profit_ratio: float = 3.0,
        order_cancel_atr_distance: float = 1.0,
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        min_signal_strength: float = 0.6,
        signal_cooldown_minutes: int = 30,
        max_signals_per_hour: int = 2,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–±–æ—è
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            repository: MarketDataRepository
            ta_context_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            [–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–º. –≤—ã—à–µ]
        """
        super().__init__(
            name="BreakoutStrategy",
            symbol=symbol,
            repository=repository,
            ta_context_manager=ta_context_manager,
            min_signal_strength=min_signal_strength,
            signal_cooldown_minutes=signal_cooldown_minutes,
            max_signals_per_hour=max_signals_per_hour,
            enable_risk_management=True
        )
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Ä–æ–≤–Ω–µ–π
        self.min_level_strength = min_level_strength
        self.max_distance_to_level = max_distance_to_level_percent / 100.0
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∂–∞—Ç–∏—è
        self.require_compression = require_compression
        self.compression_min_bars = compression_min_bars
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ—Ç–µ—Å—Ç–∞
        self.near_retest_max_days = near_retest_max_days
        self.ideal_retest_touches = ideal_retest_touches
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫—Ä—ã—Ç–∏—è
        self.close_near_level_tolerance = close_near_level_tolerance
        self.close_near_extreme_max_pullback = close_near_extreme_max_pullback
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–Ω–µ—Ä–≥–∏–∏
        self.require_consolidation = require_consolidation
        self.min_energy_level = min_energy_level
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ATR
        self.atr_exhaustion_threshold = atr_exhaustion_threshold
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–æ–≤
        self.entry_offset = entry_offset_points
        self.stop_loss_multiplier = stop_loss_multiplier
        self.take_profit_ratio = take_profit_ratio
        self.order_cancel_distance = order_cancel_atr_distance
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.strategy_stats = {
            "levels_analyzed": 0,
            "compressions_found": 0,
            "consolidations_found": 0,
            "setups_found": 0,
            "signals_generated": 0,
            "setups_filtered_by_atr": 0,
            "setups_filtered_by_energy": 0,
            "setups_filtered_by_compression": 0
        }
        
        logger.info("üí• BreakoutStrategy v3.0.1 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (FIXED)")
        logger.info(f"   ‚Ä¢ Symbol: {symbol}")
        logger.info(f"   ‚Ä¢ Require compression: {require_compression}")
        logger.info(f"   ‚Ä¢ Require consolidation: {require_consolidation}")
        logger.info(f"   ‚Ä¢ Min energy: {min_energy_level}")
        logger.info(f"   ‚Ä¢ ATR exhaustion: {atr_exhaustion_threshold*100}%")
    
    # ==================== –ù–û–í–´–ô API v3.0 ====================
    
    async def analyze_with_data(
        self,
        symbol: str,
        candles_1m: List[Dict],
        candles_5m: List[Dict],
        candles_1h: List[Dict],
        candles_1d: List[Dict],
        ta_context: Optional[Any] = None
    ) -> Optional[TradingSignal]:
        """
        üéØ –ê–Ω–∞–ª–∏–∑ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (v3.0)
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        2. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        3. –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞
        5. –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞
        6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            candles_1m: –ú–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
            candles_5m: 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
            candles_1h: –ß–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24)
            candles_1d: –î–Ω–µ–≤–Ω—ã–µ —Å–≤–µ—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 180)
            ta_context: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (—É—Ä–æ–≤–Ω–∏, ATR)
            
        Returns:
            TradingSignal –∏–ª–∏ None
        """
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º symbol (–µ—Å–ª–∏ –±—ã–ª PLACEHOLDER)
            self.symbol = symbol
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not candles_5m or len(candles_5m) < 20:
                if self.debug_mode:
                    logger.debug(f"‚ö†Ô∏è {symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ M5 —Å–≤–µ—á–µ–π")
                return None
            
            if not candles_1d or len(candles_1d) < 30:
                if self.debug_mode:
                    logger.debug(f"‚ö†Ô∏è {symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ D1 —Å–≤–µ—á–µ–π")
                return None
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'close_price' –≤–º–µ—Å—Ç–æ 'close'
            current_price = float(candles_5m[-1]['close_price'])
            
            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if ta_context is None:
                if self.debug_mode:
                    logger.debug(f"‚ö†Ô∏è {symbol}: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if not hasattr(ta_context, 'levels_d1') or not ta_context.levels_d1:
                if self.debug_mode:
                    logger.debug(f"‚ö†Ô∏è {symbol}: –Ω–µ—Ç —É—Ä–æ–≤–Ω–µ–π D1 –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
                return None
            
            # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ ATR (–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å—á–µ—Ä–ø–∞–Ω)
            if hasattr(ta_context, 'atr_data') and ta_context.atr_data:
                atr_used = ta_context.atr_data.current_range_used if hasattr(ta_context.atr_data, 'current_range_used') else 0
                if atr_used > self.atr_exhaustion_threshold:
                    self.strategy_stats["setups_filtered_by_atr"] += 1
                    if self.debug_mode:
                        logger.debug(f"‚ö†Ô∏è {symbol}: ATR –∏—Å—á–µ—Ä–ø–∞–Ω: {atr_used*100:.1f}%")
                    return None
            
            # –®–∞–≥ 3: –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É—Ä–æ–≤–Ω—è
            nearest_level, direction = self._find_nearest_level_for_breakout(
                ta_context=ta_context,
                current_price=current_price
            )
            
            if not nearest_level:
                return None
            
            self.strategy_stats["levels_analyzed"] += 1
            
            # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞
            setup_valid, setup_details = self._validate_breakout_setup(
                level=nearest_level,
                direction=direction,
                ta_context=ta_context,
                candles_5m=candles_5m,
                candles_1h=candles_1h,
                candles_1d=candles_1d,
                current_price=current_price
            )
            
            if not setup_valid:
                return None
            
            self.strategy_stats["setups_found"] += 1
            
            # –®–∞–≥ 5: –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞
            order_params = self._calculate_order_parameters(
                level=nearest_level,
                direction=direction,
                ta_context=ta_context,
                current_price=current_price
            )
            
            # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ü–µ–Ω–∞ –Ω–µ —É—à–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
            if not self._check_order_validity(order_params, current_price, ta_context):
                if self.debug_mode:
                    logger.debug(f"‚ö†Ô∏è {symbol}: —Ü–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞")
                return None
            
            # –®–∞–≥ 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
            signal = self._create_breakout_signal(
                level=nearest_level,
                direction=direction,
                order_params=order_params,
                setup_details=setup_details,
                current_price=current_price
            )
            
            self.strategy_stats["signals_generated"] += 1
            
            logger.info(f"‚úÖ {symbol}: –°–∏–≥–Ω–∞–ª –ø—Ä–æ–±–æ—è —Å–æ–∑–¥–∞–Ω: {direction} —á–µ—Ä–µ–∑ {nearest_level.price:.2f}")
            
            return signal
            
        except Exception as e:
            logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ –≤ analyze_with_data: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return None
    
    # ==================== –ü–û–ò–°–ö –£–†–û–í–ù–ï–ô ====================
    
    def _find_nearest_level_for_breakout(
        self,
        ta_context: Any,
        current_price: float
    ) -> Tuple[Optional[Any], str]:
        """
        –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–±–æ—è
        
        Args:
            ta_context: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            Tuple[—É—Ä–æ–≤–µ–Ω—å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ("up"/"down")]
        """
        try:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ —Å–∏–ª–µ
            strong_levels = [
                level for level in ta_context.levels_d1
                if level.strength >= self.min_level_strength
            ]
            
            if not strong_levels:
                return None, None
            
            # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ (–¥–ª—è –ø—Ä–æ–±–æ—è –≤–≤–µ—Ä—Ö)
            resistances = [
                level for level in strong_levels
                if level.level_type == "resistance" and level.price > current_price
            ]
            
            # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É (–¥–ª—è –ø—Ä–æ–±–æ—è –≤–Ω–∏–∑)
            supports = [
                level for level in strong_levels
                if level.level_type == "support" and level.price < current_price
            ]
            
            # –í—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å
            candidates = []
            
            if resistances:
                nearest_resistance = min(resistances, key=lambda l: abs(l.price - current_price))
                distance = abs(nearest_resistance.price - current_price) / current_price
                if distance <= self.max_distance_to_level:
                    candidates.append((nearest_resistance, "up", distance))
            
            if supports:
                nearest_support = min(supports, key=lambda l: abs(l.price - current_price))
                distance = abs(nearest_support.price - current_price) / current_price
                if distance <= self.max_distance_to_level:
                    candidates.append((nearest_support, "down", distance))
            
            if not candidates:
                return None, None
            
            # –í—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π
            best_candidate = min(candidates, key=lambda x: x[2])
            level, direction, distance = best_candidate
            
            logger.debug(f"üéØ –ù–∞–π–¥–µ–Ω —É—Ä–æ–≤–µ–Ω—å: {level.level_type} @ {level.price:.2f}, "
                        f"distance={distance*100:.2f}%, strength={level.strength:.2f}")
            
            return level, direction
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω—è: {e}")
            return None, None
    
    # ==================== –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–õ–û–í–ò–ô ====================
    
    def _validate_breakout_setup(
        self,
        level: Any,
        direction: str,
        ta_context: Any,
        candles_5m: List[Dict],
        candles_1h: List[Dict],
        candles_1d: List[Dict],
        current_price: float
    ) -> Tuple[bool, Dict[str, Any]]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø—Ä–æ–±–æ—è
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç 6 –æ—Å–Ω–æ–≤–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞:
        1. ‚úÖ –ü–æ–¥–∂–∞—Ç–∏–µ (–º–∞–ª–µ–Ω—å–∫–∏–µ –±–∞—Ä—ã)
        2. ‚úÖ –ë–ª–∏–∂–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç
        3. ‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ —É —É—Ä–æ–≤–Ω—è
        4. ‚úÖ –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è (—ç–Ω–µ—Ä–≥–∏—è)
        5. ‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥ Hi/Low –±–µ–∑ –æ—Ç–∫–∞—Ç–∞
        6. ‚úÖ ATR –Ω–µ –∏—Å—á–µ—Ä–ø–∞–Ω (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤—ã—à–µ)
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø—Ä–æ–±–æ—è
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–æ—è
            ta_context: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            candles_5m: 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
            candles_1h: –ß–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏
            candles_1d: –î–Ω–µ–≤–Ω—ã–µ —Å–≤–µ—á–∏
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            Tuple[–≤–∞–ª–∏–¥–Ω—ã–π setup?, –¥–µ—Ç–∞–ª–∏]
        """
        try:
            details = {
                "level_price": level.price,
                "level_strength": level.strength,
                "level_touches": level.touches,
                "direction": direction
            }
            
            score = 0
            max_score = 5  # 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π (ATR –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤—ã—à–µ)
            
            # –£–°–õ–û–í–ò–ï 1: –ü–æ–¥–∂–∞—Ç–∏–µ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ M5)
            has_compression = False
            if self.require_compression and len(candles_5m) >= 20:
                recent_m5 = candles_5m[-20:]
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'high_price' –∏ 'low_price'
                avg_size = sum(abs(float(c['high_price']) - float(c['low_price'])) for c in recent_m5) / len(recent_m5)
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ–Ω—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
                last_3_sizes = [abs(float(c['high_price']) - float(c['low_price'])) for c in recent_m5[-3:]]
                avg_last_3 = sum(last_3_sizes) / len(last_3_sizes)
                
                has_compression = avg_last_3 < avg_size * 0.8  # –ù–∞ 20% –º–µ–Ω—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
                
                if has_compression:
                    score += 1
                    self.strategy_stats["compressions_found"] += 1
                    logger.debug("‚úÖ –ü–æ–¥–∂–∞—Ç–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                elif self.require_compression:
                    self.strategy_stats["setups_filtered_by_compression"] += 1
                    logger.debug("‚ùå –ù–µ—Ç –ø–æ–¥–∂–∞—Ç–∏—è")
                    return False, details
            
            details["has_compression"] = has_compression
            
            # –£–°–õ–û–í–ò–ï 2: –ë–ª–∏–∂–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç
            is_near_retest = False
            if hasattr(level, 'last_touch') and level.last_touch:
                days_since_touch = (datetime.now() - level.last_touch).days
                is_near_retest = days_since_touch <= self.near_retest_max_days
                
                if is_near_retest:
                    score += 1
                    logger.debug(f"‚úÖ –ë–ª–∏–∂–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç: {days_since_touch} –¥–Ω–µ–π")
                
                details["days_since_touch"] = days_since_touch
            
            details["is_near_retest"] = is_near_retest
            
            # –£–°–õ–û–í–ò–ï 3: –ó–∞–∫—Ä—ã—Ç–∏–µ –≤–±–ª–∏–∑–∏ —É—Ä–æ–≤–Ω—è
            close_near_level = False
            if candles_5m:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'close_price'
                last_close = float(candles_5m[-1]['close_price'])
                distance = abs(last_close - level.price) / level.price * 100
                
                close_near_level = distance <= self.close_near_level_tolerance
                
                if close_near_level:
                    score += 1
                    logger.debug("‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ —É —É—Ä–æ–≤–Ω—è")
                
                details["close_distance_percent"] = distance
            
            details["close_near_level"] = close_near_level
            
            # –£–°–õ–û–í–ò–ï 4: –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è (–ø–æ H1)
            has_consolidation = False
            if self.require_consolidation and len(candles_1h) >= 10:
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —á–∞—Å–æ–≤ —Ü–µ–Ω–∞ –≤ —É–∑–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                recent_h1 = candles_1h[-10:]
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'high_price' –∏ 'low_price'
                highs = [float(c['high_price']) for c in recent_h1]
                lows = [float(c['low_price']) for c in recent_h1]
                
                price_range = max(highs) - min(lows)
                avg_price = (max(highs) + min(lows)) / 2
                
                # –î–∏–∞–ø–∞–∑–æ–Ω –º–µ–Ω—å—à–µ 2% –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã = –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è
                range_percent = price_range / avg_price * 100
                has_consolidation = range_percent < 2.0
                
                if has_consolidation:
                    score += 1
                    self.strategy_stats["consolidations_found"] += 1
                    logger.debug(f"‚úÖ –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è: –¥–∏–∞–ø–∞–∑–æ–Ω {range_percent:.2f}%")
                elif self.require_consolidation:
                    self.strategy_stats["setups_filtered_by_energy"] += 1
                    logger.debug(f"‚ùå –ù–µ—Ç –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏: –¥–∏–∞–ø–∞–∑–æ–Ω {range_percent:.2f}%")
                    return False, details
                
                details["consolidation_range_percent"] = range_percent
            
            details["has_consolidation"] = has_consolidation
            
            # –£–°–õ–û–í–ò–ï 5: –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥ Hi/Low –±–µ–∑ –æ—Ç–∫–∞—Ç–∞
            close_near_extreme = False
            if candles_5m:
                last_candle = candles_5m[-1]
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'high_price', 'low_price', 'close_price'
                high = float(last_candle['high_price'])
                low = float(last_candle['low_price'])
                close = float(last_candle['close_price'])
                
                candle_size = high - low
                
                if direction == "up":
                    # –î–ª—è –ø—Ä–æ–±–æ—è –≤–≤–µ—Ä—Ö: –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É High
                    distance_from_high = high - close
                    pullback_percent = (distance_from_high / candle_size * 100) if candle_size > 0 else 100
                    close_near_extreme = pullback_percent <= self.close_near_extreme_max_pullback
                else:
                    # –î–ª—è –ø—Ä–æ–±–æ—è –≤–Ω–∏–∑: –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É Low
                    distance_from_low = close - low
                    pullback_percent = (distance_from_low / candle_size * 100) if candle_size > 0 else 100
                    close_near_extreme = pullback_percent <= self.close_near_extreme_max_pullback
                
                if close_near_extreme:
                    score += 1
                    logger.debug(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ —É —ç–∫—Å—Ç—Ä–µ–º—É–º–∞ (–æ—Ç–∫–∞—Ç {pullback_percent:.1f}%)")
                
                details["pullback_percent"] = pullback_percent
            
            details["close_near_extreme"] = close_near_extreme
            
            # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
            details["setup_score"] = score
            details["setup_score_max"] = max_score
            details["setup_quality"] = score / max_score
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score –¥–ª—è –≤—Ö–æ–¥–∞
            min_score = 3  # –ú–∏–Ω–∏–º—É–º 3 –∏–∑ 5 —É—Å–ª–æ–≤–∏–π
            
            is_valid = score >= min_score
            
            if is_valid:
                logger.info(f"‚úÖ Setup –≤–∞–ª–∏–¥–µ–Ω: {score}/{max_score} —É—Å–ª–æ–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            else:
                logger.debug(f"‚ùå Setup –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {score}/{max_score} < {min_score}")
            
            return is_valid, details
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ setup: {e}")
            return False, {}
    
    # ==================== –†–ê–°–ß–ï–¢ –ü–ê–†–ê–ú–ï–¢–†–û–í –û–†–î–ï–†–ê ====================
    
    def _calculate_order_parameters(
        self,
        level: Any,
        direction: str,
        ta_context: Any,
        current_price: float
    ) -> Dict[str, float]:
        """
        –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞ (–¢–í–•, Stop Loss, Take Profit)
        
        –ú–µ—Ö–∞–Ω–∏–∫–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞:
        - Entry: —É—Ä–æ–≤–µ–Ω—å ¬± offset (1-2 –ø—É–Ω–∫—Ç–∞)
        - Stop Loss: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π (–∑–∞ —É—Ä–æ–≤–µ–Ω—å)
        - Take Profit: –º–∏–Ω–∏–º—É–º 3:1
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–±–æ—è
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            ta_context: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ—Ä–¥–µ—Ä–∞
        """
        try:
            level_price = level.price
            
            # ATR –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
            atr = current_price * 0.02  # 2% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if hasattr(ta_context, 'atr_data') and ta_context.atr_data:
                if hasattr(ta_context.atr_data, 'calculated_atr'):
                    atr = ta_context.atr_data.calculated_atr
            
            # –õ—é—Ñ—Ç (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π offset)
            entry_offset = self.entry_offset
            
            if direction == "up":
                # –ü—Ä–æ–±–æ–π –≤–≤–µ—Ä—Ö (—á–µ—Ä–µ–∑ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ)
                entry_price = level_price + entry_offset  # Buy Stop
                
                # Stop Loss –∑–∞ —É—Ä–æ–≤–Ω–µ–º (10% –æ—Ç ATR)
                stop_distance = atr * 0.10 * self.stop_loss_multiplier
                stop_loss = entry_price - stop_distance
                
                # Take Profit: –º–∏–Ω–∏–º—É–º 3:1
                take_profit = entry_price + (stop_distance * self.take_profit_ratio)
                
            else:
                # –ü—Ä–æ–±–æ–π –≤–Ω–∏–∑ (—á–µ—Ä–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫—É)
                entry_price = level_price - entry_offset  # Sell Stop
                
                # Stop Loss –∑–∞ —É—Ä–æ–≤–Ω–µ–º
                stop_distance = atr * 0.10 * self.stop_loss_multiplier
                stop_loss = entry_price + stop_distance
                
                # Take Profit: –º–∏–Ω–∏–º—É–º 3:1
                take_profit = entry_price - (stop_distance * self.take_profit_ratio)
            
            params = {
                "entry_price": entry_price,
                "stop_loss": stop_loss,
                "take_profit": take_profit,
                "stop_distance": stop_distance,
                "risk_reward_ratio": self.take_profit_ratio,
                "level_price": level_price,
                "atr_used": atr
            }
            
            logger.debug(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞: Entry={entry_price:.2f}, "
                        f"SL={stop_loss:.2f}, TP={take_profit:.2f}, R:R={self.take_profit_ratio}:1")
            
            return params
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return {}
    
    def _check_order_validity(
        self,
        order_params: Dict[str, float],
        current_price: float,
        ta_context: Any
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –æ—Ä–¥–µ—Ä–∞
        
        –û—Ç–º–µ–Ω—è–µ–º –µ—Å–ª–∏ —Ü–µ–Ω–∞ —É—à–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ (> 1 ATR –æ—Ç entry)
        
        Args:
            order_params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            ta_context: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä –≤–∞–ª–∏–¥–µ–Ω
        """
        try:
            entry_price = order_params.get("entry_price")
            if not entry_price:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ entry
            distance = abs(current_price - entry_price)
            
            # ATR –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            atr = current_price * 0.02
            if hasattr(ta_context, 'atr_data') and ta_context.atr_data:
                if hasattr(ta_context.atr_data, 'calculated_atr'):
                    atr = ta_context.atr_data.calculated_atr
            
            max_distance = atr * self.order_cancel_distance
            
            if distance > max_distance:
                logger.debug(f"‚ö†Ô∏è –¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ: {distance:.2f} > {max_distance:.2f} (1 ATR)")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return False
    
    # ==================== –°–û–ó–î–ê–ù–ò–ï –°–ò–ì–ù–ê–õ–ê ====================
    
    def _create_breakout_signal(
        self,
        level: Any,
        direction: str,
        order_params: Dict[str, float],
        setup_details: Dict[str, Any],
        current_price: float
    ) -> TradingSignal:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–æ–±–æ—è
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–±–æ—è
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            order_params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            setup_details: –î–µ—Ç–∞–ª–∏ setup
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            TradingSignal
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
            signal_type = SignalType.BUY if direction == "up" else SignalType.SELL
            
            # –ï—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –∏–¥–µ–∞–ª—å–Ω—ã - STRONG —Å–∏–≥–Ω–∞–ª
            setup_quality = setup_details.get("setup_quality", 0.5)
            
            if setup_quality >= 0.9:
                signal_type = SignalType.STRONG_BUY if direction == "up" else SignalType.STRONG_SELL
            
            # –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
            strength = self._calculate_signal_strength(
                setup_details=setup_details,
                level=level
            )
            
            # –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence = self._calculate_signal_confidence(
                setup_details=setup_details,
                level=level
            )
            
            # –ü—Ä–∏—á–∏–Ω—ã
            reasons = self._build_signal_reasons(
                setup_details=setup_details,
                level=level,
                direction=direction
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
            signal = self.create_signal(
                signal_type=signal_type,
                strength=strength,
                confidence=confidence,
                current_price=current_price,
                reasons=reasons
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            signal.stop_loss = order_params.get("stop_loss")
            signal.take_profit = order_params.get("take_profit")
            
            # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–∏–∑ risk management)
            signal.position_size_recommendation = min(
                0.03 * confidence,  # –î–æ 3% –ø—Ä–∏ –º–∞–∫—Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                0.05  # –ù–æ –Ω–µ –±–æ–ª–µ–µ 5%
            )
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            signal.add_technical_indicator(
                "breakout_level",
                level.price,
                f"{level.level_type} @ {level.price:.2f}"
            )
            
            signal.add_technical_indicator(
                "entry_price",
                order_params.get("entry_price"),
                f"Entry: {order_params.get('entry_price'):.2f}"
            )
            
            signal.add_technical_indicator(
                "risk_reward_ratio",
                order_params.get("risk_reward_ratio"),
                f"R:R = {order_params.get('risk_reward_ratio')}:1"
            )
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            signal.technical_indicators["setup_details"] = setup_details
            signal.technical_indicators["order_params"] = order_params
            
            return signal
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            return self.create_signal(
                signal_type=SignalType.BUY if direction == "up" else SignalType.SELL,
                strength=0.5,
                confidence=0.5,
                current_price=current_price,
                reasons=["–ü—Ä–æ–±–æ–π —É—Ä–æ–≤–Ω—è"]
            )
    
    def _calculate_signal_strength(
        self,
        setup_details: Dict[str, Any],
        level: Any
    ) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞"""
        strength = 0.5  # –ë–∞–∑–æ–≤–∞—è
        
        # –ë–æ–Ω—É—Å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ setup
        setup_quality = setup_details.get("setup_quality", 0)
        strength += setup_quality * 0.3
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        if hasattr(level, 'is_strong') and level.is_strong:
            strength += 0.1
        
        return min(1.0, strength)
    
    def _calculate_signal_confidence(
        self,
        setup_details: Dict[str, Any],
        level: Any
    ) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–∏–≥–Ω–∞–ª–µ"""
        confidence = 0.6  # –ë–∞–∑–æ–≤–∞—è
        
        # –ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–∂–∞—Ç–∏–µ
        if setup_details.get("has_compression"):
            confidence += 0.15
        
        # –ë–æ–Ω—É—Å –∑–∞ –±–ª–∏–∂–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç
        if setup_details.get("is_near_retest"):
            confidence += 0.1
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        if hasattr(level, 'strength') and level.strength >= 0.8:
            confidence += 0.1
        
        return min(1.0, confidence)
    
    def _build_signal_reasons(
        self,
        setup_details: Dict[str, Any],
        level: Any,
        direction: str
    ) -> List[str]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏—á–∏–Ω —Å–∏–≥–Ω–∞–ª–∞"""
        reasons = []
        
        direction_text = "–≤–≤–µ—Ä—Ö" if direction == "up" else "–≤–Ω–∏–∑"
        reasons.append(f"–ü—Ä–æ–±–æ–π {direction_text} —á–µ—Ä–µ–∑ {level.level_type} @ {level.price:.2f}")
        
        if setup_details.get("has_compression"):
            reasons.append("–ü–æ–¥–∂–∞—Ç–∏–µ —É —É—Ä–æ–≤–Ω—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
        if setup_details.get("has_consolidation"):
            range_pct = setup_details.get("consolidation_range_percent", 0)
            reasons.append(f"–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è (–¥–∏–∞–ø–∞–∑–æ–Ω {range_pct:.1f}%)")
        
        if setup_details.get("is_near_retest"):
            days = setup_details.get("days_since_touch", 0)
            reasons.append(f"–ë–ª–∏–∂–Ω–∏–π —Ä–µ—Ç–µ—Å—Ç ({days} –¥–Ω–µ–π)")
        
        if setup_details.get("close_near_level"):
            reasons.append("–ó–∞–∫—Ä—ã—Ç–∏–µ –≤–±–ª–∏–∑–∏ —É—Ä–æ–≤–Ω—è")
        
        if setup_details.get("close_near_extreme"):
            reasons.append(f"–ó–∞–∫—Ä—ã—Ç–∏–µ —É —ç–∫—Å—Ç—Ä–µ–º—É–º–∞")
        
        if hasattr(level, 'is_strong') and level.is_strong:
            reasons.append(f"–°–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (strength={level.strength:.2f})")
        
        return reasons
    
    # ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================
    
    def get_strategy_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        base_stats = self.get_stats()
        
        return {
            **base_stats,
            "strategy_type": "BreakoutStrategy",
            "strategy_stats": self.strategy_stats.copy(),
            "config": {
                "require_compression": self.require_compression,
                "require_consolidation": self.require_consolidation,
                "min_energy_level": self.min_energy_level,
                "atr_exhaustion_threshold": self.atr_exhaustion_threshold,
                "take_profit_ratio": self.take_profit_ratio
            }
        }
    
    def __str__(self):
        stats = self.get_strategy_stats()
        return (f"BreakoutStrategy(symbol={self.symbol}, "
                f"setups={stats['strategy_stats']['setups_found']}, "
                f"signals={stats['signals_sent']}, "
                f"success_rate={stats['analysis_success_rate']:.1f}%)")


# Export
__all__ = ["BreakoutStrategy"]

logger.info("‚úÖ Breakout Strategy v3.0.1 loaded (FIXED: KeyError resolved)")
