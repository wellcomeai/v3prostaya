"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ Telegram

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å—é —Ü–µ–ø–æ—á–∫—É:
1. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
2. –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
3. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram

Usage:
    python test_signal_to_telegram.py --mode simple
    python test_signal_to_telegram.py --mode full
"""

import asyncio
import logging
import sys
from datetime import datetime, timedelta
from typing import Dict, List, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


# ==================== –†–ï–ñ–ò–ú 1: –ü–†–û–°–¢–û–ô (—Ç–æ–ª—å–∫–æ TradingSignal ‚Üí Telegram) ====================

async def test_simple_signal():
    """
    üéØ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç: —Å–æ–∑–¥–∞—Ç—å TradingSignal –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
    –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    """
    logger.info("=" * 80)
    logger.info("üß™ –†–ï–ñ–ò–ú 1: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç (TradingSignal ‚Üí Telegram)")
    logger.info("=" * 80)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from strategies.base_strategy import TradingSignal, SignalType, SignalStrength
        from telegram_bot import TelegramBot
        from config import Config
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ Config
        telegram_token = Config.TELEGRAM_BOT_TOKEN
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
        telegram_bot = TelegramBot(
            token=telegram_token,
            repository=None,
            ta_context_manager=None
        )
        
        logger.info("‚úÖ –ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        signal = TradingSignal(
            symbol="TESTUSDT",
            signal_type=SignalType.STRONG_BUY,
            strength=SignalStrength.STRONG,
            confidence=0.95,
            current_price=50000.0,
            timestamp=datetime.now(),
            strategy_name="TestStrategy",
            reasons=[
                "üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª",
                "üí• –ü—Ä–æ–±–æ–π —á–µ—Ä–µ–∑ 49500",
                "üìä –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è 24 —á–∞—Å–∞",
                "‚úÖ –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
            ]
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
        signal.stop_loss = 48000.0
        signal.take_profit = 56000.0
        signal.position_size_recommendation = 0.03
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        signal.add_technical_indicator("breakout_level", 49500, "Resistance @ 49500")
        signal.add_technical_indicator("risk_reward_ratio", 3.0, "R:R = 3:1")
        
        logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω: {signal.symbol} {signal.signal_type.value}")
        logger.info(f"   ‚Ä¢ Price: {signal.current_price}")
        logger.info(f"   ‚Ä¢ SL: {signal.stop_loss}")
        logger.info(f"   ‚Ä¢ TP: {signal.take_profit}")
        logger.info(f"   ‚Ä¢ Confidence: {signal.confidence*100:.0f}%")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        logger.info("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        signal_emoji = "üöÄ" if "BUY" in signal.signal_type.value else "‚ö†Ô∏è"
        signal_text = "–ü–û–ö–£–ü–ö–£" if "BUY" in signal.signal_type.value else "–ü–†–û–î–ê–ñ–£"
        
        sl_percent = ((signal.stop_loss - signal.current_price) / signal.current_price * 100)
        tp_percent = ((signal.take_profit - signal.current_price) / signal.current_price * 100)
        
        message = f"""{signal_emoji} <b>üß™ –¢–ï–°–¢–û–í–´–ô –°–ò–ì–ù–ê–õ –ù–ê {signal_text}</b>

üí∞ <b>{signal.symbol}</b>
–¶–µ–Ω–∞: {signal.current_price:,.2f}

üìä <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ö–æ–¥–∞:</b>
‚Ä¢ Stop Loss: {signal.stop_loss:,.2f} ({sl_percent:+.1f}%)
‚Ä¢ Take Profit: {signal.take_profit:,.2f} ({tp_percent:+.1f}%)
‚Ä¢ –†–∏—Å–∫/–ü—Ä–∏–±—ã–ª—å: 3:1
‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {signal.position_size_recommendation*100:.1f}%

üéØ <b>–ü—Ä–∏—á–∏–Ω—ã —Å–∏–≥–Ω–∞–ª–∞:</b>
‚Ä¢ üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
‚Ä¢ üí• –ü—Ä–æ–±–æ–π —á–µ—Ä–µ–∑ 49500
‚Ä¢ üìä –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è 24 —á–∞—Å–∞
‚Ä¢ ‚úÖ –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã

üí™ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal.confidence*100:.0f}%

‚ö†Ô∏è <i>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã!</i>
"""
        
        await telegram_bot.broadcast_signal(message)
        
        logger.info("‚úÖ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞
        await telegram_bot.close()
        
        logger.info("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –±–æ—Ç–∞!")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False


# ==================== –†–ï–ñ–ò–ú 2: –ü–û–õ–ù–´–ô (—á–µ—Ä–µ–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é) ====================

def create_fake_candles(
    symbol: str,
    interval: str,
    count: int,
    base_price: float = 50000.0
) -> List[Dict]:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤–µ—á–µ–π"""
    candles = []
    current_time = datetime.now()
    
    # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –º–∏–Ω—É—Ç–∞—Ö
    interval_minutes = {
        "1m": 1,
        "5m": 5,
        "1h": 60,
        "1d": 1440
    }
    
    delta_minutes = interval_minutes.get(interval, 5)
    
    for i in range(count):
        timestamp = current_time - timedelta(minutes=delta_minutes * (count - i))
        
        # –ù–µ–±–æ–ª—å—à–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —Ü–µ–Ω—ã
        variation = (i % 10 - 5) * 10
        open_price = base_price + variation
        close_price = base_price + variation + 5
        high_price = max(open_price, close_price) + 10
        low_price = min(open_price, close_price) - 10
        
        candle = {
            "timestamp": timestamp,
            "open_price": open_price,
            "high_price": high_price,
            "low_price": low_price,
            "close_price": close_price,
            "volume": 1000000.0,
            "symbol": symbol,
            "interval": interval
        }
        
        candles.append(candle)
    
    return candles


def create_fake_ta_context(symbol: str, current_price: float):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    
    class FakeLevel:
        def __init__(self, price, level_type, strength):
            self.price = price
            self.level_type = level_type
            self.strength = strength
            self.touches = 5
            self.is_strong = strength >= 0.8
            self.last_touch = datetime.now() - timedelta(days=3)
    
    class FakeATR:
        def __init__(self):
            self.calculated_atr = current_price * 0.02
            self.current_range_used = 0.3  # 30% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
    
    class FakeContext:
        def __init__(self):
            # –£—Ä–æ–≤–Ω–∏: —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —á—É—Ç—å –≤—ã—à–µ, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —á—É—Ç—å –Ω–∏–∂–µ
            self.levels_d1 = [
                FakeLevel(current_price * 0.99, "support", 0.85),      # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ -1%
                FakeLevel(current_price * 1.01, "resistance", 0.90),   # –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ +1%
            ]
            self.atr_data = FakeATR()
    
    return FakeContext()


async def test_full_pipeline():
    """
    üéØ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç: —ç–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ‚Üí —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Üí —Å–∏–≥–Ω–∞–ª ‚Üí Telegram
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å—é —Ü–µ–ø–æ—á–∫—É –∫–∞–∫ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–µ
    """
    logger.info("=" * 80)
    logger.info("üß™ –†–ï–ñ–ò–ú 2: –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç (–¥–∞–Ω–Ω—ã–µ ‚Üí —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Üí Telegram)")
    logger.info("=" * 80)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        from strategies.breakout_strategy import BreakoutStrategy
        from telegram_bot import TelegramBot
        from config import Config
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ Config
        telegram_token = Config.TELEGRAM_BOT_TOKEN
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
        telegram_bot = TelegramBot(
            token=telegram_token,
            repository=None,
            ta_context_manager=None
        )
        
        logger.info("‚úÖ –ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        symbol = "TESTUSDT"
        current_price = 50000.0
        
        logger.info(f"\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
        
        candles_1m = create_fake_candles(symbol, "1m", 100, current_price)
        candles_5m = create_fake_candles(symbol, "5m", 50, current_price)
        candles_1h = create_fake_candles(symbol, "1h", 24, current_price)
        candles_1d = create_fake_candles(symbol, "1d", 180, current_price)
        
        logger.info(f"   ‚Ä¢ 1m —Å–≤–µ—á–µ–π: {len(candles_1m)}")
        logger.info(f"   ‚Ä¢ 5m —Å–≤–µ—á–µ–π: {len(candles_5m)}")
        logger.info(f"   ‚Ä¢ 1h —Å–≤–µ—á–µ–π: {len(candles_1h)}")
        logger.info(f"   ‚Ä¢ 1d —Å–≤–µ—á–µ–π: {len(candles_1d)}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        ta_context = create_fake_ta_context(symbol, current_price)
        
        logger.info(f"\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
        logger.info(f"   ‚Ä¢ –£—Ä–æ–≤–Ω–µ–π D1: {len(ta_context.levels_d1)}")
        logger.info(f"   ‚Ä¢ ATR: {ta_context.atr_data.calculated_atr:.2f}")
        logger.info(f"   ‚Ä¢ ATR –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {ta_context.atr_data.current_range_used*100:.0f}%")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –ú–Ø–ì–ö–ò–ú–ò –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        logger.info(f"\nüí° –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
        
        strategy = BreakoutStrategy(
            symbol=symbol,
            repository=None,
            ta_context_manager=None,
            # –ú–Ø–ì–ö–ò–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∞
            require_compression=False,
            require_consolidation=False,
            min_signal_strength=0.1,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
        )
        
        logger.info(f"   ‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy.name}")
        logger.info(f"   ‚Ä¢ require_compression: {strategy.require_compression}")
        logger.info(f"   ‚Ä¢ require_consolidation: {strategy.require_consolidation}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        logger.info(f"\nüîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...")
        
        signal = await strategy.analyze_with_data(
            symbol=symbol,
            candles_1m=candles_1m,
            candles_5m=candles_5m,
            candles_1h=candles_1h,
            candles_1d=candles_1d,
            ta_context=ta_context
        )
        
        if signal:
            logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π!")
            logger.info(f"   ‚Ä¢ Symbol: {signal.symbol}")
            logger.info(f"   ‚Ä¢ Type: {signal.signal_type.value}")
            logger.info(f"   ‚Ä¢ Strength: {signal.strength.value}")
            logger.info(f"   ‚Ä¢ Confidence: {signal.confidence*100:.0f}%")
            logger.info(f"   ‚Ä¢ Price: {signal.current_price}")
            logger.info(f"   ‚Ä¢ SL: {signal.stop_loss}")
            logger.info(f"   ‚Ä¢ TP: {signal.take_profit}")
            logger.info(f"   ‚Ä¢ Reasons: {len(signal.reasons)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            logger.info(f"\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            signal_emoji = "üöÄ" if "BUY" in signal.signal_type.value else "‚ö†Ô∏è"
            signal_text = "–ü–û–ö–£–ü–ö–£" if "BUY" in signal.signal_type.value else "–ü–†–û–î–ê–ñ–£"
            
            sl_percent = ((signal.stop_loss - signal.current_price) / signal.current_price * 100) if signal.stop_loss else 0
            tp_percent = ((signal.take_profit - signal.current_price) / signal.current_price * 100) if signal.take_profit else 0
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏—á–∏–Ω—ã
            reasons_text = "\n".join(f"‚Ä¢ {reason}" for reason in signal.reasons[:4])
            
            message = f"""{signal_emoji} <b>–°–ò–ì–ù–ê–õ –ù–ê {signal_text}</b>

üí∞ <b>{signal.symbol}</b>
–¶–µ–Ω–∞: {signal.current_price:,.2f}

üìä <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ö–æ–¥–∞:</b>
‚Ä¢ Stop Loss: {signal.stop_loss:,.2f} ({sl_percent:+.1f}%)
‚Ä¢ Take Profit: {signal.take_profit:,.2f} ({tp_percent:+.1f}%)
‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {signal.position_size_recommendation*100:.1f}%

üéØ <b>–ü—Ä–∏—á–∏–Ω—ã —Å–∏–≥–Ω–∞–ª–∞:</b>
{reasons_text}

üí™ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal.confidence*100:.0f}%
üé≠ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {signal.strategy_name}

‚ö†Ô∏è <i>–¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ {strategy.name}</i>
"""
            
            await telegram_bot.broadcast_signal(message)
            
            logger.info("‚úÖ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞
            await telegram_bot.close()
            
            logger.info("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –±–æ—Ç–∞!")
            
            return True
        else:
            logger.warning("‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ —Å–æ–∑–¥–∞–ª–∞ —Å–∏–≥–Ω–∞–ª!")
            logger.warning("   –í–æ–∑–º–æ–∂–Ω–æ, —É—Å–ª–æ–≤–∏—è –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–ª–∏—à–∫–æ–º –∂–µ—Å—Ç–∫–∏–µ")
            logger.warning("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–∂–∏–º --mode simple")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞
            await telegram_bot.close()
            
            return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False


# ==================== MAIN ====================

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    mode = "simple"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if len(sys.argv) > 1:
        if "--mode" in sys.argv:
            idx = sys.argv.index("--mode")
            if idx + 1 < len(sys.argv):
                mode = sys.argv[idx + 1]
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ: {mode}")
    
    if mode == "simple":
        success = await test_simple_signal()
    elif mode == "full":
        success = await test_full_pipeline()
    else:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {mode}")
        logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: simple, full")
        return
    
    if success:
        logger.info("\n" + "=" * 80)
        logger.info("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
        logger.info("=" * 80)
    else:
        logger.info("\n" + "=" * 80)
        logger.info("‚ùå –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–ê–ú–ò")
        logger.info("=" * 80)


if __name__ == "__main__":
    asyncio.run(main())
