import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
import aiohttp
import json
from config import Config

logger = logging.getLogger(__name__)

class BybitClient:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bybit API"""
    
    def __init__(self):
        self.base_url = "https://api-testnet.bybit.com" if Config.BYBIT_TESTNET else "https://api.bybit.com"
        self.session: Optional[aiohttp.ClientSession] = None
        self._session_created = False
    
    async def _get_session(self) -> aiohttp.ClientSession:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session is None or self.session.closed:
            timeout = aiohttp.ClientTimeout(total=30)
            self.session = aiohttp.ClientSession(
                timeout=timeout,
                headers={
                    'Content-Type': 'application/json',
                    'User-Agent': 'BybitTradingBot/1.0'
                }
            )
            self._session_created = True
            logger.info("‚úÖ HTTP —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        return self.session
    
    async def _make_request(self, endpoint: str, params: Dict[str, Any] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Bybit API"""
        session = await self._get_session()
        url = f"{self.base_url}{endpoint}"
        
        try:
            logger.debug(f"üåê –ó–∞–ø—Ä–æ—Å: {url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
            
            async with session.get(url, params=params) as response:
                if response.status != 200:
                    error_text = await response.text()
                    logger.error(f"‚ùå HTTP {response.status}: {error_text}")
                    raise Exception(f"HTTP {response.status}: {error_text}")
                
                data = await response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç Bybit
                if data.get('retCode') != 0:
                    error_msg = data.get('retMsg', 'Unknown error')
                    logger.error(f"‚ùå Bybit API error: {error_msg}")
                    raise Exception(f"Bybit API error: {error_msg}")
                
                logger.debug("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return data
                
        except aiohttp.ClientError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
            raise Exception(f"Network error: {e}")
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
            raise Exception(f"JSON decode error: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise
    
    async def get_market_data(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å"""
        try:
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {Config.SYMBOL}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            tasks = [
                self._get_ticker_data(),
                self._get_kline_data(),
                self._get_instrument_info(),
                self._get_recent_trades()
            ]
            
            ticker_data, kline_data, instrument_info, recent_trades = await asyncio.gather(
                *tasks, return_exceptions=True
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
            for i, result in enumerate([ticker_data, kline_data, instrument_info, recent_trades]):
                if isinstance(result, Exception):
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ {i}: {result}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = await self._format_market_data(
                ticker_data if not isinstance(ticker_data, Exception) else {},
                kline_data if not isinstance(kline_data, Exception) else {},
                instrument_info if not isinstance(instrument_info, Exception) else {},
                recent_trades if not isinstance(recent_trades, Exception) else {}
            )
            
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Å Bybit")
            return market_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Bybit: {e}")
            raise
    
    async def _get_ticker_data(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–∞"""
        params = {
            'category': Config.CATEGORY,
            'symbol': Config.SYMBOL
        }
        return await self._make_request('/v5/market/tickers', params)
    
    async def _get_kline_data(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
        params = {
            'category': Config.CATEGORY,
            'symbol': Config.SYMBOL,
            'interval': '60',  # 60 –º–∏–Ω—É—Ç
            'limit': 24  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        }
        return await self._make_request('/v5/market/kline', params)
    
    async def _get_instrument_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ"""
        params = {
            'category': Config.CATEGORY,
            'symbol': Config.SYMBOL
        }
        return await self._make_request('/v5/market/instruments-info', params)
    
    async def _get_recent_trades(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫"""
        params = {
            'category': Config.CATEGORY,
            'symbol': Config.SYMBOL,
            'limit': 100
        }
        return await self._make_request('/v5/market/recent-trade', params)
    
    async def _format_market_data(self, ticker_data: Dict, kline_data: Dict, 
                                instrument_info: Dict, recent_trades: Dict) -> Dict[str, Any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–∞
            ticker = {}
            if ticker_data.get('result', {}).get('list'):
                ticker = ticker_data['result']['list'][0]
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
            klines = []
            if kline_data.get('result', {}).get('list'):
                klines = kline_data['result']['list']
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
            instrument = {}
            if instrument_info.get('result', {}).get('list'):
                instrument = instrument_info['result']['list'][0]
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫
            trades = []
            if recent_trades.get('result', {}).get('list'):
                trades = recent_trades['result']['list'][:10]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ 24 —á–∞—Å–∞
            stats_24h = await self._calculate_24h_stats(klines)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å fallback
            current_price = float(ticker.get('lastPrice', 0))
            price_change_24h = float(ticker.get('price24hPcnt', 0)) * 100
            volume_24h = float(ticker.get('volume24h', 0))
            high_24h = float(ticker.get('highPrice24h', 0))
            low_24h = float(ticker.get('lowPrice24h', 0))
            bid_price = float(ticker.get('bid1Price', 0))
            ask_price = float(ticker.get('ask1Price', 0))
            open_interest = float(ticker.get('openInterest', 0))
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
            price_filter = instrument.get('priceFilter', {})
            lot_size_filter = instrument.get('lotSizeFilter', {})
            
            return {
                "symbol": Config.SYMBOL,
                "timestamp": datetime.now().isoformat(),
                "current_price": current_price,
                "price_change_24h": price_change_24h,
                "volume_24h": volume_24h,
                "high_24h": high_24h,
                "low_24h": low_24h,
                "bid_price": bid_price,
                "ask_price": ask_price,
                "open_interest": open_interest,
                "hourly_data": stats_24h,
                "recent_trades_count": len(trades),
                "recent_trades_avg_size": sum(float(trade.get('size', 0)) for trade in trades) / len(trades) if trades else 0,
                "instrument_info": {
                    "min_price": float(price_filter.get('minPrice', 0)),
                    "max_price": float(price_filter.get('maxPrice', 0)),
                    "tick_size": float(price_filter.get('tickSize', 0)),
                    "min_order_qty": float(lot_size_filter.get('minOrderQty', 0)),
                    "max_order_qty": float(lot_size_filter.get('maxOrderQty', 0)),
                },
                "data_quality": {
                    "ticker_available": bool(ticker),
                    "klines_count": len(klines),
                    "trades_available": len(trades),
                    "instrument_info_available": bool(instrument)
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return {
                "symbol": Config.SYMBOL,
                "timestamp": datetime.now().isoformat(),
                "current_price": 0,
                "price_change_24h": 0,
                "volume_24h": 0,
                "high_24h": 0,
                "low_24h": 0,
                "bid_price": 0,
                "ask_price": 0,
                "open_interest": 0,
                "hourly_data": {},
                "recent_trades_count": 0,
                "recent_trades_avg_size": 0,
                "instrument_info": {},
                "error": str(e)
            }
    
    async def _calculate_24h_stats(self, klines: list) -> Dict[str, Any]:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ 24 —á–∞—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–µ—á–µ–π"""
        if not klines:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return {}
        
        try:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≤–µ—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            # –í Bybit API klines –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [startTime, openPrice, highPrice, lowPrice, closePrice, volume, turnover]
            sorted_klines = sorted(klines, key=lambda x: int(x[0]))
            
            prices = [float(kline[4]) for kline in sorted_klines]  # –¶–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
            volumes = [float(kline[5]) for kline in sorted_klines]  # –û–±—ä–µ–º—ã
            
            if not prices or not volumes:
                return {}
            
            # –†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞
            price_trend = "sideways"
            if len(prices) >= 2:
                if prices[-1] > prices[0]:
                    price_trend = "up"
                elif prices[-1] < prices[0]:
                    price_trend = "down"
            
            # –†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            price_volatility = 0
            if min(prices) > 0:
                price_volatility = (max(prices) - min(prices)) / min(prices) * 100
            
            return {
                "price_trend": price_trend,
                "avg_price_24h": sum(prices) / len(prices),
                "price_volatility": price_volatility,
                "total_volume_24h": sum(volumes),
                "avg_hourly_volume": sum(volumes) / len(volumes),
                "highest_hourly_volume": max(volumes),
                "lowest_hourly_volume": min(volumes),
                "hours_analyzed": len(sorted_klines),
                "price_range": {
                    "highest": max(prices),
                    "lowest": min(prices)
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ 24—á —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"error": str(e)}
    
    async def get_server_time(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ Bybit (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)"""
        try:
            return await self._make_request('/v5/market/time')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            raise
    
    async def check_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API"""
        try:
            await self.get_server_time()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit API: {e}")
            return False
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session and not self.session.closed:
            await self.session.close()
            logger.info("‚úÖ HTTP —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
    
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        await self.close()
