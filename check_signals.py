#!/usr/bin/env python3
"""
üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –°–ö–†–ò–ü–¢ - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ —Ä–∞–±–æ—Ç—É —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:
1. ‚úÖ –ï—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î?
2. ‚úÖ –†–∞–±–æ—Ç–∞—é—Ç –ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏?
3. ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ª–∏ —Å–∏–≥–Ω–∞–ª—ã?
4. ‚úÖ –ü—Ä–æ—Ö–æ–¥—è—Ç –ª–∏ —Å–∏–≥–Ω–∞–ª—ã —Ñ–∏–ª—å—Ç—Ä—ã?
5. ‚úÖ –ü–æ—á–µ–º—É –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram?

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python check_signals.py                           # –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    python check_signals.py --symbol BTCUSDT          # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª
    python check_signals.py --verbose                 # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    python check_signals.py --test-strategies         # –¢–µ—Å—Ç –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

Author: Trading Bot Team
Version: 2.0.0 - Diagnostic Edition
"""

import asyncio
import logging
import argparse
import sys
from datetime import datetime, timedelta, timezone
from typing import Dict, List, Any, Optional
from collections import defaultdict
from tabulate import tabulate
import traceback

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from config import Config
from database import initialize_database, close_database, get_database_health
from database.repositories import get_market_data_repository

# –°—Ç—Ä–∞—Ç–µ–≥–∏–∏
from strategies import (
    BreakoutStrategy,
    BounceStrategy, 
    FalseBreakoutStrategy,
    SignalType
)

# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
from strategies.technical_analysis.context_manager import TechnicalAnalysisContextManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.WARNING  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω–æ–µ
)
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)


class SignalDiagnostics:
    """
    üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å—é —Ü–µ–ø–æ—á–∫—É:
    1. –ë–î ‚Üí –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ?
    2. Repository ‚Üí –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ?
    3. TechnicalAnalysis ‚Üí –†–∞–±–æ—Ç–∞–µ—Ç?
    4. –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ ‚Üí –ì–µ–Ω–µ—Ä–∏—Ä—É—é—Ç —Å–∏–≥–Ω–∞–ª—ã?
    5. –§–∏–ª—å—Ç—Ä—ã ‚Üí –ü—Ä–æ–ø—É—Å–∫–∞—é—Ç —Å–∏–≥–Ω–∞–ª—ã?
    """
    
    def __init__(self, repository, ta_context_manager):
        self.repository = repository
        self.ta_context_manager = ta_context_manager
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫
        self.checks = {
            "database": {"status": "pending", "details": {}},
            "data_availability": {"status": "pending", "details": {}},
            "technical_analysis": {"status": "pending", "details": {}},
            "strategies": {"status": "pending", "details": {}},
            "signal_generation": {"status": "pending", "details": {}}
        }
        
        logger.info("üîç SignalDiagnostics –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def run_full_diagnostic(
        self,
        symbols: Optional[List[str]] = None,
        test_strategies: bool = False
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (None = –≤—Å–µ)
            test_strategies: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        """
        print("\n" + "=" * 70)
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ì–ï–ù–ï–†–ê–¶–ò–ò –°–ò–ì–ù–ê–õ–û–í")
        print("=" * 70)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        await self._check_database()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if symbols is None:
            symbols = Config.get_bybit_symbols()[:5]  # –ü–µ—Ä–≤—ã–µ 5 –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
        
        await self._check_data_availability(symbols)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        await self._check_technical_analysis(symbols[0] if symbols else "BTCUSDT")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –°—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if test_strategies:
            await self._test_strategies(symbols)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self._print_summary()
        
        return self.checks
    
    async def _check_database(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\n" + "-" * 70)
        print("üìä –ü–†–û–í–ï–†–ö–ê 1: –ë–ê–ó–ê –î–ê–ù–ù–´–•")
        print("-" * 70)
        
        try:
            db_health = await get_database_health()
            
            if db_health.get("healthy", False):
                self.checks["database"]["status"] = "‚úÖ OK"
                self.checks["database"]["details"] = db_health
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   ‚Ä¢ Pool size: {db_health.get('pool_size', 'unknown')}")
                print(f"   ‚Ä¢ Active connections: {db_health.get('active_connections', 'unknown')}")
            else:
                self.checks["database"]["status"] = "‚ùå ERROR"
                self.checks["database"]["details"] = db_health
                print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!")
                print(f"   ‚Ä¢ Error: {db_health.get('error', 'unknown')}")
                
        except Exception as e:
            self.checks["database"]["status"] = "‚ùå ERROR"
            self.checks["database"]["details"] = {"error": str(e)}
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
    
    async def _check_data_availability(self, symbols: List[str]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ù–∞–ª–∏—á–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("\n" + "-" * 70)
        print("üìà –ü–†–û–í–ï–†–ö–ê 2: –î–û–°–¢–£–ü–ù–û–°–¢–¨ –î–ê–ù–ù–´–•")
        print("-" * 70)
        
        intervals_to_check = ["1m", "5m", "1h", "1d"]
        now = datetime.now(timezone.utc)
        
        results = []
        issues = []
        
        for symbol in symbols:
            symbol_data = {
                "symbol": symbol,
                "intervals": {}
            }
            
            for interval in intervals_to_check:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É
                    latest = await self.repository.get_latest_candle(symbol, interval)
                    
                    if latest:
                        age_seconds = (now - latest['open_time']).total_seconds()
                        age_minutes = age_seconds / 60
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                        max_delay = {
                            "1m": 5,    # 5 –º–∏–Ω—É—Ç
                            "5m": 15,   # 15 –º–∏–Ω—É—Ç
                            "1h": 120,  # 2 —á–∞—Å–∞
                            "1d": 1440  # 1 –¥–µ–Ω—å
                        }.get(interval, 60)
                        
                        is_fresh = age_minutes <= max_delay
                        status = "‚úÖ" if is_fresh else "‚ö†Ô∏è"
                        
                        symbol_data["intervals"][interval] = {
                            "latest_time": latest['open_time'].isoformat(),
                            "age_minutes": round(age_minutes, 1),
                            "is_fresh": is_fresh,
                            "price": float(latest['close_price'])
                        }
                        
                        results.append([
                            symbol,
                            interval,
                            status,
                            f"{age_minutes:.0f} –º–∏–Ω –Ω–∞–∑–∞–¥",
                            f"${float(latest['close_price']):,.2f}"
                        ])
                        
                        if not is_fresh:
                            issues.append(f"{symbol} {interval}: —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ ({age_minutes:.0f} –º–∏–Ω)")
                    else:
                        symbol_data["intervals"][interval] = None
                        results.append([symbol, interval, "‚ùå", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "-"])
                        issues.append(f"{symbol} {interval}: –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {symbol} {interval}: {e}")
                    results.append([symbol, interval, "‚ùå", f"–û—à–∏–±–∫–∞", "-"])
                    issues.append(f"{symbol} {interval}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
        # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
        print(tabulate(
            results,
            headers=["–°–∏–º–≤–æ–ª", "–ò–Ω—Ç–µ—Ä–≤–∞–ª", "–°—Ç–∞—Ç—É—Å", "–í–æ–∑—Ä–∞—Å—Ç", "–¶–µ–Ω–∞"],
            tablefmt="pretty"
        ))
        
        # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
        if not issues:
            self.checks["data_availability"]["status"] = "‚úÖ OK"
            print("\n‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ!")
        else:
            self.checks["data_availability"]["status"] = "‚ö†Ô∏è ISSUES"
            print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}")
            for issue in issues[:10]:  # –ü–µ—Ä–≤—ã–µ 10
                print(f"   ‚Ä¢ {issue}")
        
        self.checks["data_availability"]["details"] = {
            "symbols_checked": len(symbols),
            "intervals_checked": intervals_to_check,
            "issues_count": len(issues),
            "issues": issues[:20]  # –ü–µ—Ä–≤—ã–µ 20
        }
    
    async def _check_technical_analysis(self, symbol: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"""
        print("\n" + "-" * 70)
        print(f"üß† –ü–†–û–í–ï–†–ö–ê 3: –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó ({symbol})")
        print("-" * 70)
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
            ta_context = await self.ta_context_manager.get_context(symbol)
            
            if ta_context:
                self.checks["technical_analysis"]["status"] = "‚úÖ OK"
                print(f"‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–Ω—É—Ç—Ä–∏
                details = {}
                if hasattr(ta_context, 'levels'):
                    print(f"   ‚Ä¢ –£—Ä–æ–≤–Ω–∏: {len(ta_context.levels)} —à—Ç—É–∫")
                    details["levels_count"] = len(ta_context.levels)
                
                if hasattr(ta_context, 'trend'):
                    print(f"   ‚Ä¢ –¢—Ä–µ–Ω–¥: {ta_context.trend}")
                    details["trend"] = str(ta_context.trend)
                
                if hasattr(ta_context, 'volatility'):
                    print(f"   ‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {ta_context.volatility}")
                    details["volatility"] = str(ta_context.volatility)
                
                self.checks["technical_analysis"]["details"] = details
            else:
                self.checks["technical_analysis"]["status"] = "‚ùå ERROR"
                print("‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                self.checks["technical_analysis"]["details"] = {"error": "Context is None"}
                
        except Exception as e:
            self.checks["technical_analysis"]["status"] = "‚ùå ERROR"
            self.checks["technical_analysis"]["details"] = {"error": str(e)}
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            traceback.print_exc()
    
    async def _test_strategies(self, symbols: List[str]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        print("\n" + "-" * 70)
        print("üéØ –ü–†–û–í–ï–†–ö–ê 4: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ô")
        print("-" * 70)
        
        strategies_to_test = {
            "breakout": BreakoutStrategy,
            "bounce": BounceStrategy,
            "false_breakout": FalseBreakoutStrategy
        }
        
        all_results = []
        total_signals = 0
        
        for symbol in symbols[:3]:  # –ü–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞
            print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ {symbol}...")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                now = datetime.now(timezone.utc)
                candles_1m = await self.repository.get_candles(
                    symbol, "1m", 
                    start_time=now - timedelta(hours=2),
                    end_time=now,
                    limit=100
                )
                candles_5m = await self.repository.get_candles(
                    symbol, "5m",
                    start_time=now - timedelta(hours=5),
                    end_time=now,
                    limit=50
                )
                candles_1h = await self.repository.get_candles(
                    symbol, "1h",
                    start_time=now - timedelta(days=2),
                    end_time=now,
                    limit=48
                )
                candles_1d = await self.repository.get_candles(
                    symbol, "1d",
                    start_time=now - timedelta(days=180),
                    end_time=now,
                    limit=180
                )
                
                print(f"   ‚Ä¢ 1m: {len(candles_1m)} —Å–≤–µ—á–µ–π")
                print(f"   ‚Ä¢ 5m: {len(candles_5m)} —Å–≤–µ—á–µ–π")
                print(f"   ‚Ä¢ 1h: {len(candles_1h)} —Å–≤–µ—á–µ–π")
                print(f"   ‚Ä¢ 1d: {len(candles_1d)} —Å–≤–µ—á–µ–π")
                
                if not candles_1m:
                    print(f"   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                    continue
                
                # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                ta_context = None
                try:
                    ta_context = await self.ta_context_manager.get_context(symbol)
                except:
                    pass
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                for strategy_name, strategy_class in strategies_to_test.items():
                    try:
                        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                        strategy = strategy_class(
                            symbol=symbol,
                            repository=self.repository,
                            ta_context_manager=self.ta_context_manager,
                            min_signal_strength=0.3,  # –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                            signal_cooldown_minutes=0,  # –ë–µ–∑ cooldown
                            max_signals_per_hour=100  # –ë–µ–∑ –ª–∏–º–∏—Ç–∞
                        )
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
                        signal = await strategy.analyze_with_data(
                            symbol=symbol,
                            candles_1m=candles_1m,
                            candles_5m=candles_5m,
                            candles_1h=candles_1h,
                            candles_1d=candles_1d,
                            ta_context=ta_context
                        )
                        
                        if signal:
                            total_signals += 1
                            all_results.append([
                                symbol,
                                strategy_name,
                                "‚úÖ –°–ò–ì–ù–ê–õ",
                                signal.signal_type.value,
                                f"{signal.strength:.2f}",
                                f"{signal.confidence:.2f}",
                                ", ".join(signal.reasons[:2])
                            ])
                            print(f"   ‚úÖ {strategy_name}: {signal.signal_type.value} "
                                  f"(—Å–∏–ª–∞={signal.strength:.2f}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={signal.confidence:.2f})")
                        else:
                            all_results.append([
                                symbol,
                                strategy_name,
                                "‚ö™ –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞",
                                "-",
                                "-",
                                "-",
                                "–£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
                            ])
                            print(f"   ‚ö™ {strategy_name}: –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞")
                            
                    except Exception as e:
                        all_results.append([
                            symbol,
                            strategy_name,
                            "‚ùå –û–®–ò–ë–ö–ê",
                            "-",
                            "-",
                            "-",
                            str(e)[:50]
                        ])
                        print(f"   ‚ùå {strategy_name}: –æ—à–∏–±–∫–∞ - {e}")
                        
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞
        print("\n" + "=" * 70)
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–¢–†–ê–¢–ï–ì–ò–ô")
        print("=" * 70)
        
        print(tabulate(
            all_results,
            headers=["–°–∏–º–≤–æ–ª", "–°—Ç—Ä–∞—Ç–µ–≥–∏—è", "–†–µ–∑—É–ª—å—Ç–∞—Ç", "–¢–∏–ø", "–°–∏–ª–∞", "–£–≤–µ—Ä.", "–ü—Ä–∏—á–∏–Ω—ã"],
            tablefmt="pretty"
        ))
        
        # –°—Ç–∞—Ç—É—Å
        if total_signals > 0:
            self.checks["signal_generation"]["status"] = "‚úÖ OK"
            print(f"\n‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}")
        else:
            self.checks["signal_generation"]["status"] = "‚ö†Ô∏è NO SIGNALS"
            print(f"\n‚ö†Ô∏è –ù–ò –û–î–ù–û–ì–û –°–ò–ì–ù–ê–õ–ê –ù–ï –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–û!")
            print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   1. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î")
            print("   2. –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
            print("   3. –û—à–∏–±–∫–∏ –≤ –ª–æ–≥–∏–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
            print("   4. –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º")
        
        self.checks["signal_generation"]["details"] = {
            "total_signals": total_signals,
            "symbols_tested": len(symbols[:3]),
            "strategies_tested": len(strategies_to_test),
            "results": all_results
        }
    
    def _print_summary(self):
        """–ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞"""
        print("\n" + "=" * 70)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        print("=" * 70)
        
        checks_table = []
        for check_name, check_data in self.checks.items():
            status = check_data.get("status", "‚ùì")
            checks_table.append([
                check_name.replace("_", " ").title(),
                status
            ])
        
        print(tabulate(
            checks_table,
            headers=["–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", "–°—Ç–∞—Ç—É—Å"],
            tablefmt="pretty"
        ))
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\n" + "=" * 70)
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print("=" * 70)
        
        if self.checks["database"]["status"] != "‚úÖ OK":
            print("\n‚ùå –ë–ê–ó–ê –î–ê–ù–ù–´–•:")
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (DATABASE_URL)")
        
        if self.checks["data_availability"]["status"] == "‚ö†Ô∏è ISSUES":
            print("\n‚ö†Ô∏è –î–ê–ù–ù–´–ï:")
            details = self.checks["data_availability"]["details"]
            issues_count = details.get("issues_count", 0)
            print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ {issues_count} –ø—Ä–æ–±–ª–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏")
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É SimpleCandleSync")
            print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: curl https://–≤–∞—à-–¥–æ–º–µ–Ω.onrender.com/admin/sync-status")
        
        if self.checks["signal_generation"]["status"] == "‚ö†Ô∏è NO SIGNALS":
            print("\n‚ö†Ô∏è –°–ò–ì–ù–ê–õ–´ –ù–ï –ì–ï–ù–ï–†–ò–†–£–Æ–¢–°–Ø:")
            print("   ‚Ä¢ –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –º–æ–≥—É—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ SimpleCandleSync —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ")
            print("   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–Ω–∏–∑–∏—Ç—å min_signal_strength –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö")
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—à–∏–±–∫–∏")
        
        if self.checks["technical_analysis"]["status"] != "‚úÖ OK":
            print("\n‚ùå –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:")
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É TechnicalAnalysisContextManager")
            print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (180 –¥–Ω–µ–π)")
        
        print("\n" + "=" * 70)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    parser = argparse.ArgumentParser(
        description="üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python check_signals.py                      # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  python check_signals.py --symbol BTCUSDT     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
  python check_signals.py --test-strategies    # –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
  python check_signals.py --verbose            # –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏
        """
    )
    
    parser.add_argument(
        "--symbol",
        type=str,
        help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª"
    )
    
    parser.add_argument(
        "--test-strategies",
        action="store_true",
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"
    )
    
    parser.add_argument(
        "--verbose",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ (DEBUG)"
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.setLevel(logging.DEBUG)
    
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        logger.info("üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        db_success = await initialize_database()
        
        if not db_success:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("  1. –ü–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL")
            print("  2. –ß—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω")
            print("  3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            sys.exit(1)
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º repository
        repository = await get_market_data_repository()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TechnicalAnalysisContextManager
        logger.info("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        ta_context_manager = TechnicalAnalysisContextManager(
            repository=repository,
            auto_start_background_updates=False
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        if args.symbol:
            symbols = [args.symbol.upper()]
        else:
            # –ü–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
            symbols = Config.get_bybit_symbols()[:5]
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        diagnostics = SignalDiagnostics(repository, ta_context_manager)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        results = await diagnostics.run_full_diagnostic(
            symbols=symbols,
            test_strategies=args.test_strategies
        )
        
        logger.info("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
        
    except Exception as e:
        logger.error(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        sys.exit(1)
        
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
        try:
            await close_database()
            logger.info("üîí –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")


if __name__ == "__main__":
    asyncio.run(main())

    """
    –°—á–µ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
    
    –°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤.
    """
    
    def __init__(self, repository, ta_context_manager):
        """
        Args:
            repository: MarketDataRepository
            ta_context_manager: TechnicalAnalysisContextManager
        """
        self.repository = repository
        self.ta_context_manager = ta_context_manager
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_symbols_analyzed": 0,
            "total_signals_found": 0,
            "signals_by_strategy": defaultdict(int),
            "signals_by_symbol": defaultdict(int),
            "signals_by_type": defaultdict(int),
            "analysis_errors": 0,
            "start_time": datetime.now(timezone.utc)
        }
        
        logger.info("‚úÖ SignalCounter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def count_signals(
        self,
        symbols: List[str],
        strategies: List[str],
        days_back: int = 7,
        detailed: bool = False
    ) -> Dict[str, Any]:
        """
        –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
        
        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            strategies: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π ('breakout', 'bounce', 'false_breakout')
            days_back: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            detailed: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º —Å–∏–≥–Ω–∞–ª–µ
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        """
        logger.info("=" * 70)
        logger.info("üîç –ê–ù–ê–õ–ò–ó –°–ò–ì–ù–ê–õ–û–í –ü–û –°–¢–†–ê–¢–ï–ì–ò–Ø–ú")
        logger.info("=" * 70)
        logger.info(f"   ‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: {len(symbols)}")
        logger.info(f"   ‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(strategies)}")
        logger.info(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π")
        logger.info("=" * 70)
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
        end_time = datetime.now(timezone.utc)
        start_time = end_time - timedelta(days=days_back)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É
        detailed_results = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
        for symbol in symbols:
            logger.info(f"\nüìä –ê–Ω–∞–ª–∏–∑ {symbol}...")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                candles_1m = await self.repository.get_candles(
                    symbol=symbol,
                    interval="1m",
                    start_time=start_time,
                    end_time=end_time,
                    limit=10000
                )
                
                candles_5m = await self.repository.get_candles(
                    symbol=symbol,
                    interval="5m",
                    start_time=start_time,
                    end_time=end_time,
                    limit=2000
                )
                
                candles_1h = await self.repository.get_candles(
                    symbol=symbol,
                    interval="1h",
                    start_time=start_time,
                    end_time=end_time,
                    limit=168
                )
                
                candles_1d = await self.repository.get_candles(
                    symbol=symbol,
                    interval="1d",
                    start_time=start_time - timedelta(days=180),  # –ë–æ–ª—å—à–µ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    end_time=end_time,
                    limit=180
                )
                
                if not candles_1m and not candles_1h:
                    logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}, –ø—Ä–æ–ø—É—Å–∫")
                    continue
                
                logger.info(f"   ‚Ä¢ –°–≤–µ—á–∏ 1m: {len(candles_1m)}")
                logger.info(f"   ‚Ä¢ –°–≤–µ—á–∏ 5m: {len(candles_5m)}")
                logger.info(f"   ‚Ä¢ –°–≤–µ—á–∏ 1h: {len(candles_1h)}")
                logger.info(f"   ‚Ä¢ –°–≤–µ—á–∏ 1d: {len(candles_1d)}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                ta_context = None
                try:
                    ta_context = await self.ta_context_manager.get_context(symbol)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å TA –∫–æ–Ω—Ç–µ–∫—Å—Ç: {e}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
                symbol_signals = []
                
                for strategy_name in strategies:
                    signals = await self._analyze_with_strategy(
                        strategy_name=strategy_name,
                        symbol=symbol,
                        candles_1m=candles_1m,
                        candles_5m=candles_5m,
                        candles_1h=candles_1h,
                        candles_1d=candles_1d,
                        ta_context=ta_context
                    )
                    
                    symbol_signals.extend(signals)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    self.stats["signals_by_strategy"][strategy_name] += len(signals)
                    
                    for signal in signals:
                        self.stats["signals_by_type"][signal["signal_type"]] += 1
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self.stats["signals_by_symbol"][symbol] = len(symbol_signals)
                self.stats["total_signals_found"] += len(symbol_signals)
                self.stats["total_symbols_analyzed"] += 1
                
                if detailed:
                    detailed_results.append({
                        "symbol": symbol,
                        "signals": symbol_signals,
                        "total": len(symbol_signals)
                    })
                
                logger.info(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(symbol_signals)}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                self.stats["analysis_errors"] += 1
                import traceback
                logger.error(traceback.format_exc())
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        duration = (datetime.now(timezone.utc) - self.stats["start_time"]).total_seconds()
        
        return {
            "summary": {
                "symbols_analyzed": self.stats["total_symbols_analyzed"],
                "total_signals": self.stats["total_signals_found"],
                "analysis_duration_seconds": duration,
                "period_days": days_back,
                "signals_per_day": self.stats["total_signals_found"] / days_back if days_back > 0 else 0,
                "errors": self.stats["analysis_errors"]
            },
            "by_strategy": dict(self.stats["signals_by_strategy"]),
            "by_symbol": dict(self.stats["signals_by_symbol"]),
            "by_type": dict(self.stats["signals_by_type"]),
            "detailed": detailed_results if detailed else []
        }
    
    async def _analyze_with_strategy(
        self,
        strategy_name: str,
        symbol: str,
        candles_1m: List[Dict],
        candles_5m: List[Dict],
        candles_1h: List[Dict],
        candles_1d: List[Dict],
        ta_context: Optional[Any] = None
    ) -> List[Dict]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π –∏ —Å–æ–±–∏—Ä–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã
        
        Args:
            strategy_name: –ò–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ('breakout', 'bounce', 'false_breakout')
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            candles_*: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            ta_context: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        signals = []
        
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_class = {
                "breakout": BreakoutStrategy,
                "bounce": BounceStrategy,
                "false_breakout": FalseBreakoutStrategy
            }.get(strategy_name)
            
            if not strategy_class:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}")
                return signals
            
            strategy = strategy_class(
                symbol=symbol,
                repository=self.repository,
                ta_context_manager=self.ta_context_manager,
                min_signal_strength=0.5,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
                signal_cooldown_minutes=5,
                max_signals_per_hour=12
            )
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Å–∫–æ–ª—å–∑—è—â–µ–º –æ–∫–Ω–µ
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            window_1m = 100
            window_5m = 50
            window_1h = 24
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å —à–∞–≥–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç)
            step_minutes = 60
            
            if not candles_1m:
                return signals
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º 1m —Å–≤–µ—á–∏ –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
            for i in range(window_1m, len(candles_1m), step_minutes):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –æ–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
                    window_candles_1m = candles_1m[max(0, i-window_1m):i]
                    window_candles_5m = candles_5m[max(0, i//5-window_5m):i//5] if candles_5m else []
                    window_candles_1h = candles_1h[max(0, i//60-window_1h):i//60] if candles_1h else []
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
                    signal = await strategy.analyze_with_data(
                        symbol=symbol,
                        candles_1m=window_candles_1m,
                        candles_5m=window_candles_5m,
                        candles_1h=window_candles_1h,
                        candles_1d=candles_1d,
                        ta_context=ta_context
                    )
                    
                    if signal:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–≥–Ω–∞–ª–µ
                        signals.append({
                            "strategy": strategy_name,
                            "symbol": symbol,
                            "signal_type": signal.signal_type.value,
                            "strength": signal.strength,
                            "confidence": signal.confidence,
                            "price": signal.price,
                            "timestamp": signal.timestamp.isoformat(),
                            "reasons": signal.reasons,
                            "quality_score": signal.quality_score
                        })
                
                except Exception as e:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ –∞–Ω–∞–ª–∏–∑–∞
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—á–∫–∏ {i}: {e}")
                    continue
            
            logger.debug(f"   ‚Ä¢ {strategy_name}: {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {e}")
            import traceback
            logger.error(traceback.format_exc())
        
        return signals
    
    def print_report(self, results: Dict[str, Any]):
        """
        –í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç –æ —Å–∏–≥–Ω–∞–ª–∞—Ö
        
        Args:
            results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        """
        print("\n" + "=" * 70)
        print("üìä –û–¢–ß–ï–¢ –ü–û –°–ò–ì–ù–ê–õ–ê–ú –¢–û–†–ì–û–í–´–• –°–¢–†–ê–¢–ï–ì–ò–ô")
        print("=" * 70)
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        summary = results["summary"]
        print(f"\nüìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {summary['period_days']} –¥–Ω–µ–π")
        print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: {summary['analysis_duration_seconds']:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –°–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {summary['symbols_analyzed']}")
        print(f"üéØ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {summary['total_signals']}")
        print(f"üìà –°–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å: {summary['signals_per_day']:.1f}")
        
        if summary["errors"] > 0:
            print(f"‚ö†Ô∏è  –û—à–∏–±–æ–∫ –∞–Ω–∞–ª–∏–∑–∞: {summary['errors']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
        print("\n" + "-" * 70)
        print("üìä –°–ò–ì–ù–ê–õ–´ –ü–û –°–¢–†–ê–¢–ï–ì–ò–Ø–ú")
        print("-" * 70)
        
        strategy_data = []
        for strategy, count in sorted(results["by_strategy"].items(), key=lambda x: x[1], reverse=True):
            percentage = (count / summary['total_signals'] * 100) if summary['total_signals'] > 0 else 0
            strategy_data.append([
                strategy,
                count,
                f"{percentage:.1f}%",
                f"{count / summary['period_days']:.1f}" if summary['period_days'] > 0 else "0"
            ])
        
        print(tabulate(
            strategy_data,
            headers=["–°—Ç—Ä–∞—Ç–µ–≥–∏—è", "–°–∏–≥–Ω–∞–ª–æ–≤", "–î–æ–ª—è", "–í –¥–µ–Ω—å"],
            tablefmt="pretty"
        ))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º (—Ç–æ–ø-10)
        if results["by_symbol"]:
            print("\n" + "-" * 70)
            print("üìä –°–ò–ì–ù–ê–õ–´ –ü–û –°–ò–ú–í–û–õ–ê–ú (–¢–û–ü-10)")
            print("-" * 70)
            
            symbol_data = []
            sorted_symbols = sorted(results["by_symbol"].items(), key=lambda x: x[1], reverse=True)[:10]
            
            for symbol, count in sorted_symbols:
                percentage = (count / summary['total_signals'] * 100) if summary['total_signals'] > 0 else 0
                symbol_data.append([
                    symbol,
                    count,
                    f"{percentage:.1f}%"
                ])
            
            print(tabulate(
                symbol_data,
                headers=["–°–∏–º–≤–æ–ª", "–°–∏–≥–Ω–∞–ª–æ–≤", "–î–æ–ª—è"],
                tablefmt="pretty"
            ))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–∏–≥–Ω–∞–ª–æ–≤
        if results["by_type"]:
            print("\n" + "-" * 70)
            print("üìä –°–ò–ì–ù–ê–õ–´ –ü–û –¢–ò–ü–£")
            print("-" * 70)
            
            type_data = []
            for signal_type, count in sorted(results["by_type"].items(), key=lambda x: x[1], reverse=True):
                percentage = (count / summary['total_signals'] * 100) if summary['total_signals'] > 0 else 0
                
                # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–æ–≤
                emoji = {
                    "BUY": "üü¢",
                    "STRONG_BUY": "üü¢üü¢",
                    "SELL": "üî¥",
                    "STRONG_SELL": "üî¥üî¥",
                    "NEUTRAL": "üîµ"
                }.get(signal_type, "‚ö™")
                
                type_data.append([
                    f"{emoji} {signal_type}",
                    count,
                    f"{percentage:.1f}%"
                ])
            
            print(tabulate(
                type_data,
                headers=["–¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–î–æ–ª—è"],
                tablefmt="pretty"
            ))
        
        # –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã)
        if results.get("detailed"):
            print("\n" + "-" * 70)
            print("üìã –ü–û–î–†–û–ë–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –°–ò–ú–í–û–õ–ê–ú")
            print("-" * 70)
            
            for symbol_result in results["detailed"]:
                symbol = symbol_result["symbol"]
                signals = symbol_result["signals"]
                
                if signals:
                    print(f"\n{symbol} ({len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤):")
                    
                    for i, signal in enumerate(signals[:10], 1):  # –ü–µ—Ä–≤—ã–µ 10
                        print(f"  {i}. {signal['signal_type']} @ ${signal['price']:,.2f}")
                        print(f"     –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal['strategy']}")
                        print(f"     –°–∏–ª–∞: {signal['strength']:.2f}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']:.2f}")
                        print(f"     –í—Ä–µ–º—è: {signal['timestamp']}")
                        if signal['reasons']:
                            print(f"     –ü—Ä–∏—á–∏–Ω—ã: {', '.join(signal['reasons'][:3])}")
                        print()
                    
                    if len(signals) > 10:
                        print(f"  ... –∏ –µ—â–µ {len(signals) - 10} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        print("\n" + "=" * 70)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    parser = argparse.ArgumentParser(
        description="üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python check_signals.py                      # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  python check_signals.py --symbol BTCUSDT     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
  python check_signals.py --test-strategies    # –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
  python check_signals.py --verbose            # –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏
        """
    )
    
    parser.add_argument(
        "--symbol",
        type=str,
        help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª"
    )
    
    parser.add_argument(
        "--test-strategies",
        action="store_true",
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"
    )
    
    parser.add_argument(
        "--verbose",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ (DEBUG)"
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.setLevel(logging.DEBUG)
    
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        logger.info("üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        db_success = await initialize_database()
        
        if not db_success:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("  1. –ü–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL")
            print("  2. –ß—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω")
            print("  3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            sys.exit(1)
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º repository
        repository = await get_market_data_repository()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TechnicalAnalysisContextManager
        logger.info("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        ta_context_manager = TechnicalAnalysisContextManager(
            repository=repository,
            auto_start_background_updates=False
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        if args.symbol:
            symbols = [args.symbol.upper()]
        else:
            # –ü–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
            symbols = Config.get_bybit_symbols()[:5]
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        diagnostics = SignalDiagnostics(repository, ta_context_manager)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        results = await diagnostics.run_full_diagnostic(
            symbols=symbols,
            test_strategies=args.test_strategies
        )
        
        logger.info("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
        
    except Exception as e:
        logger.error(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        sys.exit(1)
        
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
        try:
            await close_database()
            logger.info("üîí –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")


if __name__ == "__main__":
    asyncio.run(main())
