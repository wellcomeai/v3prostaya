"""
üß™ –¢–ï–°–¢–û–í–´–ô –°–ö–†–ò–ü–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ø–æ—á–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏, –≥–¥–µ –∏–º–µ–Ω–Ω–æ —Ç–µ—Ä—è—é—Ç—Å—è —Å–∏–≥–Ω–∞–ª—ã
"""

import asyncio
import logging
from datetime import datetime

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def test_signal_chain():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π —Ü–µ–ø–æ—á–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    print("=" * 80)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¶–ï–ü–û–ß–ö–ò –ü–ï–†–ï–î–ê–ß–ò –°–ò–ì–ù–ê–õ–û–í")
    print("=" * 80)
    
    # –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    print("\nüì¶ –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    try:
        from strategies.base_strategy import TradingSignal, SignalType
        from core.signal_manager import SignalManager
        from telegram_bot import TelegramBot
        from config import Config
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return
    
    # –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    print("\nüîî –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞...")
    test_signal = TradingSignal(
        symbol="BTCUSDT",
        signal_type=SignalType.BUY,
        price=50000.0,
        timestamp=datetime.now(),
        strength=0.8,  # –í—ã—Å–æ–∫–∞—è —Å–∏–ª–∞
        confidence=0.9,
        reasons=["–¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"],
        timeframe="1h"
    )
    print(f"‚úÖ –°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω: {test_signal.symbol} - {test_signal.signal_type.name}")
    print(f"   –°–∏–ª–∞: {test_signal.strength}, Confidence: {test_signal.confidence}")
    
    # –®–ê–ì 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("\nüîß –®–ê–ì 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    # Mock TelegramBot –¥–ª—è —Ç–µ—Å—Ç–∞
    class MockTelegramBot:
        def __init__(self):
            self.all_users = {123456789}  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            self.received_signals = []
        
        async def broadcast_signal(self, message: str):
            print(f"\nüì® TelegramBot.broadcast_signal –≤—ã–∑–≤–∞–Ω!")
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.all_users)}")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}...")
            self.received_signals.append(message)
            print("‚úÖ –°–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –±–æ—Ç–æ–º!")
    
    bot_mock = MockTelegramBot()
    print(f"‚úÖ Mock –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å {len(bot_mock.all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    
    # –°–æ–∑–¥–∞–µ–º SignalManager –±–µ–∑ OpenAI –¥–ª—è —Ç–µ—Å—Ç–∞
    signal_manager = SignalManager(
        openai_analyzer=None,
        cooldown_minutes=0,  # –û—Ç–∫–ª—é—á–∞–µ–º cooldown
        max_signals_per_hour=1000,  # –ë–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç
        enable_ai_enrichment=False,  # –û—Ç–∫–ª—é—á–∞–µ–º AI
        min_signal_strength=0.1  # –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥
    )
    print("‚úÖ SignalManager —Å–æ–∑–¥–∞–Ω")
    
    # –®–ê–ì 4: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
    print("\nüì° –®–ê–ì 4: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞...")
    signal_manager.add_subscriber(bot_mock.broadcast_signal)
    print(f"‚úÖ –ü–æ–¥–ø–∏—Å—á–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(signal_manager.subscribers)}")
    
    if len(signal_manager.subscribers) == 0:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–¥–ø–∏—Å—á–∏–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        return
    
    # –®–ê–ì 5: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    print("\nüöÄ –®–ê–ì 5: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ SignalManager...")
    try:
        await signal_manager.process_signal(test_signal)
        print("‚úÖ SignalManager.process_signal –≤—ã–ø–æ–ª–Ω–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ SignalManager.process_signal: {e}")
        import traceback
        traceback.print_exc()
        return
    
    # –®–ê–ì 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    print("\nüìä –®–ê–ì 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
    if bot_mock.received_signals:
        print(f"‚úÖ‚úÖ‚úÖ –£–°–ü–ï–•! –ë–æ—Ç –ø–æ–ª—É—á–∏–ª {len(bot_mock.received_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        print("\n–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª:")
        print("-" * 80)
        print(bot_mock.received_signals[0])
        print("-" * 80)
    else:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ë–æ—Ç –ù–ï –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª!")
        print("\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. SignalManager –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª —Å–∏–≥–Ω–∞–ª")
        print("2. –û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ process_signal")
        print("3. –ü–æ–¥–ø–∏—Å—á–∏–∫ –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω")
        print("\n–ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ SignalManager –≤—ã—à–µ!")
    
    # –®–ê–ì 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ SignalManager
    print("\nüìà –®–ê–ì 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SignalManager...")
    try:
        stats = signal_manager.get_stats()
        print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats.get('total_signals_processed', 0)}")
        print(f"–ü—Ä–∏–Ω—è—Ç–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats.get('signals_accepted', 0)}")
        print(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats.get('signals_rejected', 0)}")
        
        if stats.get('signals_rejected', 0) > 0:
            print("\n‚ö†Ô∏è –°–∏–≥–Ω–∞–ª—ã –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è! –ü—Ä–∏—á–∏–Ω—ã:")
            rejection_reasons = stats.get('rejection_reasons', {})
            for reason, count in rejection_reasons.items():
                print(f"   - {reason}: {count}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
    
    print("\n" + "=" * 80)
    print("üèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 80)


if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞...\n")
    asyncio.run(test_signal_chain())
